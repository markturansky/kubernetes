/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [18]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(18)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym103 := z.DecBinary()
	_ = yym103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct104 := r.ContainerType()
		if yyct104 == codecSelferValueTypeMap1234 {
			yyl104 := r.ReadMapStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl104, d)
			}
		} else if yyct104 == codecSelferValueTypeArray1234 {
			yyl104 := r.ReadArrayStart()
			if yyl104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys105Slc
	var yyhl105 bool = l >= 0
	for yyj105 := 0; ; yyj105++ {
		if yyhl105 {
			if yyj105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys105Slc = r.DecodeBytes(yys105Slc, true, true)
		yys105 := string(yys105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys105 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys105)
		} // end switch yys105
	} // end for yyj105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj124 int
	var yyb124 bool
	var yyhl124 bool = l >= 0
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj124++
	if yyhl124 {
		yyb124 = yyj124 > l
	} else {
		yyb124 = r.CheckBreak()
	}
	if yyb124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj124++
		if yyhl124 {
			yyb124 = yyj124 > l
		} else {
			yyb124 = r.CheckBreak()
		}
		if yyb124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [17]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			yyq144[0] = x.HostPath != nil
			yyq144[1] = x.EmptyDir != nil
			yyq144[2] = x.GCEPersistentDisk != nil
			yyq144[3] = x.AWSElasticBlockStore != nil
			yyq144[4] = x.GitRepo != nil
			yyq144[5] = x.Secret != nil
			yyq144[6] = x.NFS != nil
			yyq144[7] = x.ISCSI != nil
			yyq144[8] = x.Glusterfs != nil
			yyq144[9] = x.PersistentVolumeClaim != nil
			yyq144[10] = x.RBD != nil
			yyq144[11] = x.FlexVolume != nil
			yyq144[12] = x.Cinder != nil
			yyq144[13] = x.CephFS != nil
			yyq144[14] = x.Flocker != nil
			yyq144[15] = x.DownwardAPI != nil
			yyq144[16] = x.FC != nil
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(17)
			} else {
				yynn144 = 0
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq144[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq144[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym162 := z.DecBinary()
	_ = yym162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct163 := r.ContainerType()
		if yyct163 == codecSelferValueTypeMap1234 {
			yyl163 := r.ReadMapStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl163, d)
			}
		} else if yyct163 == codecSelferValueTypeArray1234 {
			yyl163 := r.ReadArrayStart()
			if yyl163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys164Slc
	var yyhl164 bool = l >= 0
	for yyj164 := 0; ; yyj164++ {
		if yyhl164 {
			if yyj164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys164Slc = r.DecodeBytes(yys164Slc, true, true)
		yys164 := string(yys164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys164 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys164)
		} // end switch yys164
	} // end for yyj164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj182 int
	var yyb182 bool
	var yyhl182 bool = l >= 0
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj182++
	if yyhl182 {
		yyb182 = yyj182 > l
	} else {
		yyb182 = r.CheckBreak()
	}
	if yyb182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj182++
		if yyhl182 {
			yyb182 = yyj182 > l
		} else {
			yyb182 = r.CheckBreak()
		}
		if yyb182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym200 := z.EncBinary()
		_ = yym200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep201 := !z.EncBinary()
			yy2arr201 := z.EncBasicHandle().StructToArray
			var yyq201 [2]bool
			_, _, _ = yysep201, yyq201, yy2arr201
			const yyr201 bool = false
			yyq201[1] = x.ReadOnly != false
			var yynn201 int
			if yyr201 || yy2arr201 {
				r.EncodeArrayStart(2)
			} else {
				yynn201 = 1
				for _, b := range yyq201 {
					if b {
						yynn201++
					}
				}
				r.EncodeMapStart(yynn201)
				yynn201 = 0
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym204 := z.EncBinary()
				_ = yym204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq201[1] {
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym207 := z.EncBinary()
					_ = yym207
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr201 || yy2arr201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym208 := z.DecBinary()
	_ = yym208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct209 := r.ContainerType()
		if yyct209 == codecSelferValueTypeMap1234 {
			yyl209 := r.ReadMapStart()
			if yyl209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl209, d)
			}
		} else if yyct209 == codecSelferValueTypeArray1234 {
			yyl209 := r.ReadArrayStart()
			if yyl209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys210Slc
	var yyhl210 bool = l >= 0
	for yyj210 := 0; ; yyj210++ {
		if yyhl210 {
			if yyj210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys210Slc = r.DecodeBytes(yys210Slc, true, true)
		yys210 := string(yys210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys210 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys210)
		} // end switch yys210
	} // end for yyj210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj213 int
	var yyb213 bool
	var yyhl213 bool = l >= 0
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj213++
	if yyhl213 {
		yyb213 = yyj213 > l
	} else {
		yyb213 = r.CheckBreak()
	}
	if yyb213 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj213++
		if yyhl213 {
			yyb213 = yyj213 > l
		} else {
			yyb213 = r.CheckBreak()
		}
		if yyb213 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj213-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym216 := z.EncBinary()
		_ = yym216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep217 := !z.EncBinary()
			yy2arr217 := z.EncBasicHandle().StructToArray
			var yyq217 [12]bool
			_, _, _ = yysep217, yyq217, yy2arr217
			const yyr217 bool = false
			yyq217[0] = x.GCEPersistentDisk != nil
			yyq217[1] = x.AWSElasticBlockStore != nil
			yyq217[2] = x.HostPath != nil
			yyq217[3] = x.Glusterfs != nil
			yyq217[4] = x.NFS != nil
			yyq217[5] = x.RBD != nil
			yyq217[6] = x.ISCSI != nil
			yyq217[7] = x.Cinder != nil
			yyq217[8] = x.CephFS != nil
			yyq217[9] = x.FC != nil
			yyq217[10] = x.Flocker != nil
			yyq217[11] = x.FlexVolume != nil
			var yynn217 int
			if yyr217 || yy2arr217 {
				r.EncodeArrayStart(12)
			} else {
				yynn217 = 0
				for _, b := range yyq217 {
					if b {
						yynn217++
					}
				}
				r.EncodeMapStart(yynn217)
				yynn217 = 0
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq217[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym230 := z.DecBinary()
	_ = yym230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct231 := r.ContainerType()
		if yyct231 == codecSelferValueTypeMap1234 {
			yyl231 := r.ReadMapStart()
			if yyl231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl231, d)
			}
		} else if yyct231 == codecSelferValueTypeArray1234 {
			yyl231 := r.ReadArrayStart()
			if yyl231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys232Slc
	var yyhl232 bool = l >= 0
	for yyj232 := 0; ; yyj232++ {
		if yyhl232 {
			if yyj232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys232Slc = r.DecodeBytes(yys232Slc, true, true)
		yys232 := string(yys232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys232 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys232)
		} // end switch yys232
	} // end for yyj232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj245 int
	var yyb245 bool
	var yyhl245 bool = l >= 0
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj245++
	if yyhl245 {
		yyb245 = yyj245 > l
	} else {
		yyb245 = r.CheckBreak()
	}
	if yyb245 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	for {
		yyj245++
		if yyhl245 {
			yyb245 = yyj245 > l
		} else {
			yyb245 = r.CheckBreak()
		}
		if yyb245 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj245-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yy267.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy268 := &x.ObjectMeta
					yy268.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy270 := &x.Spec
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.Spec
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy273 := &x.Status
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Status
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym275 := z.DecBinary()
	_ = yym275
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct276 := r.ContainerType()
		if yyct276 == codecSelferValueTypeMap1234 {
			yyl276 := r.ReadMapStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl276, d)
			}
		} else if yyct276 == codecSelferValueTypeArray1234 {
			yyl276 := r.ReadArrayStart()
			if yyl276 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl276, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys277Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys277Slc
	var yyhl277 bool = l >= 0
	for yyj277 := 0; ; yyj277++ {
		if yyhl277 {
			if yyj277 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys277Slc = r.DecodeBytes(yys277Slc, true, true)
		yys277 := string(yys277Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys277 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv280 := &x.ObjectMeta
				yyv280.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv281 := &x.Spec
				yyv281.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv282 := &x.Status
				yyv282.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys277)
		} // end switch yys277
	} // end for yyj277
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj283 int
	var yyb283 bool
	var yyhl283 bool = l >= 0
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv286 := &x.ObjectMeta
		yyv286.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv287 := &x.Spec
		yyv287.CodecDecodeSelf(d)
	}
	yyj283++
	if yyhl283 {
		yyb283 = yyj283 > l
	} else {
		yyb283 = r.CheckBreak()
	}
	if yyb283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv288 := &x.Status
		yyv288.CodecDecodeSelf(d)
	}
	for {
		yyj283++
		if yyhl283 {
			yyb283 = yyj283 > l
		} else {
			yyb283 = r.CheckBreak()
		}
		if yyb283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [16]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[0] = len(x.Capacity) != 0
			yyq290[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq290[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq290[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq290[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq290[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq290[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq290[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq290[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq290[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq290[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq290[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq290[12] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq290[13] = len(x.AccessModes) != 0
			yyq290[14] = x.ClaimRef != nil
			yyq290[15] = x.PersistentVolumeReclaimPolicy != ""
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(16)
			} else {
				yynn290 = 0
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr290 || yy2arr290 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr290 || yy2arr290 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn294 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn294 = true
				goto LABEL294
			}
		LABEL294:
			if yyr290 || yy2arr290 {
				if yyn294 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn294 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn295 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn295 = true
				goto LABEL295
			}
		LABEL295:
			if yyr290 || yy2arr290 {
				if yyn295 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn295 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn296 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn296 = true
				goto LABEL296
			}
		LABEL296:
			if yyr290 || yy2arr290 {
				if yyn296 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn296 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn297 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn297 = true
				goto LABEL297
			}
		LABEL297:
			if yyr290 || yy2arr290 {
				if yyn297 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn297 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn298 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn298 = true
				goto LABEL298
			}
		LABEL298:
			if yyr290 || yy2arr290 {
				if yyn298 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn298 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn299 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn299 = true
				goto LABEL299
			}
		LABEL299:
			if yyr290 || yy2arr290 {
				if yyn299 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn299 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn300 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn300 = true
				goto LABEL300
			}
		LABEL300:
			if yyr290 || yy2arr290 {
				if yyn300 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn300 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn301 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn301 = true
				goto LABEL301
			}
		LABEL301:
			if yyr290 || yy2arr290 {
				if yyn301 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn301 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn302 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn302 = true
				goto LABEL302
			}
		LABEL302:
			if yyr290 || yy2arr290 {
				if yyn302 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn302 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn303 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn303 = true
				goto LABEL303
			}
		LABEL303:
			if yyr290 || yy2arr290 {
				if yyn303 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq290[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq290[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn303 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[13] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym305 := z.EncBinary()
						_ = yym305
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym306 := z.EncBinary()
						_ = yym306
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[14] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq290[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[15] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq290[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv312 := &x.Capacity
				yyv312.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv325 := &x.AccessModes
				yym326 := z.DecBinary()
				_ = yym326
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv325), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj329 int
	var yyb329 bool
	var yyhl329 bool = l >= 0
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv330 := &x.Capacity
		yyv330.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv343 := &x.AccessModes
		yym344 := z.DecBinary()
		_ = yym344
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv343), d)
		}
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj329++
	if yyhl329 {
		yyb329 = yyj329 > l
	} else {
		yyb329 = r.CheckBreak()
	}
	if yyb329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj329++
		if yyhl329 {
			yyb329 = yyj329 > l
		} else {
			yyb329 = r.CheckBreak()
		}
		if yyb329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym347 := z.EncBinary()
	_ = yym347
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym349 := z.EncBinary()
		_ = yym349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep350 := !z.EncBinary()
			yy2arr350 := z.EncBasicHandle().StructToArray
			var yyq350 [4]bool
			_, _, _ = yysep350, yyq350, yy2arr350
			const yyr350 bool = false
			yyq350[0] = x.Phase != ""
			yyq350[1] = x.Message != ""
			yyq350[2] = x.Reason != ""
			yyq350[3] = len(x.Conditions) != 0
			var yynn350 int
			if yyr350 || yy2arr350 {
				r.EncodeArrayStart(4)
			} else {
				yynn350 = 0
				for _, b := range yyq350 {
					if b {
						yynn350++
					}
				}
				r.EncodeMapStart(yynn350)
				yynn350 = 0
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[1] {
					yym353 := z.EncBinary()
					_ = yym353
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[2] {
					yym356 := z.EncBinary()
					_ = yym356
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym357 := z.EncBinary()
					_ = yym357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq350[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym359 := z.EncBinary()
						_ = yym359
						if false {
						} else {
							h.encSlicePersistentVolumeCondition(([]PersistentVolumeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq350[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym360 := z.EncBinary()
						_ = yym360
						if false {
						} else {
							h.encSlicePersistentVolumeCondition(([]PersistentVolumeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr350 || yy2arr350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym361 := z.DecBinary()
	_ = yym361
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct362 := r.ContainerType()
		if yyct362 == codecSelferValueTypeMap1234 {
			yyl362 := r.ReadMapStart()
			if yyl362 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl362, d)
			}
		} else if yyct362 == codecSelferValueTypeArray1234 {
			yyl362 := r.ReadArrayStart()
			if yyl362 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl362, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys363Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys363Slc
	var yyhl363 bool = l >= 0
	for yyj363 := 0; ; yyj363++ {
		if yyhl363 {
			if yyj363 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys363Slc = r.DecodeBytes(yys363Slc, true, true)
		yys363 := string(yys363Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys363 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv367 := &x.Conditions
				yym368 := z.DecBinary()
				_ = yym368
				if false {
				} else {
					h.decSlicePersistentVolumeCondition((*[]PersistentVolumeCondition)(yyv367), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys363)
		} // end switch yys363
	} // end for yyj363
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj369 int
	var yyb369 bool
	var yyhl369 bool = l >= 0
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj369++
	if yyhl369 {
		yyb369 = yyj369 > l
	} else {
		yyb369 = r.CheckBreak()
	}
	if yyb369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv373 := &x.Conditions
		yym374 := z.DecBinary()
		_ = yym374
		if false {
		} else {
			h.decSlicePersistentVolumeCondition((*[]PersistentVolumeCondition)(yyv373), d)
		}
	}
	for {
		yyj369++
		if yyhl369 {
			yyb369 = yyj369 > l
		} else {
			yyb369 = r.CheckBreak()
		}
		if yyb369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym375 := z.EncBinary()
		_ = yym375
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep376 := !z.EncBinary()
			yy2arr376 := z.EncBasicHandle().StructToArray
			var yyq376 [4]bool
			_, _, _ = yysep376, yyq376, yy2arr376
			const yyr376 bool = false
			yyq376[0] = x.Kind != ""
			yyq376[1] = x.APIVersion != ""
			yyq376[2] = true
			var yynn376 int
			if yyr376 || yy2arr376 {
				r.EncodeArrayStart(4)
			} else {
				yynn376 = 1
				for _, b := range yyq376 {
					if b {
						yynn376++
					}
				}
				r.EncodeMapStart(yynn376)
				yynn376 = 0
			}
			if yyr376 || yy2arr376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq376[0] {
					yym378 := z.EncBinary()
					_ = yym378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq376[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym379 := z.EncBinary()
					_ = yym379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr376 || yy2arr376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq376[1] {
					yym381 := z.EncBinary()
					_ = yym381
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq376[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym382 := z.EncBinary()
					_ = yym382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr376 || yy2arr376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq376[2] {
					yy384 := &x.ListMeta
					yym385 := z.EncBinary()
					_ = yym385
					if false {
					} else if z.HasExtensions() && z.EncExt(yy384) {
					} else {
						z.EncFallback(yy384)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq376[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy386 := &x.ListMeta
					yym387 := z.EncBinary()
					_ = yym387
					if false {
					} else if z.HasExtensions() && z.EncExt(yy386) {
					} else {
						z.EncFallback(yy386)
					}
				}
			}
			if yyr376 || yy2arr376 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym389 := z.EncBinary()
					_ = yym389
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym390 := z.EncBinary()
					_ = yym390
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr376 || yy2arr376 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym391 := z.DecBinary()
	_ = yym391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct392 := r.ContainerType()
		if yyct392 == codecSelferValueTypeMap1234 {
			yyl392 := r.ReadMapStart()
			if yyl392 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl392, d)
			}
		} else if yyct392 == codecSelferValueTypeArray1234 {
			yyl392 := r.ReadArrayStart()
			if yyl392 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl392, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys393Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys393Slc
	var yyhl393 bool = l >= 0
	for yyj393 := 0; ; yyj393++ {
		if yyhl393 {
			if yyj393 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys393Slc = r.DecodeBytes(yys393Slc, true, true)
		yys393 := string(yys393Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys393 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv396 := &x.ListMeta
				yym397 := z.DecBinary()
				_ = yym397
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv396) {
				} else {
					z.DecFallback(yyv396, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv398 := &x.Items
				yym399 := z.DecBinary()
				_ = yym399
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv398), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys393)
		} // end switch yys393
	} // end for yyj393
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj400 int
	var yyb400 bool
	var yyhl400 bool = l >= 0
	yyj400++
	if yyhl400 {
		yyb400 = yyj400 > l
	} else {
		yyb400 = r.CheckBreak()
	}
	if yyb400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj400++
	if yyhl400 {
		yyb400 = yyj400 > l
	} else {
		yyb400 = r.CheckBreak()
	}
	if yyb400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj400++
	if yyhl400 {
		yyb400 = yyj400 > l
	} else {
		yyb400 = r.CheckBreak()
	}
	if yyb400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv403 := &x.ListMeta
		yym404 := z.DecBinary()
		_ = yym404
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv403) {
		} else {
			z.DecFallback(yyv403, false)
		}
	}
	yyj400++
	if yyhl400 {
		yyb400 = yyj400 > l
	} else {
		yyb400 = r.CheckBreak()
	}
	if yyb400 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv405 := &x.Items
		yym406 := z.DecBinary()
		_ = yym406
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv405), d)
		}
	}
	for {
		yyj400++
		if yyhl400 {
			yyb400 = yyj400 > l
		} else {
			yyb400 = r.CheckBreak()
		}
		if yyb400 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj400-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym407 := z.EncBinary()
		_ = yym407
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep408 := !z.EncBinary()
			yy2arr408 := z.EncBasicHandle().StructToArray
			var yyq408 [5]bool
			_, _, _ = yysep408, yyq408, yy2arr408
			const yyr408 bool = false
			yyq408[0] = x.Kind != ""
			yyq408[1] = x.APIVersion != ""
			yyq408[2] = true
			yyq408[3] = true
			yyq408[4] = true
			var yynn408 int
			if yyr408 || yy2arr408 {
				r.EncodeArrayStart(5)
			} else {
				yynn408 = 0
				for _, b := range yyq408 {
					if b {
						yynn408++
					}
				}
				r.EncodeMapStart(yynn408)
				yynn408 = 0
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[0] {
					yym410 := z.EncBinary()
					_ = yym410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[1] {
					yym413 := z.EncBinary()
					_ = yym413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq408[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym414 := z.EncBinary()
					_ = yym414
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[2] {
					yy416 := &x.ObjectMeta
					yy416.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq408[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy417 := &x.ObjectMeta
					yy417.CodecEncodeSelf(e)
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[3] {
					yy419 := &x.Spec
					yy419.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq408[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy420 := &x.Spec
					yy420.CodecEncodeSelf(e)
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq408[4] {
					yy422 := &x.Status
					yy422.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq408[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.Status
					yy423.CodecEncodeSelf(e)
				}
			}
			if yyr408 || yy2arr408 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym424 := z.DecBinary()
	_ = yym424
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct425 := r.ContainerType()
		if yyct425 == codecSelferValueTypeMap1234 {
			yyl425 := r.ReadMapStart()
			if yyl425 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl425, d)
			}
		} else if yyct425 == codecSelferValueTypeArray1234 {
			yyl425 := r.ReadArrayStart()
			if yyl425 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl425, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys426Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys426Slc
	var yyhl426 bool = l >= 0
	for yyj426 := 0; ; yyj426++ {
		if yyhl426 {
			if yyj426 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys426Slc = r.DecodeBytes(yys426Slc, true, true)
		yys426 := string(yys426Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys426 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv429 := &x.ObjectMeta
				yyv429.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv430 := &x.Spec
				yyv430.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv431 := &x.Status
				yyv431.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys426)
		} // end switch yys426
	} // end for yyj426
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj432 int
	var yyb432 bool
	var yyhl432 bool = l >= 0
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv435 := &x.ObjectMeta
		yyv435.CodecDecodeSelf(d)
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv436 := &x.Spec
		yyv436.CodecDecodeSelf(d)
	}
	yyj432++
	if yyhl432 {
		yyb432 = yyj432 > l
	} else {
		yyb432 = r.CheckBreak()
	}
	if yyb432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv437 := &x.Status
		yyv437.CodecDecodeSelf(d)
	}
	for {
		yyj432++
		if yyhl432 {
			yyb432 = yyj432 > l
		} else {
			yyb432 = r.CheckBreak()
		}
		if yyb432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym438 := z.EncBinary()
		_ = yym438
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep439 := !z.EncBinary()
			yy2arr439 := z.EncBasicHandle().StructToArray
			var yyq439 [4]bool
			_, _, _ = yysep439, yyq439, yy2arr439
			const yyr439 bool = false
			yyq439[0] = x.Kind != ""
			yyq439[1] = x.APIVersion != ""
			yyq439[2] = true
			var yynn439 int
			if yyr439 || yy2arr439 {
				r.EncodeArrayStart(4)
			} else {
				yynn439 = 1
				for _, b := range yyq439 {
					if b {
						yynn439++
					}
				}
				r.EncodeMapStart(yynn439)
				yynn439 = 0
			}
			if yyr439 || yy2arr439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq439[0] {
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq439[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr439 || yy2arr439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq439[1] {
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq439[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr439 || yy2arr439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq439[2] {
					yy447 := &x.ListMeta
					yym448 := z.EncBinary()
					_ = yym448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy447) {
					} else {
						z.EncFallback(yy447)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq439[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy449 := &x.ListMeta
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else if z.HasExtensions() && z.EncExt(yy449) {
					} else {
						z.EncFallback(yy449)
					}
				}
			}
			if yyr439 || yy2arr439 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym452 := z.EncBinary()
					_ = yym452
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym453 := z.EncBinary()
					_ = yym453
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr439 || yy2arr439 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym454 := z.DecBinary()
	_ = yym454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct455 := r.ContainerType()
		if yyct455 == codecSelferValueTypeMap1234 {
			yyl455 := r.ReadMapStart()
			if yyl455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl455, d)
			}
		} else if yyct455 == codecSelferValueTypeArray1234 {
			yyl455 := r.ReadArrayStart()
			if yyl455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys456Slc
	var yyhl456 bool = l >= 0
	for yyj456 := 0; ; yyj456++ {
		if yyhl456 {
			if yyj456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys456Slc = r.DecodeBytes(yys456Slc, true, true)
		yys456 := string(yys456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys456 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv459 := &x.ListMeta
				yym460 := z.DecBinary()
				_ = yym460
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv459) {
				} else {
					z.DecFallback(yyv459, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv461 := &x.Items
				yym462 := z.DecBinary()
				_ = yym462
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv461), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys456)
		} // end switch yys456
	} // end for yyj456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj463 int
	var yyb463 bool
	var yyhl463 bool = l >= 0
	yyj463++
	if yyhl463 {
		yyb463 = yyj463 > l
	} else {
		yyb463 = r.CheckBreak()
	}
	if yyb463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj463++
	if yyhl463 {
		yyb463 = yyj463 > l
	} else {
		yyb463 = r.CheckBreak()
	}
	if yyb463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj463++
	if yyhl463 {
		yyb463 = yyj463 > l
	} else {
		yyb463 = r.CheckBreak()
	}
	if yyb463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv466 := &x.ListMeta
		yym467 := z.DecBinary()
		_ = yym467
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv466) {
		} else {
			z.DecFallback(yyv466, false)
		}
	}
	yyj463++
	if yyhl463 {
		yyb463 = yyj463 > l
	} else {
		yyb463 = r.CheckBreak()
	}
	if yyb463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv468 := &x.Items
		yym469 := z.DecBinary()
		_ = yym469
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv468), d)
		}
	}
	for {
		yyj463++
		if yyhl463 {
			yyb463 = yyj463 > l
		} else {
			yyb463 = r.CheckBreak()
		}
		if yyb463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym470 := z.EncBinary()
		_ = yym470
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep471 := !z.EncBinary()
			yy2arr471 := z.EncBasicHandle().StructToArray
			var yyq471 [3]bool
			_, _, _ = yysep471, yyq471, yy2arr471
			const yyr471 bool = false
			yyq471[0] = len(x.AccessModes) != 0
			yyq471[1] = true
			yyq471[2] = x.VolumeName != ""
			var yynn471 int
			if yyr471 || yy2arr471 {
				r.EncodeArrayStart(3)
			} else {
				yynn471 = 0
				for _, b := range yyq471 {
					if b {
						yynn471++
					}
				}
				r.EncodeMapStart(yynn471)
				yynn471 = 0
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq471[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym473 := z.EncBinary()
						_ = yym473
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq471[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym474 := z.EncBinary()
						_ = yym474
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq471[1] {
					yy476 := &x.Resources
					yy476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq471[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy477 := &x.Resources
					yy477.CodecEncodeSelf(e)
				}
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq471[2] {
					yym479 := z.EncBinary()
					_ = yym479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq471[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym480 := z.EncBinary()
					_ = yym480
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr471 || yy2arr471 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv484 := &x.AccessModes
				yym485 := z.DecBinary()
				_ = yym485
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv484), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv486 := &x.Resources
				yyv486.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv489 := &x.AccessModes
		yym490 := z.DecBinary()
		_ = yym490
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv489), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv491 := &x.Resources
		yyv491.CodecDecodeSelf(d)
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym493 := z.EncBinary()
		_ = yym493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep494 := !z.EncBinary()
			yy2arr494 := z.EncBasicHandle().StructToArray
			var yyq494 [4]bool
			_, _, _ = yysep494, yyq494, yy2arr494
			const yyr494 bool = false
			yyq494[0] = x.Phase != ""
			yyq494[1] = len(x.AccessModes) != 0
			yyq494[2] = len(x.Capacity) != 0
			yyq494[3] = len(x.Conditions) != 0
			var yynn494 int
			if yyr494 || yy2arr494 {
				r.EncodeArrayStart(4)
			} else {
				yynn494 = 0
				for _, b := range yyq494 {
					if b {
						yynn494++
					}
				}
				r.EncodeMapStart(yynn494)
				yynn494 = 0
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq494[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq494[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym497 := z.EncBinary()
						_ = yym497
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq494[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym498 := z.EncBinary()
						_ = yym498
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq494[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq494[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq494[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym501 := z.EncBinary()
						_ = yym501
						if false {
						} else {
							h.encSlicePersistentVolumeClaimCondition(([]PersistentVolumeClaimCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq494[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym502 := z.EncBinary()
						_ = yym502
						if false {
						} else {
							h.encSlicePersistentVolumeClaimCondition(([]PersistentVolumeClaimCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct504 := r.ContainerType()
		if yyct504 == codecSelferValueTypeMap1234 {
			yyl504 := r.ReadMapStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl504, d)
			}
		} else if yyct504 == codecSelferValueTypeArray1234 {
			yyl504 := r.ReadArrayStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys505Slc
	var yyhl505 bool = l >= 0
	for yyj505 := 0; ; yyj505++ {
		if yyhl505 {
			if yyj505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys505Slc = r.DecodeBytes(yys505Slc, true, true)
		yys505 := string(yys505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys505 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv507 := &x.AccessModes
				yym508 := z.DecBinary()
				_ = yym508
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv507), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv509 := &x.Capacity
				yyv509.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv510 := &x.Conditions
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					h.decSlicePersistentVolumeClaimCondition((*[]PersistentVolumeClaimCondition)(yyv510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys505)
		} // end switch yys505
	} // end for yyj505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv514 := &x.AccessModes
		yym515 := z.DecBinary()
		_ = yym515
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv514), d)
		}
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv516 := &x.Capacity
		yyv516.CodecDecodeSelf(d)
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv517 := &x.Conditions
		yym518 := z.DecBinary()
		_ = yym518
		if false {
		} else {
			h.decSlicePersistentVolumeClaimCondition((*[]PersistentVolumeClaimCondition)(yyv517), d)
		}
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym523 := z.EncBinary()
	_ = yym523
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym524 := z.DecBinary()
	_ = yym524
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym525 := z.EncBinary()
	_ = yym525
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym526 := z.DecBinary()
	_ = yym526
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym527 := z.EncBinary()
		_ = yym527
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep528 := !z.EncBinary()
			yy2arr528 := z.EncBasicHandle().StructToArray
			var yyq528 [6]bool
			_, _, _ = yysep528, yyq528, yy2arr528
			const yyr528 bool = false
			yyq528[2] = true
			yyq528[3] = true
			yyq528[4] = x.Reason != ""
			yyq528[5] = x.Message != ""
			var yynn528 int
			if yyr528 || yy2arr528 {
				r.EncodeArrayStart(6)
			} else {
				yynn528 = 2
				for _, b := range yyq528 {
					if b {
						yynn528++
					}
				}
				r.EncodeMapStart(yynn528)
				yynn528 = 0
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq528[2] {
					yy532 := &x.LastProbeTime
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else if z.HasExtensions() && z.EncExt(yy532) {
					} else if yym533 {
						z.EncBinaryMarshal(yy532)
					} else if !yym533 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy532)
					} else {
						z.EncFallback(yy532)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq528[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy534 := &x.LastProbeTime
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else if z.HasExtensions() && z.EncExt(yy534) {
					} else if yym535 {
						z.EncBinaryMarshal(yy534)
					} else if !yym535 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy534)
					} else {
						z.EncFallback(yy534)
					}
				}
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq528[3] {
					yy537 := &x.LastTransitionTime
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else if z.HasExtensions() && z.EncExt(yy537) {
					} else if yym538 {
						z.EncBinaryMarshal(yy537)
					} else if !yym538 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy537)
					} else {
						z.EncFallback(yy537)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq528[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy539 := &x.LastTransitionTime
					yym540 := z.EncBinary()
					_ = yym540
					if false {
					} else if z.HasExtensions() && z.EncExt(yy539) {
					} else if yym540 {
						z.EncBinaryMarshal(yy539)
					} else if !yym540 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy539)
					} else {
						z.EncFallback(yy539)
					}
				}
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq528[4] {
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq528[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym543 := z.EncBinary()
					_ = yym543
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq528[5] {
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq528[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr528 || yy2arr528 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym547 := z.DecBinary()
	_ = yym547
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct548 := r.ContainerType()
		if yyct548 == codecSelferValueTypeMap1234 {
			yyl548 := r.ReadMapStart()
			if yyl548 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl548, d)
			}
		} else if yyct548 == codecSelferValueTypeArray1234 {
			yyl548 := r.ReadArrayStart()
			if yyl548 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl548, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys549Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys549Slc
	var yyhl549 bool = l >= 0
	for yyj549 := 0; ; yyj549++ {
		if yyhl549 {
			if yyj549 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys549Slc = r.DecodeBytes(yys549Slc, true, true)
		yys549 := string(yys549Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys549 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PersistentVolumeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv552 := &x.LastProbeTime
				yym553 := z.DecBinary()
				_ = yym553
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv552) {
				} else if yym553 {
					z.DecBinaryUnmarshal(yyv552)
				} else if !yym553 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv552)
				} else {
					z.DecFallback(yyv552, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv554 := &x.LastTransitionTime
				yym555 := z.DecBinary()
				_ = yym555
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv554) {
				} else if yym555 {
					z.DecBinaryUnmarshal(yyv554)
				} else if !yym555 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv554)
				} else {
					z.DecFallback(yyv554, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys549)
		} // end switch yys549
	} // end for yyj549
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj558 int
	var yyb558 bool
	var yyhl558 bool = l >= 0
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PersistentVolumeConditionType(r.DecodeString())
	}
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv561 := &x.LastProbeTime
		yym562 := z.DecBinary()
		_ = yym562
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv561) {
		} else if yym562 {
			z.DecBinaryUnmarshal(yyv561)
		} else if !yym562 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv561)
		} else {
			z.DecFallback(yyv561, false)
		}
	}
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv563 := &x.LastTransitionTime
		yym564 := z.DecBinary()
		_ = yym564
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv563) {
		} else if yym564 {
			z.DecBinaryUnmarshal(yyv563)
		} else if !yym564 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv563)
		} else {
			z.DecFallback(yyv563, false)
		}
	}
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj558++
	if yyhl558 {
		yyb558 = yyj558 > l
	} else {
		yyb558 = r.CheckBreak()
	}
	if yyb558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj558++
		if yyhl558 {
			yyb558 = yyj558 > l
		} else {
			yyb558 = r.CheckBreak()
		}
		if yyb558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeClaimConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym567 := z.EncBinary()
	_ = yym567
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym568 := z.DecBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeClaimCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym569 := z.EncBinary()
		_ = yym569
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep570 := !z.EncBinary()
			yy2arr570 := z.EncBasicHandle().StructToArray
			var yyq570 [6]bool
			_, _, _ = yysep570, yyq570, yy2arr570
			const yyr570 bool = false
			yyq570[2] = true
			yyq570[3] = true
			yyq570[4] = x.Reason != ""
			yyq570[5] = x.Message != ""
			var yynn570 int
			if yyr570 || yy2arr570 {
				r.EncodeArrayStart(6)
			} else {
				yynn570 = 2
				for _, b := range yyq570 {
					if b {
						yynn570++
					}
				}
				r.EncodeMapStart(yynn570)
				yynn570 = 0
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[2] {
					yy574 := &x.LastProbeTime
					yym575 := z.EncBinary()
					_ = yym575
					if false {
					} else if z.HasExtensions() && z.EncExt(yy574) {
					} else if yym575 {
						z.EncBinaryMarshal(yy574)
					} else if !yym575 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy574)
					} else {
						z.EncFallback(yy574)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq570[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy576 := &x.LastProbeTime
					yym577 := z.EncBinary()
					_ = yym577
					if false {
					} else if z.HasExtensions() && z.EncExt(yy576) {
					} else if yym577 {
						z.EncBinaryMarshal(yy576)
					} else if !yym577 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy576)
					} else {
						z.EncFallback(yy576)
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[3] {
					yy579 := &x.LastTransitionTime
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else if z.HasExtensions() && z.EncExt(yy579) {
					} else if yym580 {
						z.EncBinaryMarshal(yy579)
					} else if !yym580 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy579)
					} else {
						z.EncFallback(yy579)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq570[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy581 := &x.LastTransitionTime
					yym582 := z.EncBinary()
					_ = yym582
					if false {
					} else if z.HasExtensions() && z.EncExt(yy581) {
					} else if yym582 {
						z.EncBinaryMarshal(yy581)
					} else if !yym582 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy581)
					} else {
						z.EncFallback(yy581)
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[4] {
					yym584 := z.EncBinary()
					_ = yym584
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq570[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym585 := z.EncBinary()
					_ = yym585
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq570[5] {
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq570[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr570 || yy2arr570 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym589 := z.DecBinary()
	_ = yym589
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct590 := r.ContainerType()
		if yyct590 == codecSelferValueTypeMap1234 {
			yyl590 := r.ReadMapStart()
			if yyl590 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl590, d)
			}
		} else if yyct590 == codecSelferValueTypeArray1234 {
			yyl590 := r.ReadArrayStart()
			if yyl590 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl590, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys591Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys591Slc
	var yyhl591 bool = l >= 0
	for yyj591 := 0; ; yyj591++ {
		if yyhl591 {
			if yyj591 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys591Slc = r.DecodeBytes(yys591Slc, true, true)
		yys591 := string(yys591Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys591 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PersistentVolumeClaimConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv594 := &x.LastProbeTime
				yym595 := z.DecBinary()
				_ = yym595
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv594) {
				} else if yym595 {
					z.DecBinaryUnmarshal(yyv594)
				} else if !yym595 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv594)
				} else {
					z.DecFallback(yyv594, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv596 := &x.LastTransitionTime
				yym597 := z.DecBinary()
				_ = yym597
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv596) {
				} else if yym597 {
					z.DecBinaryUnmarshal(yyv596)
				} else if !yym597 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv596)
				} else {
					z.DecFallback(yyv596, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys591)
		} // end switch yys591
	} // end for yyj591
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj600 int
	var yyb600 bool
	var yyhl600 bool = l >= 0
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PersistentVolumeClaimConditionType(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv603 := &x.LastProbeTime
		yym604 := z.DecBinary()
		_ = yym604
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv603) {
		} else if yym604 {
			z.DecBinaryUnmarshal(yyv603)
		} else if !yym604 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv603)
		} else {
			z.DecFallback(yyv603, false)
		}
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv605 := &x.LastTransitionTime
		yym606 := z.DecBinary()
		_ = yym606
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv605) {
		} else if yym606 {
			z.DecBinaryUnmarshal(yyv605)
		} else if !yym606 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv605)
		} else {
			z.DecFallback(yyv605, false)
		}
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj600++
	if yyhl600 {
		yyb600 = yyj600 > l
	} else {
		yyb600 = r.CheckBreak()
	}
	if yyb600 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj600++
		if yyhl600 {
			yyb600 = yyj600 > l
		} else {
			yyb600 = r.CheckBreak()
		}
		if yyb600 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj600-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym609 := z.EncBinary()
		_ = yym609
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep610 := !z.EncBinary()
			yy2arr610 := z.EncBasicHandle().StructToArray
			var yyq610 [1]bool
			_, _, _ = yysep610, yyq610, yy2arr610
			const yyr610 bool = false
			var yynn610 int
			if yyr610 || yy2arr610 {
				r.EncodeArrayStart(1)
			} else {
				yynn610 = 1
				for _, b := range yyq610 {
					if b {
						yynn610++
					}
				}
				r.EncodeMapStart(yynn610)
				yynn610 = 0
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr610 || yy2arr610 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym614 := z.DecBinary()
	_ = yym614
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct615 := r.ContainerType()
		if yyct615 == codecSelferValueTypeMap1234 {
			yyl615 := r.ReadMapStart()
			if yyl615 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl615, d)
			}
		} else if yyct615 == codecSelferValueTypeArray1234 {
			yyl615 := r.ReadArrayStart()
			if yyl615 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl615, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys616Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys616Slc
	var yyhl616 bool = l >= 0
	for yyj616 := 0; ; yyj616++ {
		if yyhl616 {
			if yyj616 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys616Slc = r.DecodeBytes(yys616Slc, true, true)
		yys616 := string(yys616Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys616 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys616)
		} // end switch yys616
	} // end for yyj616
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj618 int
	var yyb618 bool
	var yyhl618 bool = l >= 0
	yyj618++
	if yyhl618 {
		yyb618 = yyj618 > l
	} else {
		yyb618 = r.CheckBreak()
	}
	if yyb618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj618++
		if yyhl618 {
			yyb618 = yyj618 > l
		} else {
			yyb618 = r.CheckBreak()
		}
		if yyb618 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj618-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym620 := z.EncBinary()
		_ = yym620
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep621 := !z.EncBinary()
			yy2arr621 := z.EncBasicHandle().StructToArray
			var yyq621 [1]bool
			_, _, _ = yysep621, yyq621, yy2arr621
			const yyr621 bool = false
			yyq621[0] = x.Medium != ""
			var yynn621 int
			if yyr621 || yy2arr621 {
				r.EncodeArrayStart(1)
			} else {
				yynn621 = 0
				for _, b := range yyq621 {
					if b {
						yynn621++
					}
				}
				r.EncodeMapStart(yynn621)
				yynn621 = 0
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq621[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq621[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr621 || yy2arr621 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym623 := z.DecBinary()
	_ = yym623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct624 := r.ContainerType()
		if yyct624 == codecSelferValueTypeMap1234 {
			yyl624 := r.ReadMapStart()
			if yyl624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl624, d)
			}
		} else if yyct624 == codecSelferValueTypeArray1234 {
			yyl624 := r.ReadArrayStart()
			if yyl624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys625Slc
	var yyhl625 bool = l >= 0
	for yyj625 := 0; ; yyj625++ {
		if yyhl625 {
			if yyj625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys625Slc = r.DecodeBytes(yys625Slc, true, true)
		yys625 := string(yys625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys625 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys625)
		} // end switch yys625
	} // end for yyj625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj627 int
	var yyb627 bool
	var yyhl627 bool = l >= 0
	yyj627++
	if yyhl627 {
		yyb627 = yyj627 > l
	} else {
		yyb627 = r.CheckBreak()
	}
	if yyb627 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj627++
		if yyhl627 {
			yyb627 = yyj627 > l
		} else {
			yyb627 = r.CheckBreak()
		}
		if yyb627 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj627-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym629 := z.EncBinary()
		_ = yym629
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep630 := !z.EncBinary()
			yy2arr630 := z.EncBasicHandle().StructToArray
			var yyq630 [3]bool
			_, _, _ = yysep630, yyq630, yy2arr630
			const yyr630 bool = false
			yyq630[2] = x.ReadOnly != false
			var yynn630 int
			if yyr630 || yy2arr630 {
				r.EncodeArrayStart(3)
			} else {
				yynn630 = 2
				for _, b := range yyq630 {
					if b {
						yynn630++
					}
				}
				r.EncodeMapStart(yynn630)
				yynn630 = 0
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym632 := z.EncBinary()
				_ = yym632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym633 := z.EncBinary()
				_ = yym633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym635 := z.EncBinary()
				_ = yym635
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym636 := z.EncBinary()
				_ = yym636
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq630[2] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq630[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr630 || yy2arr630 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym640 := z.DecBinary()
	_ = yym640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct641 := r.ContainerType()
		if yyct641 == codecSelferValueTypeMap1234 {
			yyl641 := r.ReadMapStart()
			if yyl641 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl641, d)
			}
		} else if yyct641 == codecSelferValueTypeArray1234 {
			yyl641 := r.ReadArrayStart()
			if yyl641 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys642Slc
	var yyhl642 bool = l >= 0
	for yyj642 := 0; ; yyj642++ {
		if yyhl642 {
			if yyj642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys642Slc = r.DecodeBytes(yys642Slc, true, true)
		yys642 := string(yys642Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys642 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys642)
		} // end switch yys642
	} // end for yyj642
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj646 int
	var yyb646 bool
	var yyhl646 bool = l >= 0
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj646++
	if yyhl646 {
		yyb646 = yyj646 > l
	} else {
		yyb646 = r.CheckBreak()
	}
	if yyb646 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj646++
		if yyhl646 {
			yyb646 = yyj646 > l
		} else {
			yyb646 = r.CheckBreak()
		}
		if yyb646 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj646-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym650 := z.EncBinary()
		_ = yym650
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep651 := !z.EncBinary()
			yy2arr651 := z.EncBasicHandle().StructToArray
			var yyq651 [8]bool
			_, _, _ = yysep651, yyq651, yy2arr651
			const yyr651 bool = false
			yyq651[2] = x.FSType != ""
			yyq651[7] = x.ReadOnly != false
			var yynn651 int
			if yyr651 || yy2arr651 {
				r.EncodeArrayStart(8)
			} else {
				yynn651 = 6
				for _, b := range yyq651 {
					if b {
						yynn651++
					}
				}
				r.EncodeMapStart(yynn651)
				yynn651 = 0
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym654 := z.EncBinary()
					_ = yym654
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym656 := z.EncBinary()
				_ = yym656
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym657 := z.EncBinary()
				_ = yym657
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq651[2] {
					yym659 := z.EncBinary()
					_ = yym659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq651[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym660 := z.EncBinary()
					_ = yym660
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym662 := z.EncBinary()
				_ = yym662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym665 := z.EncBinary()
				_ = yym665
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym666 := z.EncBinary()
				_ = yym666
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq651[7] {
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq651[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym673 := z.EncBinary()
					_ = yym673
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr651 || yy2arr651 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym674 := z.DecBinary()
	_ = yym674
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct675 := r.ContainerType()
		if yyct675 == codecSelferValueTypeMap1234 {
			yyl675 := r.ReadMapStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl675, d)
			}
		} else if yyct675 == codecSelferValueTypeArray1234 {
			yyl675 := r.ReadArrayStart()
			if yyl675 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl675, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys676Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys676Slc
	var yyhl676 bool = l >= 0
	for yyj676 := 0; ; yyj676++ {
		if yyhl676 {
			if yyj676 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys676Slc = r.DecodeBytes(yys676Slc, true, true)
		yys676 := string(yys676Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys676 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv677 := &x.CephMonitors
				yym678 := z.DecBinary()
				_ = yym678
				if false {
				} else {
					z.F.DecSliceStringX(yyv677, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys676)
		} // end switch yys676
	} // end for yyj676
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj686 int
	var yyb686 bool
	var yyhl686 bool = l >= 0
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv687 := &x.CephMonitors
		yym688 := z.DecBinary()
		_ = yym688
		if false {
		} else {
			z.F.DecSliceStringX(yyv687, false, d)
		}
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj686++
	if yyhl686 {
		yyb686 = yyj686 > l
	} else {
		yyb686 = r.CheckBreak()
	}
	if yyb686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj686++
		if yyhl686 {
			yyb686 = yyj686 > l
		} else {
			yyb686 = r.CheckBreak()
		}
		if yyb686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym696 := z.EncBinary()
		_ = yym696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep697 := !z.EncBinary()
			yy2arr697 := z.EncBasicHandle().StructToArray
			var yyq697 [3]bool
			_, _, _ = yysep697, yyq697, yy2arr697
			const yyr697 bool = false
			yyq697[1] = x.FSType != ""
			yyq697[2] = x.ReadOnly != false
			var yynn697 int
			if yyr697 || yy2arr697 {
				r.EncodeArrayStart(3)
			} else {
				yynn697 = 1
				for _, b := range yyq697 {
					if b {
						yynn697++
					}
				}
				r.EncodeMapStart(yynn697)
				yynn697 = 0
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym699 := z.EncBinary()
				_ = yym699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq697[1] {
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq697[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq697[2] {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym707 := z.DecBinary()
	_ = yym707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct708 := r.ContainerType()
		if yyct708 == codecSelferValueTypeMap1234 {
			yyl708 := r.ReadMapStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl708, d)
			}
		} else if yyct708 == codecSelferValueTypeArray1234 {
			yyl708 := r.ReadArrayStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys709Slc
	var yyhl709 bool = l >= 0
	for yyj709 := 0; ; yyj709++ {
		if yyhl709 {
			if yyj709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys709Slc = r.DecodeBytes(yys709Slc, true, true)
		yys709 := string(yys709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys709 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys709)
		} // end switch yys709
	} // end for yyj709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj713 int
	var yyb713 bool
	var yyhl713 bool = l >= 0
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj713++
		if yyhl713 {
			yyb713 = yyj713 > l
		} else {
			yyb713 = r.CheckBreak()
		}
		if yyb713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym717 := z.EncBinary()
		_ = yym717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep718 := !z.EncBinary()
			yy2arr718 := z.EncBasicHandle().StructToArray
			var yyq718 [6]bool
			_, _, _ = yysep718, yyq718, yy2arr718
			const yyr718 bool = false
			yyq718[1] = x.Path != ""
			yyq718[2] = x.User != ""
			yyq718[3] = x.SecretFile != ""
			yyq718[4] = x.SecretRef != nil
			yyq718[5] = x.ReadOnly != false
			var yynn718 int
			if yyr718 || yy2arr718 {
				r.EncodeArrayStart(6)
			} else {
				yynn718 = 1
				for _, b := range yyq718 {
					if b {
						yynn718++
					}
				}
				r.EncodeMapStart(yynn718)
				yynn718 = 0
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[1] {
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq718[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym724 := z.EncBinary()
					_ = yym724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[2] {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[3] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq718[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq718[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[5] {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq718[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym734 := z.EncBinary()
					_ = yym734
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym735 := z.DecBinary()
	_ = yym735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct736 := r.ContainerType()
		if yyct736 == codecSelferValueTypeMap1234 {
			yyl736 := r.ReadMapStart()
			if yyl736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl736, d)
			}
		} else if yyct736 == codecSelferValueTypeArray1234 {
			yyl736 := r.ReadArrayStart()
			if yyl736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys737Slc
	var yyhl737 bool = l >= 0
	for yyj737 := 0; ; yyj737++ {
		if yyhl737 {
			if yyj737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys737Slc = r.DecodeBytes(yys737Slc, true, true)
		yys737 := string(yys737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys737 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv738 := &x.Monitors
				yym739 := z.DecBinary()
				_ = yym739
				if false {
				} else {
					z.F.DecSliceStringX(yyv738, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys737)
		} // end switch yys737
	} // end for yyj737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj745 int
	var yyb745 bool
	var yyhl745 bool = l >= 0
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv746 := &x.Monitors
		yym747 := z.DecBinary()
		_ = yym747
		if false {
		} else {
			z.F.DecSliceStringX(yyv746, false, d)
		}
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj745++
	if yyhl745 {
		yyb745 = yyj745 > l
	} else {
		yyb745 = r.CheckBreak()
	}
	if yyb745 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj745++
		if yyhl745 {
			yyb745 = yyj745 > l
		} else {
			yyb745 = r.CheckBreak()
		}
		if yyb745 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj745-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym753 := z.EncBinary()
		_ = yym753
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep754 := !z.EncBinary()
			yy2arr754 := z.EncBasicHandle().StructToArray
			var yyq754 [1]bool
			_, _, _ = yysep754, yyq754, yy2arr754
			const yyr754 bool = false
			var yynn754 int
			if yyr754 || yy2arr754 {
				r.EncodeArrayStart(1)
			} else {
				yynn754 = 1
				for _, b := range yyq754 {
					if b {
						yynn754++
					}
				}
				r.EncodeMapStart(yynn754)
				yynn754 = 0
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym756 := z.EncBinary()
				_ = yym756
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym757 := z.EncBinary()
				_ = yym757
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr754 || yy2arr754 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym758 := z.DecBinary()
	_ = yym758
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct759 := r.ContainerType()
		if yyct759 == codecSelferValueTypeMap1234 {
			yyl759 := r.ReadMapStart()
			if yyl759 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl759, d)
			}
		} else if yyct759 == codecSelferValueTypeArray1234 {
			yyl759 := r.ReadArrayStart()
			if yyl759 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl759, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys760Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys760Slc
	var yyhl760 bool = l >= 0
	for yyj760 := 0; ; yyj760++ {
		if yyhl760 {
			if yyj760 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys760Slc = r.DecodeBytes(yys760Slc, true, true)
		yys760 := string(yys760Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys760 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys760)
		} // end switch yys760
	} // end for yyj760
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj762 int
	var yyb762 bool
	var yyhl762 bool = l >= 0
	yyj762++
	if yyhl762 {
		yyb762 = yyj762 > l
	} else {
		yyb762 = r.CheckBreak()
	}
	if yyb762 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj762++
		if yyhl762 {
			yyb762 = yyj762 > l
		} else {
			yyb762 = r.CheckBreak()
		}
		if yyb762 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj762-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym764 := z.EncBinary()
	_ = yym764
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym765 := z.DecBinary()
	_ = yym765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym766 := z.EncBinary()
	_ = yym766
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym767 := z.DecBinary()
	_ = yym767
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym768 := z.EncBinary()
		_ = yym768
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep769 := !z.EncBinary()
			yy2arr769 := z.EncBasicHandle().StructToArray
			var yyq769 [4]bool
			_, _, _ = yysep769, yyq769, yy2arr769
			const yyr769 bool = false
			yyq769[2] = x.Partition != 0
			yyq769[3] = x.ReadOnly != false
			var yynn769 int
			if yyr769 || yy2arr769 {
				r.EncodeArrayStart(4)
			} else {
				yynn769 = 2
				for _, b := range yyq769 {
					if b {
						yynn769++
					}
				}
				r.EncodeMapStart(yynn769)
				yynn769 = 0
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym771 := z.EncBinary()
				_ = yym771
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym772 := z.EncBinary()
				_ = yym772
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym774 := z.EncBinary()
				_ = yym774
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym775 := z.EncBinary()
				_ = yym775
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq769[2] {
					yym777 := z.EncBinary()
					_ = yym777
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq769[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym778 := z.EncBinary()
					_ = yym778
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq769[3] {
					yym780 := z.EncBinary()
					_ = yym780
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq769[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr769 || yy2arr769 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym782 := z.DecBinary()
	_ = yym782
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct783 := r.ContainerType()
		if yyct783 == codecSelferValueTypeMap1234 {
			yyl783 := r.ReadMapStart()
			if yyl783 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl783, d)
			}
		} else if yyct783 == codecSelferValueTypeArray1234 {
			yyl783 := r.ReadArrayStart()
			if yyl783 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl783, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys784Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys784Slc
	var yyhl784 bool = l >= 0
	for yyj784 := 0; ; yyj784++ {
		if yyhl784 {
			if yyj784 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys784Slc = r.DecodeBytes(yys784Slc, true, true)
		yys784 := string(yys784Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys784 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys784)
		} // end switch yys784
	} // end for yyj784
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj789 int
	var yyb789 bool
	var yyhl789 bool = l >= 0
	yyj789++
	if yyhl789 {
		yyb789 = yyj789 > l
	} else {
		yyb789 = r.CheckBreak()
	}
	if yyb789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj789++
	if yyhl789 {
		yyb789 = yyj789 > l
	} else {
		yyb789 = r.CheckBreak()
	}
	if yyb789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj789++
	if yyhl789 {
		yyb789 = yyj789 > l
	} else {
		yyb789 = r.CheckBreak()
	}
	if yyb789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj789++
	if yyhl789 {
		yyb789 = yyj789 > l
	} else {
		yyb789 = r.CheckBreak()
	}
	if yyb789 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj789++
		if yyhl789 {
			yyb789 = yyj789 > l
		} else {
			yyb789 = r.CheckBreak()
		}
		if yyb789 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj789-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym794 := z.EncBinary()
		_ = yym794
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep795 := !z.EncBinary()
			yy2arr795 := z.EncBasicHandle().StructToArray
			var yyq795 [5]bool
			_, _, _ = yysep795, yyq795, yy2arr795
			const yyr795 bool = false
			yyq795[1] = x.FSType != ""
			yyq795[2] = x.SecretRef != nil
			yyq795[3] = x.ReadOnly != false
			yyq795[4] = len(x.Options) != 0
			var yynn795 int
			if yyr795 || yy2arr795 {
				r.EncodeArrayStart(5)
			} else {
				yynn795 = 1
				for _, b := range yyq795 {
					if b {
						yynn795++
					}
				}
				r.EncodeMapStart(yynn795)
				yynn795 = 0
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym797 := z.EncBinary()
				_ = yym797
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym798 := z.EncBinary()
				_ = yym798
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq795[1] {
					yym800 := z.EncBinary()
					_ = yym800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq795[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym801 := z.EncBinary()
					_ = yym801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq795[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq795[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq795[3] {
					yym804 := z.EncBinary()
					_ = yym804
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq795[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym805 := z.EncBinary()
					_ = yym805
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq795[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym807 := z.EncBinary()
						_ = yym807
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq795[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym808 := z.EncBinary()
						_ = yym808
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr795 || yy2arr795 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym809 := z.DecBinary()
	_ = yym809
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct810 := r.ContainerType()
		if yyct810 == codecSelferValueTypeMap1234 {
			yyl810 := r.ReadMapStart()
			if yyl810 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl810, d)
			}
		} else if yyct810 == codecSelferValueTypeArray1234 {
			yyl810 := r.ReadArrayStart()
			if yyl810 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl810, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys811Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys811Slc
	var yyhl811 bool = l >= 0
	for yyj811 := 0; ; yyj811++ {
		if yyhl811 {
			if yyj811 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys811Slc = r.DecodeBytes(yys811Slc, true, true)
		yys811 := string(yys811Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys811 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv816 := &x.Options
				yym817 := z.DecBinary()
				_ = yym817
				if false {
				} else {
					z.F.DecMapStringStringX(yyv816, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys811)
		} // end switch yys811
	} // end for yyj811
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj818 int
	var yyb818 bool
	var yyhl818 bool = l >= 0
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj818++
	if yyhl818 {
		yyb818 = yyj818 > l
	} else {
		yyb818 = r.CheckBreak()
	}
	if yyb818 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv823 := &x.Options
		yym824 := z.DecBinary()
		_ = yym824
		if false {
		} else {
			z.F.DecMapStringStringX(yyv823, false, d)
		}
	}
	for {
		yyj818++
		if yyhl818 {
			yyb818 = yyj818 > l
		} else {
			yyb818 = r.CheckBreak()
		}
		if yyb818 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj818-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym825 := z.EncBinary()
		_ = yym825
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep826 := !z.EncBinary()
			yy2arr826 := z.EncBasicHandle().StructToArray
			var yyq826 [4]bool
			_, _, _ = yysep826, yyq826, yy2arr826
			const yyr826 bool = false
			yyq826[2] = x.Partition != 0
			yyq826[3] = x.ReadOnly != false
			var yynn826 int
			if yyr826 || yy2arr826 {
				r.EncodeArrayStart(4)
			} else {
				yynn826 = 2
				for _, b := range yyq826 {
					if b {
						yynn826++
					}
				}
				r.EncodeMapStart(yynn826)
				yynn826 = 0
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym828 := z.EncBinary()
				_ = yym828
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym829 := z.EncBinary()
				_ = yym829
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym831 := z.EncBinary()
				_ = yym831
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym832 := z.EncBinary()
				_ = yym832
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[2] {
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq826[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym835 := z.EncBinary()
					_ = yym835
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq826[3] {
					yym837 := z.EncBinary()
					_ = yym837
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq826[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr826 || yy2arr826 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym839 := z.DecBinary()
	_ = yym839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct840 := r.ContainerType()
		if yyct840 == codecSelferValueTypeMap1234 {
			yyl840 := r.ReadMapStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl840, d)
			}
		} else if yyct840 == codecSelferValueTypeArray1234 {
			yyl840 := r.ReadArrayStart()
			if yyl840 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl840, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys841Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys841Slc
	var yyhl841 bool = l >= 0
	for yyj841 := 0; ; yyj841++ {
		if yyhl841 {
			if yyj841 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys841Slc = r.DecodeBytes(yys841Slc, true, true)
		yys841 := string(yys841Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys841 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys841)
		} // end switch yys841
	} // end for yyj841
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj846 int
	var yyb846 bool
	var yyhl846 bool = l >= 0
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj846++
	if yyhl846 {
		yyb846 = yyj846 > l
	} else {
		yyb846 = r.CheckBreak()
	}
	if yyb846 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj846++
		if yyhl846 {
			yyb846 = yyj846 > l
		} else {
			yyb846 = r.CheckBreak()
		}
		if yyb846 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj846-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym851 := z.EncBinary()
		_ = yym851
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep852 := !z.EncBinary()
			yy2arr852 := z.EncBasicHandle().StructToArray
			var yyq852 [3]bool
			_, _, _ = yysep852, yyq852, yy2arr852
			const yyr852 bool = false
			yyq852[1] = x.Revision != ""
			yyq852[2] = x.Directory != ""
			var yynn852 int
			if yyr852 || yy2arr852 {
				r.EncodeArrayStart(3)
			} else {
				yynn852 = 1
				for _, b := range yyq852 {
					if b {
						yynn852++
					}
				}
				r.EncodeMapStart(yynn852)
				yynn852 = 0
			}
			if yyr852 || yy2arr852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym854 := z.EncBinary()
				_ = yym854
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr852 || yy2arr852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq852[1] {
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq852[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr852 || yy2arr852 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq852[2] {
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq852[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr852 || yy2arr852 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym862 := z.DecBinary()
	_ = yym862
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct863 := r.ContainerType()
		if yyct863 == codecSelferValueTypeMap1234 {
			yyl863 := r.ReadMapStart()
			if yyl863 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl863, d)
			}
		} else if yyct863 == codecSelferValueTypeArray1234 {
			yyl863 := r.ReadArrayStart()
			if yyl863 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl863, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys864Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys864Slc
	var yyhl864 bool = l >= 0
	for yyj864 := 0; ; yyj864++ {
		if yyhl864 {
			if yyj864 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys864Slc = r.DecodeBytes(yys864Slc, true, true)
		yys864 := string(yys864Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys864 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys864)
		} // end switch yys864
	} // end for yyj864
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj868 int
	var yyb868 bool
	var yyhl868 bool = l >= 0
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj868++
	if yyhl868 {
		yyb868 = yyj868 > l
	} else {
		yyb868 = r.CheckBreak()
	}
	if yyb868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj868++
		if yyhl868 {
			yyb868 = yyj868 > l
		} else {
			yyb868 = r.CheckBreak()
		}
		if yyb868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym872 := z.EncBinary()
		_ = yym872
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep873 := !z.EncBinary()
			yy2arr873 := z.EncBasicHandle().StructToArray
			var yyq873 [1]bool
			_, _, _ = yysep873, yyq873, yy2arr873
			const yyr873 bool = false
			yyq873[0] = x.SecretName != ""
			var yynn873 int
			if yyr873 || yy2arr873 {
				r.EncodeArrayStart(1)
			} else {
				yynn873 = 0
				for _, b := range yyq873 {
					if b {
						yynn873++
					}
				}
				r.EncodeMapStart(yynn873)
				yynn873 = 0
			}
			if yyr873 || yy2arr873 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq873[0] {
					yym875 := z.EncBinary()
					_ = yym875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq873[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr873 || yy2arr873 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym877 := z.DecBinary()
	_ = yym877
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct878 := r.ContainerType()
		if yyct878 == codecSelferValueTypeMap1234 {
			yyl878 := r.ReadMapStart()
			if yyl878 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl878, d)
			}
		} else if yyct878 == codecSelferValueTypeArray1234 {
			yyl878 := r.ReadArrayStart()
			if yyl878 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl878, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys879Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys879Slc
	var yyhl879 bool = l >= 0
	for yyj879 := 0; ; yyj879++ {
		if yyhl879 {
			if yyj879 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys879Slc = r.DecodeBytes(yys879Slc, true, true)
		yys879 := string(yys879Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys879 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys879)
		} // end switch yys879
	} // end for yyj879
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj881 int
	var yyb881 bool
	var yyhl881 bool = l >= 0
	yyj881++
	if yyhl881 {
		yyb881 = yyj881 > l
	} else {
		yyb881 = r.CheckBreak()
	}
	if yyb881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj881++
		if yyhl881 {
			yyb881 = yyj881 > l
		} else {
			yyb881 = r.CheckBreak()
		}
		if yyb881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym883 := z.EncBinary()
		_ = yym883
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep884 := !z.EncBinary()
			yy2arr884 := z.EncBasicHandle().StructToArray
			var yyq884 [3]bool
			_, _, _ = yysep884, yyq884, yy2arr884
			const yyr884 bool = false
			yyq884[2] = x.ReadOnly != false
			var yynn884 int
			if yyr884 || yy2arr884 {
				r.EncodeArrayStart(3)
			} else {
				yynn884 = 2
				for _, b := range yyq884 {
					if b {
						yynn884++
					}
				}
				r.EncodeMapStart(yynn884)
				yynn884 = 0
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym886 := z.EncBinary()
				_ = yym886
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym889 := z.EncBinary()
				_ = yym889
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym890 := z.EncBinary()
				_ = yym890
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq884[2] {
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq884[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr884 || yy2arr884 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym894 := z.DecBinary()
	_ = yym894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct895 := r.ContainerType()
		if yyct895 == codecSelferValueTypeMap1234 {
			yyl895 := r.ReadMapStart()
			if yyl895 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl895, d)
			}
		} else if yyct895 == codecSelferValueTypeArray1234 {
			yyl895 := r.ReadArrayStart()
			if yyl895 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys896Slc
	var yyhl896 bool = l >= 0
	for yyj896 := 0; ; yyj896++ {
		if yyhl896 {
			if yyj896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys896Slc = r.DecodeBytes(yys896Slc, true, true)
		yys896 := string(yys896Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys896 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys896)
		} // end switch yys896
	} // end for yyj896
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj900 int
	var yyb900 bool
	var yyhl900 bool = l >= 0
	yyj900++
	if yyhl900 {
		yyb900 = yyj900 > l
	} else {
		yyb900 = r.CheckBreak()
	}
	if yyb900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj900++
	if yyhl900 {
		yyb900 = yyj900 > l
	} else {
		yyb900 = r.CheckBreak()
	}
	if yyb900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj900++
	if yyhl900 {
		yyb900 = yyj900 > l
	} else {
		yyb900 = r.CheckBreak()
	}
	if yyb900 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj900++
		if yyhl900 {
			yyb900 = yyj900 > l
		} else {
			yyb900 = r.CheckBreak()
		}
		if yyb900 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj900-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym904 := z.EncBinary()
		_ = yym904
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep905 := !z.EncBinary()
			yy2arr905 := z.EncBasicHandle().StructToArray
			var yyq905 [6]bool
			_, _, _ = yysep905, yyq905, yy2arr905
			const yyr905 bool = false
			yyq905[3] = x.ISCSIInterface != ""
			yyq905[5] = x.ReadOnly != false
			var yynn905 int
			if yyr905 || yy2arr905 {
				r.EncodeArrayStart(6)
			} else {
				yynn905 = 4
				for _, b := range yyq905 {
					if b {
						yynn905++
					}
				}
				r.EncodeMapStart(yynn905)
				yynn905 = 0
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym907 := z.EncBinary()
				_ = yym907
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym910 := z.EncBinary()
				_ = yym910
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym911 := z.EncBinary()
				_ = yym911
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym913 := z.EncBinary()
				_ = yym913
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym914 := z.EncBinary()
				_ = yym914
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq905[3] {
					yym916 := z.EncBinary()
					_ = yym916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq905[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym920 := z.EncBinary()
				_ = yym920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq905[5] {
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq905[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr905 || yy2arr905 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym924 := z.DecBinary()
	_ = yym924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct925 := r.ContainerType()
		if yyct925 == codecSelferValueTypeMap1234 {
			yyl925 := r.ReadMapStart()
			if yyl925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl925, d)
			}
		} else if yyct925 == codecSelferValueTypeArray1234 {
			yyl925 := r.ReadArrayStart()
			if yyl925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys926Slc
	var yyhl926 bool = l >= 0
	for yyj926 := 0; ; yyj926++ {
		if yyhl926 {
			if yyj926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys926Slc = r.DecodeBytes(yys926Slc, true, true)
		yys926 := string(yys926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys926 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys926)
		} // end switch yys926
	} // end for yyj926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj933 int
	var yyb933 bool
	var yyhl933 bool = l >= 0
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj933++
		if yyhl933 {
			yyb933 = yyj933 > l
		} else {
			yyb933 = r.CheckBreak()
		}
		if yyb933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym940 := z.EncBinary()
		_ = yym940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep941 := !z.EncBinary()
			yy2arr941 := z.EncBasicHandle().StructToArray
			var yyq941 [4]bool
			_, _, _ = yysep941, yyq941, yy2arr941
			const yyr941 bool = false
			yyq941[3] = x.ReadOnly != false
			var yynn941 int
			if yyr941 || yy2arr941 {
				r.EncodeArrayStart(4)
			} else {
				yynn941 = 3
				for _, b := range yyq941 {
					if b {
						yynn941++
					}
				}
				r.EncodeMapStart(yynn941)
				yynn941 = 0
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy946 := *x.Lun
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeInt(int64(yy946))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy948 := *x.Lun
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeInt(int64(yy948))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym951 := z.EncBinary()
				_ = yym951
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym952 := z.EncBinary()
				_ = yym952
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq941[3] {
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq941[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr941 || yy2arr941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym956 := z.DecBinary()
	_ = yym956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct957 := r.ContainerType()
		if yyct957 == codecSelferValueTypeMap1234 {
			yyl957 := r.ReadMapStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl957, d)
			}
		} else if yyct957 == codecSelferValueTypeArray1234 {
			yyl957 := r.ReadArrayStart()
			if yyl957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys958Slc
	var yyhl958 bool = l >= 0
	for yyj958 := 0; ; yyj958++ {
		if yyhl958 {
			if yyj958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys958Slc = r.DecodeBytes(yys958Slc, true, true)
		yys958 := string(yys958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys958 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv959 := &x.TargetWWNs
				yym960 := z.DecBinary()
				_ = yym960
				if false {
				} else {
					z.F.DecSliceStringX(yyv959, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym962 := z.DecBinary()
				_ = yym962
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys958)
		} // end switch yys958
	} // end for yyj958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv966 := &x.TargetWWNs
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym972 := z.EncBinary()
		_ = yym972
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep973 := !z.EncBinary()
			yy2arr973 := z.EncBasicHandle().StructToArray
			var yyq973 [5]bool
			_, _, _ = yysep973, yyq973, yy2arr973
			const yyr973 bool = false
			yyq973[0] = x.Name != ""
			yyq973[1] = x.HostPort != 0
			yyq973[3] = x.Protocol != ""
			yyq973[4] = x.HostIP != ""
			var yynn973 int
			if yyr973 || yy2arr973 {
				r.EncodeArrayStart(5)
			} else {
				yynn973 = 1
				for _, b := range yyq973 {
					if b {
						yynn973++
					}
				}
				r.EncodeMapStart(yynn973)
				yynn973 = 0
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[0] {
					yym975 := z.EncBinary()
					_ = yym975
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq973[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym976 := z.EncBinary()
					_ = yym976
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[1] {
					yym978 := z.EncBinary()
					_ = yym978
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq973[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym979 := z.EncBinary()
					_ = yym979
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym981 := z.EncBinary()
				_ = yym981
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym982 := z.EncBinary()
				_ = yym982
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq973[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq973[4] {
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq973[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym986 := z.EncBinary()
					_ = yym986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr973 || yy2arr973 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym987 := z.DecBinary()
	_ = yym987
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct988 := r.ContainerType()
		if yyct988 == codecSelferValueTypeMap1234 {
			yyl988 := r.ReadMapStart()
			if yyl988 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl988, d)
			}
		} else if yyct988 == codecSelferValueTypeArray1234 {
			yyl988 := r.ReadArrayStart()
			if yyl988 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl988, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys989Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys989Slc
	var yyhl989 bool = l >= 0
	for yyj989 := 0; ; yyj989++ {
		if yyhl989 {
			if yyj989 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys989Slc = r.DecodeBytes(yys989Slc, true, true)
		yys989 := string(yys989Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys989 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys989)
		} // end switch yys989
	} // end for yyj989
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj995 int
	var yyb995 bool
	var yyhl995 bool = l >= 0
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj995++
	if yyhl995 {
		yyb995 = yyj995 > l
	} else {
		yyb995 = r.CheckBreak()
	}
	if yyb995 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj995++
		if yyhl995 {
			yyb995 = yyj995 > l
		} else {
			yyb995 = r.CheckBreak()
		}
		if yyb995 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj995-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1001 := z.EncBinary()
		_ = yym1001
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1002 := !z.EncBinary()
			yy2arr1002 := z.EncBasicHandle().StructToArray
			var yyq1002 [3]bool
			_, _, _ = yysep1002, yyq1002, yy2arr1002
			const yyr1002 bool = false
			yyq1002[1] = x.ReadOnly != false
			var yynn1002 int
			if yyr1002 || yy2arr1002 {
				r.EncodeArrayStart(3)
			} else {
				yynn1002 = 2
				for _, b := range yyq1002 {
					if b {
						yynn1002++
					}
				}
				r.EncodeMapStart(yynn1002)
				yynn1002 = 0
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1004 := z.EncBinary()
				_ = yym1004
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1005 := z.EncBinary()
				_ = yym1005
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1002[1] {
					yym1007 := z.EncBinary()
					_ = yym1007
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1002[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1010 := z.EncBinary()
				_ = yym1010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1011 := z.EncBinary()
				_ = yym1011
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1002 || yy2arr1002 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1012 := z.DecBinary()
	_ = yym1012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1013 := r.ContainerType()
		if yyct1013 == codecSelferValueTypeMap1234 {
			yyl1013 := r.ReadMapStart()
			if yyl1013 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1013, d)
			}
		} else if yyct1013 == codecSelferValueTypeArray1234 {
			yyl1013 := r.ReadArrayStart()
			if yyl1013 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1014Slc
	var yyhl1014 bool = l >= 0
	for yyj1014 := 0; ; yyj1014++ {
		if yyhl1014 {
			if yyj1014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1014Slc = r.DecodeBytes(yys1014Slc, true, true)
		yys1014 := string(yys1014Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1014 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1014)
		} // end switch yys1014
	} // end for yyj1014
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1018 int
	var yyb1018 bool
	var yyhl1018 bool = l >= 0
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1018++
	if yyhl1018 {
		yyb1018 = yyj1018 > l
	} else {
		yyb1018 = r.CheckBreak()
	}
	if yyb1018 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj1018++
		if yyhl1018 {
			yyb1018 = yyj1018 > l
		} else {
			yyb1018 = r.CheckBreak()
		}
		if yyb1018 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1018-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1022 := z.EncBinary()
		_ = yym1022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1023 := !z.EncBinary()
			yy2arr1023 := z.EncBasicHandle().StructToArray
			var yyq1023 [3]bool
			_, _, _ = yysep1023, yyq1023, yy2arr1023
			const yyr1023 bool = false
			yyq1023[1] = x.Value != ""
			yyq1023[2] = x.ValueFrom != nil
			var yynn1023 int
			if yyr1023 || yy2arr1023 {
				r.EncodeArrayStart(3)
			} else {
				yynn1023 = 1
				for _, b := range yyq1023 {
					if b {
						yynn1023++
					}
				}
				r.EncodeMapStart(yynn1023)
				yynn1023 = 0
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1025 := z.EncBinary()
				_ = yym1025
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1026 := z.EncBinary()
				_ = yym1026
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[1] {
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1023[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1023 || yy2arr1023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1031 := z.DecBinary()
	_ = yym1031
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1032 := r.ContainerType()
		if yyct1032 == codecSelferValueTypeMap1234 {
			yyl1032 := r.ReadMapStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1032, d)
			}
		} else if yyct1032 == codecSelferValueTypeArray1234 {
			yyl1032 := r.ReadArrayStart()
			if yyl1032 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1032, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1033Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1033Slc
	var yyhl1033 bool = l >= 0
	for yyj1033 := 0; ; yyj1033++ {
		if yyhl1033 {
			if yyj1033 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1033Slc = r.DecodeBytes(yys1033Slc, true, true)
		yys1033 := string(yys1033Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1033 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1033)
		} // end switch yys1033
	} // end for yyj1033
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1037 int
	var yyb1037 bool
	var yyhl1037 bool = l >= 0
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1037++
	if yyhl1037 {
		yyb1037 = yyj1037 > l
	} else {
		yyb1037 = r.CheckBreak()
	}
	if yyb1037 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1037++
		if yyhl1037 {
			yyb1037 = yyj1037 > l
		} else {
			yyb1037 = r.CheckBreak()
		}
		if yyb1037 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1037-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1041 := z.EncBinary()
		_ = yym1041
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1042 := !z.EncBinary()
			yy2arr1042 := z.EncBasicHandle().StructToArray
			var yyq1042 [3]bool
			_, _, _ = yysep1042, yyq1042, yy2arr1042
			const yyr1042 bool = false
			yyq1042[0] = x.FieldRef != nil
			yyq1042[1] = x.ConfigMapKeyRef != nil
			yyq1042[2] = x.SecretKeyRef != nil
			var yynn1042 int
			if yyr1042 || yy2arr1042 {
				r.EncodeArrayStart(3)
			} else {
				yynn1042 = 0
				for _, b := range yyq1042 {
					if b {
						yynn1042++
					}
				}
				r.EncodeMapStart(yynn1042)
				yynn1042 = 0
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1042[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1042[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1042[1] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1042[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1042[2] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1042[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1042 || yy2arr1042 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1046 := z.DecBinary()
	_ = yym1046
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1047 := r.ContainerType()
		if yyct1047 == codecSelferValueTypeMap1234 {
			yyl1047 := r.ReadMapStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1047, d)
			}
		} else if yyct1047 == codecSelferValueTypeArray1234 {
			yyl1047 := r.ReadArrayStart()
			if yyl1047 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1047, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1048Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1048Slc
	var yyhl1048 bool = l >= 0
	for yyj1048 := 0; ; yyj1048++ {
		if yyhl1048 {
			if yyj1048 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1048Slc = r.DecodeBytes(yys1048Slc, true, true)
		yys1048 := string(yys1048Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1048 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1048)
		} // end switch yys1048
	} // end for yyj1048
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1052 int
	var yyb1052 bool
	var yyhl1052 bool = l >= 0
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1052++
	if yyhl1052 {
		yyb1052 = yyj1052 > l
	} else {
		yyb1052 = r.CheckBreak()
	}
	if yyb1052 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1052++
		if yyhl1052 {
			yyb1052 = yyj1052 > l
		} else {
			yyb1052 = r.CheckBreak()
		}
		if yyb1052 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1052-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1056 := z.EncBinary()
		_ = yym1056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1057 := !z.EncBinary()
			yy2arr1057 := z.EncBasicHandle().StructToArray
			var yyq1057 [2]bool
			_, _, _ = yysep1057, yyq1057, yy2arr1057
			const yyr1057 bool = false
			yyq1057[0] = x.APIVersion != ""
			var yynn1057 int
			if yyr1057 || yy2arr1057 {
				r.EncodeArrayStart(2)
			} else {
				yynn1057 = 1
				for _, b := range yyq1057 {
					if b {
						yynn1057++
					}
				}
				r.EncodeMapStart(yynn1057)
				yynn1057 = 0
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1057[0] {
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1057[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1062 := z.EncBinary()
				_ = yym1062
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1063 := z.EncBinary()
				_ = yym1063
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1057 || yy2arr1057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1064 := z.DecBinary()
	_ = yym1064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1065 := r.ContainerType()
		if yyct1065 == codecSelferValueTypeMap1234 {
			yyl1065 := r.ReadMapStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1065, d)
			}
		} else if yyct1065 == codecSelferValueTypeArray1234 {
			yyl1065 := r.ReadArrayStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1066Slc
	var yyhl1066 bool = l >= 0
	for yyj1066 := 0; ; yyj1066++ {
		if yyhl1066 {
			if yyj1066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1066Slc = r.DecodeBytes(yys1066Slc, true, true)
		yys1066 := string(yys1066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1066 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1066)
		} // end switch yys1066
	} // end for yyj1066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1069 int
	var yyb1069 bool
	var yyhl1069 bool = l >= 0
	yyj1069++
	if yyhl1069 {
		yyb1069 = yyj1069 > l
	} else {
		yyb1069 = r.CheckBreak()
	}
	if yyb1069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1069++
	if yyhl1069 {
		yyb1069 = yyj1069 > l
	} else {
		yyb1069 = r.CheckBreak()
	}
	if yyb1069 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1069++
		if yyhl1069 {
			yyb1069 = yyj1069 > l
		} else {
			yyb1069 = r.CheckBreak()
		}
		if yyb1069 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1069-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1072 := z.EncBinary()
		_ = yym1072
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1073 := !z.EncBinary()
			yy2arr1073 := z.EncBasicHandle().StructToArray
			var yyq1073 [2]bool
			_, _, _ = yysep1073, yyq1073, yy2arr1073
			const yyr1073 bool = false
			yyq1073[0] = x.Name != ""
			var yynn1073 int
			if yyr1073 || yy2arr1073 {
				r.EncodeArrayStart(2)
			} else {
				yynn1073 = 1
				for _, b := range yyq1073 {
					if b {
						yynn1073++
					}
				}
				r.EncodeMapStart(yynn1073)
				yynn1073 = 0
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1073[0] {
					yym1075 := z.EncBinary()
					_ = yym1075
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1073[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1076 := z.EncBinary()
					_ = yym1076
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1078 := z.EncBinary()
				_ = yym1078
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1079 := z.EncBinary()
				_ = yym1079
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1073 || yy2arr1073 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1080 := z.DecBinary()
	_ = yym1080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1081 := r.ContainerType()
		if yyct1081 == codecSelferValueTypeMap1234 {
			yyl1081 := r.ReadMapStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1081, d)
			}
		} else if yyct1081 == codecSelferValueTypeArray1234 {
			yyl1081 := r.ReadArrayStart()
			if yyl1081 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1081, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1082Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1082Slc
	var yyhl1082 bool = l >= 0
	for yyj1082 := 0; ; yyj1082++ {
		if yyhl1082 {
			if yyj1082 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1082Slc = r.DecodeBytes(yys1082Slc, true, true)
		yys1082 := string(yys1082Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1082 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1082)
		} // end switch yys1082
	} // end for yyj1082
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1088 := z.EncBinary()
		_ = yym1088
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1089 := !z.EncBinary()
			yy2arr1089 := z.EncBasicHandle().StructToArray
			var yyq1089 [2]bool
			_, _, _ = yysep1089, yyq1089, yy2arr1089
			const yyr1089 bool = false
			yyq1089[0] = x.Name != ""
			var yynn1089 int
			if yyr1089 || yy2arr1089 {
				r.EncodeArrayStart(2)
			} else {
				yynn1089 = 1
				for _, b := range yyq1089 {
					if b {
						yynn1089++
					}
				}
				r.EncodeMapStart(yynn1089)
				yynn1089 = 0
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1089[0] {
					yym1091 := z.EncBinary()
					_ = yym1091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1089[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1094 := z.EncBinary()
				_ = yym1094
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1095 := z.EncBinary()
				_ = yym1095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1089 || yy2arr1089 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1096 := z.DecBinary()
	_ = yym1096
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1097 := r.ContainerType()
		if yyct1097 == codecSelferValueTypeMap1234 {
			yyl1097 := r.ReadMapStart()
			if yyl1097 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1097, d)
			}
		} else if yyct1097 == codecSelferValueTypeArray1234 {
			yyl1097 := r.ReadArrayStart()
			if yyl1097 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1097, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1098Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1098Slc
	var yyhl1098 bool = l >= 0
	for yyj1098 := 0; ; yyj1098++ {
		if yyhl1098 {
			if yyj1098 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1098Slc = r.DecodeBytes(yys1098Slc, true, true)
		yys1098 := string(yys1098Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1098 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1098)
		} // end switch yys1098
	} // end for yyj1098
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1104 := z.EncBinary()
		_ = yym1104
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1105 := !z.EncBinary()
			yy2arr1105 := z.EncBasicHandle().StructToArray
			var yyq1105 [2]bool
			_, _, _ = yysep1105, yyq1105, yy2arr1105
			const yyr1105 bool = false
			var yynn1105 int
			if yyr1105 || yy2arr1105 {
				r.EncodeArrayStart(2)
			} else {
				yynn1105 = 2
				for _, b := range yyq1105 {
					if b {
						yynn1105++
					}
				}
				r.EncodeMapStart(yynn1105)
				yynn1105 = 0
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1107 := z.EncBinary()
				_ = yym1107
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1108 := z.EncBinary()
				_ = yym1108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1110 := z.EncBinary()
				_ = yym1110
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1111 := z.EncBinary()
				_ = yym1111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1105 || yy2arr1105 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1112 := z.DecBinary()
	_ = yym1112
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1113 := r.ContainerType()
		if yyct1113 == codecSelferValueTypeMap1234 {
			yyl1113 := r.ReadMapStart()
			if yyl1113 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1113, d)
			}
		} else if yyct1113 == codecSelferValueTypeArray1234 {
			yyl1113 := r.ReadArrayStart()
			if yyl1113 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1113, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1114Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1114Slc
	var yyhl1114 bool = l >= 0
	for yyj1114 := 0; ; yyj1114++ {
		if yyhl1114 {
			if yyj1114 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1114Slc = r.DecodeBytes(yys1114Slc, true, true)
		yys1114 := string(yys1114Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1114 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1114)
		} // end switch yys1114
	} // end for yyj1114
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1117 int
	var yyb1117 bool
	var yyhl1117 bool = l >= 0
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1117++
	if yyhl1117 {
		yyb1117 = yyj1117 > l
	} else {
		yyb1117 = r.CheckBreak()
	}
	if yyb1117 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1117++
		if yyhl1117 {
			yyb1117 = yyj1117 > l
		} else {
			yyb1117 = r.CheckBreak()
		}
		if yyb1117 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1117-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1120 := z.EncBinary()
		_ = yym1120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1121 := !z.EncBinary()
			yy2arr1121 := z.EncBasicHandle().StructToArray
			var yyq1121 [5]bool
			_, _, _ = yysep1121, yyq1121, yy2arr1121
			const yyr1121 bool = false
			yyq1121[0] = x.Path != ""
			yyq1121[2] = x.Host != ""
			yyq1121[3] = x.Scheme != ""
			yyq1121[4] = len(x.HTTPHeaders) != 0
			var yynn1121 int
			if yyr1121 || yy2arr1121 {
				r.EncodeArrayStart(5)
			} else {
				yynn1121 = 1
				for _, b := range yyq1121 {
					if b {
						yynn1121++
					}
				}
				r.EncodeMapStart(yynn1121)
				yynn1121 = 0
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[0] {
					yym1123 := z.EncBinary()
					_ = yym1123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1121[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1126 := &x.Port
				yym1127 := z.EncBinary()
				_ = yym1127
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1126) {
				} else if !yym1127 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1126)
				} else {
					z.EncFallback(yy1126)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1128 := &x.Port
				yym1129 := z.EncBinary()
				_ = yym1129
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1128) {
				} else if !yym1129 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1128)
				} else {
					z.EncFallback(yy1128)
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[2] {
					yym1131 := z.EncBinary()
					_ = yym1131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1121[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1132 := z.EncBinary()
					_ = yym1132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1121[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1121[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1135 := z.EncBinary()
						_ = yym1135
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1121[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1136 := z.EncBinary()
						_ = yym1136
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1121 || yy2arr1121 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1137 := z.DecBinary()
	_ = yym1137
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1138 := r.ContainerType()
		if yyct1138 == codecSelferValueTypeMap1234 {
			yyl1138 := r.ReadMapStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1138, d)
			}
		} else if yyct1138 == codecSelferValueTypeArray1234 {
			yyl1138 := r.ReadArrayStart()
			if yyl1138 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1138, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1139Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1139Slc
	var yyhl1139 bool = l >= 0
	for yyj1139 := 0; ; yyj1139++ {
		if yyhl1139 {
			if yyj1139 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1139Slc = r.DecodeBytes(yys1139Slc, true, true)
		yys1139 := string(yys1139Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1139 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1141 := &x.Port
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1141) {
				} else if !yym1142 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1141)
				} else {
					z.DecFallback(yyv1141, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1145 := &x.HTTPHeaders
				yym1146 := z.DecBinary()
				_ = yym1146
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1145), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1139)
		} // end switch yys1139
	} // end for yyj1139
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1147 int
	var yyb1147 bool
	var yyhl1147 bool = l >= 0
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1149 := &x.Port
		yym1150 := z.DecBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1149) {
		} else if !yym1150 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1149)
		} else {
			z.DecFallback(yyv1149, false)
		}
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1147++
	if yyhl1147 {
		yyb1147 = yyj1147 > l
	} else {
		yyb1147 = r.CheckBreak()
	}
	if yyb1147 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1153 := &x.HTTPHeaders
		yym1154 := z.DecBinary()
		_ = yym1154
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1153), d)
		}
	}
	for {
		yyj1147++
		if yyhl1147 {
			yyb1147 = yyj1147 > l
		} else {
			yyb1147 = r.CheckBreak()
		}
		if yyb1147 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1147-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1155 := z.EncBinary()
	_ = yym1155
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1156 := z.DecBinary()
	_ = yym1156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1157 := z.EncBinary()
		_ = yym1157
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1158 := !z.EncBinary()
			yy2arr1158 := z.EncBasicHandle().StructToArray
			var yyq1158 [1]bool
			_, _, _ = yysep1158, yyq1158, yy2arr1158
			const yyr1158 bool = false
			var yynn1158 int
			if yyr1158 || yy2arr1158 {
				r.EncodeArrayStart(1)
			} else {
				yynn1158 = 1
				for _, b := range yyq1158 {
					if b {
						yynn1158++
					}
				}
				r.EncodeMapStart(yynn1158)
				yynn1158 = 0
			}
			if yyr1158 || yy2arr1158 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1160 := &x.Port
				yym1161 := z.EncBinary()
				_ = yym1161
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1160) {
				} else if !yym1161 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1160)
				} else {
					z.EncFallback(yy1160)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1162 := &x.Port
				yym1163 := z.EncBinary()
				_ = yym1163
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1162) {
				} else if !yym1163 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1162)
				} else {
					z.EncFallback(yy1162)
				}
			}
			if yyr1158 || yy2arr1158 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1164 := z.DecBinary()
	_ = yym1164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1165 := r.ContainerType()
		if yyct1165 == codecSelferValueTypeMap1234 {
			yyl1165 := r.ReadMapStart()
			if yyl1165 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1165, d)
			}
		} else if yyct1165 == codecSelferValueTypeArray1234 {
			yyl1165 := r.ReadArrayStart()
			if yyl1165 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1166Slc
	var yyhl1166 bool = l >= 0
	for yyj1166 := 0; ; yyj1166++ {
		if yyhl1166 {
			if yyj1166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1166Slc = r.DecodeBytes(yys1166Slc, true, true)
		yys1166 := string(yys1166Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1166 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1167 := &x.Port
				yym1168 := z.DecBinary()
				_ = yym1168
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1167) {
				} else if !yym1168 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1167)
				} else {
					z.DecFallback(yyv1167, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1166)
		} // end switch yys1166
	} // end for yyj1166
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1169 int
	var yyb1169 bool
	var yyhl1169 bool = l >= 0
	yyj1169++
	if yyhl1169 {
		yyb1169 = yyj1169 > l
	} else {
		yyb1169 = r.CheckBreak()
	}
	if yyb1169 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1170 := &x.Port
		yym1171 := z.DecBinary()
		_ = yym1171
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1170) {
		} else if !yym1171 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1170)
		} else {
			z.DecFallback(yyv1170, false)
		}
	}
	for {
		yyj1169++
		if yyhl1169 {
			yyb1169 = yyj1169 > l
		} else {
			yyb1169 = r.CheckBreak()
		}
		if yyb1169 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1169-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1172 := z.EncBinary()
		_ = yym1172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1173 := !z.EncBinary()
			yy2arr1173 := z.EncBasicHandle().StructToArray
			var yyq1173 [1]bool
			_, _, _ = yysep1173, yyq1173, yy2arr1173
			const yyr1173 bool = false
			yyq1173[0] = len(x.Command) != 0
			var yynn1173 int
			if yyr1173 || yy2arr1173 {
				r.EncodeArrayStart(1)
			} else {
				yynn1173 = 0
				for _, b := range yyq1173 {
					if b {
						yynn1173++
					}
				}
				r.EncodeMapStart(yynn1173)
				yynn1173 = 0
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1173[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1175 := z.EncBinary()
						_ = yym1175
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1176 := z.EncBinary()
						_ = yym1176
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1173 || yy2arr1173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1177 := z.DecBinary()
	_ = yym1177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1178 := r.ContainerType()
		if yyct1178 == codecSelferValueTypeMap1234 {
			yyl1178 := r.ReadMapStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1178, d)
			}
		} else if yyct1178 == codecSelferValueTypeArray1234 {
			yyl1178 := r.ReadArrayStart()
			if yyl1178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1179Slc
	var yyhl1179 bool = l >= 0
	for yyj1179 := 0; ; yyj1179++ {
		if yyhl1179 {
			if yyj1179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1179Slc = r.DecodeBytes(yys1179Slc, true, true)
		yys1179 := string(yys1179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1179 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1180 := &x.Command
				yym1181 := z.DecBinary()
				_ = yym1181
				if false {
				} else {
					z.F.DecSliceStringX(yyv1180, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1179)
		} // end switch yys1179
	} // end for yyj1179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1182 int
	var yyb1182 bool
	var yyhl1182 bool = l >= 0
	yyj1182++
	if yyhl1182 {
		yyb1182 = yyj1182 > l
	} else {
		yyb1182 = r.CheckBreak()
	}
	if yyb1182 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1183 := &x.Command
		yym1184 := z.DecBinary()
		_ = yym1184
		if false {
		} else {
			z.F.DecSliceStringX(yyv1183, false, d)
		}
	}
	for {
		yyj1182++
		if yyhl1182 {
			yyb1182 = yyj1182 > l
		} else {
			yyb1182 = r.CheckBreak()
		}
		if yyb1182 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1182-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1185 := z.EncBinary()
		_ = yym1185
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1186 := !z.EncBinary()
			yy2arr1186 := z.EncBasicHandle().StructToArray
			var yyq1186 [8]bool
			_, _, _ = yysep1186, yyq1186, yy2arr1186
			const yyr1186 bool = false
			yyq1186[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1186[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1186[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1186[3] = x.InitialDelaySeconds != 0
			yyq1186[4] = x.TimeoutSeconds != 0
			yyq1186[5] = x.PeriodSeconds != 0
			yyq1186[6] = x.SuccessThreshold != 0
			yyq1186[7] = x.FailureThreshold != 0
			var yynn1186 int
			if yyr1186 || yy2arr1186 {
				r.EncodeArrayStart(8)
			} else {
				yynn1186 = 0
				for _, b := range yyq1186 {
					if b {
						yynn1186++
					}
				}
				r.EncodeMapStart(yynn1186)
				yynn1186 = 0
			}
			var yyn1187 bool
			if x.Handler.Exec == nil {
				yyn1187 = true
				goto LABEL1187
			}
		LABEL1187:
			if yyr1186 || yy2arr1186 {
				if yyn1187 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1186[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1186[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1187 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1188 bool
			if x.Handler.HTTPGet == nil {
				yyn1188 = true
				goto LABEL1188
			}
		LABEL1188:
			if yyr1186 || yy2arr1186 {
				if yyn1188 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1186[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1186[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1188 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1189 bool
			if x.Handler.TCPSocket == nil {
				yyn1189 = true
				goto LABEL1189
			}
		LABEL1189:
			if yyr1186 || yy2arr1186 {
				if yyn1189 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1186[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1186[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1189 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1186[3] {
					yym1191 := z.EncBinary()
					_ = yym1191
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1192 := z.EncBinary()
					_ = yym1192
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1186[4] {
					yym1194 := z.EncBinary()
					_ = yym1194
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1195 := z.EncBinary()
					_ = yym1195
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1186[5] {
					yym1197 := z.EncBinary()
					_ = yym1197
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1198 := z.EncBinary()
					_ = yym1198
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1186[6] {
					yym1200 := z.EncBinary()
					_ = yym1200
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1201 := z.EncBinary()
					_ = yym1201
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1186[7] {
					yym1203 := z.EncBinary()
					_ = yym1203
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1186[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1204 := z.EncBinary()
					_ = yym1204
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1186 || yy2arr1186 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1205 := z.DecBinary()
	_ = yym1205
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1206 := r.ContainerType()
		if yyct1206 == codecSelferValueTypeMap1234 {
			yyl1206 := r.ReadMapStart()
			if yyl1206 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1206, d)
			}
		} else if yyct1206 == codecSelferValueTypeArray1234 {
			yyl1206 := r.ReadArrayStart()
			if yyl1206 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1206, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1207Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1207Slc
	var yyhl1207 bool = l >= 0
	for yyj1207 := 0; ; yyj1207++ {
		if yyhl1207 {
			if yyj1207 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1207Slc = r.DecodeBytes(yys1207Slc, true, true)
		yys1207 := string(yys1207Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1207 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1207)
		} // end switch yys1207
	} // end for yyj1207
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1216 int
	var yyb1216 bool
	var yyhl1216 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1216++
	if yyhl1216 {
		yyb1216 = yyj1216 > l
	} else {
		yyb1216 = r.CheckBreak()
	}
	if yyb1216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1216++
		if yyhl1216 {
			yyb1216 = yyj1216 > l
		} else {
			yyb1216 = r.CheckBreak()
		}
		if yyb1216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1225 := z.EncBinary()
	_ = yym1225
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1227 := z.EncBinary()
	_ = yym1227
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1228 := z.DecBinary()
	_ = yym1228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [2]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[0] = len(x.Add) != 0
			yyq1230[1] = len(x.Drop) != 0
			var yynn1230 int
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(2)
			} else {
				yynn1230 = 0
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
				yynn1230 = 0
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1232 := z.EncBinary()
						_ = yym1232
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1233 := z.EncBinary()
						_ = yym1233
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1235 := z.EncBinary()
						_ = yym1235
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1236 := z.EncBinary()
						_ = yym1236
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1237 := z.DecBinary()
	_ = yym1237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1238 := r.ContainerType()
		if yyct1238 == codecSelferValueTypeMap1234 {
			yyl1238 := r.ReadMapStart()
			if yyl1238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1238, d)
			}
		} else if yyct1238 == codecSelferValueTypeArray1234 {
			yyl1238 := r.ReadArrayStart()
			if yyl1238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1239Slc
	var yyhl1239 bool = l >= 0
	for yyj1239 := 0; ; yyj1239++ {
		if yyhl1239 {
			if yyj1239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1239Slc = r.DecodeBytes(yys1239Slc, true, true)
		yys1239 := string(yys1239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1239 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1240 := &x.Add
				yym1241 := z.DecBinary()
				_ = yym1241
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1240), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1242 := &x.Drop
				yym1243 := z.DecBinary()
				_ = yym1243
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1242), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1239)
		} // end switch yys1239
	} // end for yyj1239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1244 int
	var yyb1244 bool
	var yyhl1244 bool = l >= 0
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1245 := &x.Add
		yym1246 := z.DecBinary()
		_ = yym1246
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1245), d)
		}
	}
	yyj1244++
	if yyhl1244 {
		yyb1244 = yyj1244 > l
	} else {
		yyb1244 = r.CheckBreak()
	}
	if yyb1244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1247 := &x.Drop
		yym1248 := z.DecBinary()
		_ = yym1248
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1247), d)
		}
	}
	for {
		yyj1244++
		if yyhl1244 {
			yyb1244 = yyj1244 > l
		} else {
			yyb1244 = r.CheckBreak()
		}
		if yyb1244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1249 := z.EncBinary()
		_ = yym1249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1250 := !z.EncBinary()
			yy2arr1250 := z.EncBasicHandle().StructToArray
			var yyq1250 [2]bool
			_, _, _ = yysep1250, yyq1250, yy2arr1250
			const yyr1250 bool = false
			yyq1250[0] = len(x.Limits) != 0
			yyq1250[1] = len(x.Requests) != 0
			var yynn1250 int
			if yyr1250 || yy2arr1250 {
				r.EncodeArrayStart(2)
			} else {
				yynn1250 = 0
				for _, b := range yyq1250 {
					if b {
						yynn1250++
					}
				}
				r.EncodeMapStart(yynn1250)
				yynn1250 = 0
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1250[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1250 || yy2arr1250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1253 := z.DecBinary()
	_ = yym1253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1254 := r.ContainerType()
		if yyct1254 == codecSelferValueTypeMap1234 {
			yyl1254 := r.ReadMapStart()
			if yyl1254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1254, d)
			}
		} else if yyct1254 == codecSelferValueTypeArray1234 {
			yyl1254 := r.ReadArrayStart()
			if yyl1254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1255Slc
	var yyhl1255 bool = l >= 0
	for yyj1255 := 0; ; yyj1255++ {
		if yyhl1255 {
			if yyj1255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1255Slc = r.DecodeBytes(yys1255Slc, true, true)
		yys1255 := string(yys1255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1255 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1256 := &x.Limits
				yyv1256.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1257 := &x.Requests
				yyv1257.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1255)
		} // end switch yys1255
	} // end for yyj1255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1258 int
	var yyb1258 bool
	var yyhl1258 bool = l >= 0
	yyj1258++
	if yyhl1258 {
		yyb1258 = yyj1258 > l
	} else {
		yyb1258 = r.CheckBreak()
	}
	if yyb1258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1259 := &x.Limits
		yyv1259.CodecDecodeSelf(d)
	}
	yyj1258++
	if yyhl1258 {
		yyb1258 = yyj1258 > l
	} else {
		yyb1258 = r.CheckBreak()
	}
	if yyb1258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1260 := &x.Requests
		yyv1260.CodecDecodeSelf(d)
	}
	for {
		yyj1258++
		if yyhl1258 {
			yyb1258 = yyj1258 > l
		} else {
			yyb1258 = r.CheckBreak()
		}
		if yyb1258 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1258-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1261 := z.EncBinary()
		_ = yym1261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1262 := !z.EncBinary()
			yy2arr1262 := z.EncBasicHandle().StructToArray
			var yyq1262 [18]bool
			_, _, _ = yysep1262, yyq1262, yy2arr1262
			const yyr1262 bool = false
			yyq1262[1] = x.Image != ""
			yyq1262[2] = len(x.Command) != 0
			yyq1262[3] = len(x.Args) != 0
			yyq1262[4] = x.WorkingDir != ""
			yyq1262[5] = len(x.Ports) != 0
			yyq1262[6] = len(x.Env) != 0
			yyq1262[7] = true
			yyq1262[8] = len(x.VolumeMounts) != 0
			yyq1262[9] = x.LivenessProbe != nil
			yyq1262[10] = x.ReadinessProbe != nil
			yyq1262[11] = x.Lifecycle != nil
			yyq1262[12] = x.TerminationMessagePath != ""
			yyq1262[13] = x.ImagePullPolicy != ""
			yyq1262[14] = x.SecurityContext != nil
			yyq1262[15] = x.Stdin != false
			yyq1262[16] = x.StdinOnce != false
			yyq1262[17] = x.TTY != false
			var yynn1262 int
			if yyr1262 || yy2arr1262 {
				r.EncodeArrayStart(18)
			} else {
				yynn1262 = 1
				for _, b := range yyq1262 {
					if b {
						yynn1262++
					}
				}
				r.EncodeMapStart(yynn1262)
				yynn1262 = 0
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1264 := z.EncBinary()
				_ = yym1264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1265 := z.EncBinary()
				_ = yym1265
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[1] {
					yym1267 := z.EncBinary()
					_ = yym1267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1268 := z.EncBinary()
					_ = yym1268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1270 := z.EncBinary()
						_ = yym1270
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1271 := z.EncBinary()
						_ = yym1271
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1273 := z.EncBinary()
						_ = yym1273
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1274 := z.EncBinary()
						_ = yym1274
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[4] {
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1277 := z.EncBinary()
					_ = yym1277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1279 := z.EncBinary()
						_ = yym1279
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1280 := z.EncBinary()
						_ = yym1280
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1282 := z.EncBinary()
						_ = yym1282
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1283 := z.EncBinary()
						_ = yym1283
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[7] {
					yy1285 := &x.Resources
					yy1285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1286 := &x.Resources
					yy1286.CodecEncodeSelf(e)
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1288 := z.EncBinary()
						_ = yym1288
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1289 := z.EncBinary()
						_ = yym1289
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[12] {
					yym1294 := z.EncBinary()
					_ = yym1294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1262[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1295 := z.EncBinary()
					_ = yym1295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1262[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1262[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[15] {
					yym1299 := z.EncBinary()
					_ = yym1299
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1262[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[16] {
					yym1302 := z.EncBinary()
					_ = yym1302
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1262[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1303 := z.EncBinary()
					_ = yym1303
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1262[17] {
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1262[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1262 || yy2arr1262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1307 := z.DecBinary()
	_ = yym1307
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1308 := r.ContainerType()
		if yyct1308 == codecSelferValueTypeMap1234 {
			yyl1308 := r.ReadMapStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1308, d)
			}
		} else if yyct1308 == codecSelferValueTypeArray1234 {
			yyl1308 := r.ReadArrayStart()
			if yyl1308 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1308, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1309Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1309Slc
	var yyhl1309 bool = l >= 0
	for yyj1309 := 0; ; yyj1309++ {
		if yyhl1309 {
			if yyj1309 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1309Slc = r.DecodeBytes(yys1309Slc, true, true)
		yys1309 := string(yys1309Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1309 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1312 := &x.Command
				yym1313 := z.DecBinary()
				_ = yym1313
				if false {
				} else {
					z.F.DecSliceStringX(yyv1312, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1314 := &x.Args
				yym1315 := z.DecBinary()
				_ = yym1315
				if false {
				} else {
					z.F.DecSliceStringX(yyv1314, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1317 := &x.Ports
				yym1318 := z.DecBinary()
				_ = yym1318
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1317), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1319 := &x.Env
				yym1320 := z.DecBinary()
				_ = yym1320
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1319), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1321 := &x.Resources
				yyv1321.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1322 := &x.VolumeMounts
				yym1323 := z.DecBinary()
				_ = yym1323
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1322), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1309)
		} // end switch yys1309
	} // end for yyj1309
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1333 int
	var yyb1333 bool
	var yyhl1333 bool = l >= 0
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1336 := &x.Command
		yym1337 := z.DecBinary()
		_ = yym1337
		if false {
		} else {
			z.F.DecSliceStringX(yyv1336, false, d)
		}
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1338 := &x.Args
		yym1339 := z.DecBinary()
		_ = yym1339
		if false {
		} else {
			z.F.DecSliceStringX(yyv1338, false, d)
		}
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1341 := &x.Ports
		yym1342 := z.DecBinary()
		_ = yym1342
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1341), d)
		}
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1343 := &x.Env
		yym1344 := z.DecBinary()
		_ = yym1344
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1343), d)
		}
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1345 := &x.Resources
		yyv1345.CodecDecodeSelf(d)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1346 := &x.VolumeMounts
		yym1347 := z.DecBinary()
		_ = yym1347
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1346), d)
		}
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1333++
	if yyhl1333 {
		yyb1333 = yyj1333 > l
	} else {
		yyb1333 = r.CheckBreak()
	}
	if yyb1333 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1333++
		if yyhl1333 {
			yyb1333 = yyj1333 > l
		} else {
			yyb1333 = r.CheckBreak()
		}
		if yyb1333 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1333-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1357 := z.EncBinary()
		_ = yym1357
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1358 := !z.EncBinary()
			yy2arr1358 := z.EncBasicHandle().StructToArray
			var yyq1358 [3]bool
			_, _, _ = yysep1358, yyq1358, yy2arr1358
			const yyr1358 bool = false
			yyq1358[0] = x.Exec != nil
			yyq1358[1] = x.HTTPGet != nil
			yyq1358[2] = x.TCPSocket != nil
			var yynn1358 int
			if yyr1358 || yy2arr1358 {
				r.EncodeArrayStart(3)
			} else {
				yynn1358 = 0
				for _, b := range yyq1358 {
					if b {
						yynn1358++
					}
				}
				r.EncodeMapStart(yynn1358)
				yynn1358 = 0
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1358[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1358[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1358[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1358[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1358[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1358[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1358 || yy2arr1358 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1362 := z.DecBinary()
	_ = yym1362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1363 := r.ContainerType()
		if yyct1363 == codecSelferValueTypeMap1234 {
			yyl1363 := r.ReadMapStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1363, d)
			}
		} else if yyct1363 == codecSelferValueTypeArray1234 {
			yyl1363 := r.ReadArrayStart()
			if yyl1363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1364Slc
	var yyhl1364 bool = l >= 0
	for yyj1364 := 0; ; yyj1364++ {
		if yyhl1364 {
			if yyj1364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1364Slc = r.DecodeBytes(yys1364Slc, true, true)
		yys1364 := string(yys1364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1364 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1364)
		} // end switch yys1364
	} // end for yyj1364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1368 int
	var yyb1368 bool
	var yyhl1368 bool = l >= 0
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1368++
	if yyhl1368 {
		yyb1368 = yyj1368 > l
	} else {
		yyb1368 = r.CheckBreak()
	}
	if yyb1368 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1368++
		if yyhl1368 {
			yyb1368 = yyj1368 > l
		} else {
			yyb1368 = r.CheckBreak()
		}
		if yyb1368 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1368-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1372 := z.EncBinary()
		_ = yym1372
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1373 := !z.EncBinary()
			yy2arr1373 := z.EncBasicHandle().StructToArray
			var yyq1373 [2]bool
			_, _, _ = yysep1373, yyq1373, yy2arr1373
			const yyr1373 bool = false
			yyq1373[0] = x.PostStart != nil
			yyq1373[1] = x.PreStop != nil
			var yynn1373 int
			if yyr1373 || yy2arr1373 {
				r.EncodeArrayStart(2)
			} else {
				yynn1373 = 0
				for _, b := range yyq1373 {
					if b {
						yynn1373++
					}
				}
				r.EncodeMapStart(yynn1373)
				yynn1373 = 0
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1373[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1373[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1373[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1373 || yy2arr1373 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1376 := z.DecBinary()
	_ = yym1376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1377 := r.ContainerType()
		if yyct1377 == codecSelferValueTypeMap1234 {
			yyl1377 := r.ReadMapStart()
			if yyl1377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1377, d)
			}
		} else if yyct1377 == codecSelferValueTypeArray1234 {
			yyl1377 := r.ReadArrayStart()
			if yyl1377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1378Slc
	var yyhl1378 bool = l >= 0
	for yyj1378 := 0; ; yyj1378++ {
		if yyhl1378 {
			if yyj1378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1378Slc = r.DecodeBytes(yys1378Slc, true, true)
		yys1378 := string(yys1378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1378 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1378)
		} // end switch yys1378
	} // end for yyj1378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1381 int
	var yyb1381 bool
	var yyhl1381 bool = l >= 0
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1381++
	if yyhl1381 {
		yyb1381 = yyj1381 > l
	} else {
		yyb1381 = r.CheckBreak()
	}
	if yyb1381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1381++
		if yyhl1381 {
			yyb1381 = yyj1381 > l
		} else {
			yyb1381 = r.CheckBreak()
		}
		if yyb1381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1384 := z.EncBinary()
	_ = yym1384
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1385 := z.DecBinary()
	_ = yym1385
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1386 := z.EncBinary()
		_ = yym1386
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1387 := !z.EncBinary()
			yy2arr1387 := z.EncBasicHandle().StructToArray
			var yyq1387 [2]bool
			_, _, _ = yysep1387, yyq1387, yy2arr1387
			const yyr1387 bool = false
			yyq1387[0] = x.Reason != ""
			yyq1387[1] = x.Message != ""
			var yynn1387 int
			if yyr1387 || yy2arr1387 {
				r.EncodeArrayStart(2)
			} else {
				yynn1387 = 0
				for _, b := range yyq1387 {
					if b {
						yynn1387++
					}
				}
				r.EncodeMapStart(yynn1387)
				yynn1387 = 0
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1387[0] {
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1387[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1387[1] {
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1387[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1387 || yy2arr1387 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1394 := z.DecBinary()
	_ = yym1394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1395 := r.ContainerType()
		if yyct1395 == codecSelferValueTypeMap1234 {
			yyl1395 := r.ReadMapStart()
			if yyl1395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1395, d)
			}
		} else if yyct1395 == codecSelferValueTypeArray1234 {
			yyl1395 := r.ReadArrayStart()
			if yyl1395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1396Slc
	var yyhl1396 bool = l >= 0
	for yyj1396 := 0; ; yyj1396++ {
		if yyhl1396 {
			if yyj1396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1396Slc = r.DecodeBytes(yys1396Slc, true, true)
		yys1396 := string(yys1396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1396 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1396)
		} // end switch yys1396
	} // end for yyj1396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1399 int
	var yyb1399 bool
	var yyhl1399 bool = l >= 0
	yyj1399++
	if yyhl1399 {
		yyb1399 = yyj1399 > l
	} else {
		yyb1399 = r.CheckBreak()
	}
	if yyb1399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1399++
	if yyhl1399 {
		yyb1399 = yyj1399 > l
	} else {
		yyb1399 = r.CheckBreak()
	}
	if yyb1399 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1399++
		if yyhl1399 {
			yyb1399 = yyj1399 > l
		} else {
			yyb1399 = r.CheckBreak()
		}
		if yyb1399 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1399-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1402 := z.EncBinary()
		_ = yym1402
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1403 := !z.EncBinary()
			yy2arr1403 := z.EncBasicHandle().StructToArray
			var yyq1403 [1]bool
			_, _, _ = yysep1403, yyq1403, yy2arr1403
			const yyr1403 bool = false
			yyq1403[0] = true
			var yynn1403 int
			if yyr1403 || yy2arr1403 {
				r.EncodeArrayStart(1)
			} else {
				yynn1403 = 0
				for _, b := range yyq1403 {
					if b {
						yynn1403++
					}
				}
				r.EncodeMapStart(yynn1403)
				yynn1403 = 0
			}
			if yyr1403 || yy2arr1403 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1403[0] {
					yy1405 := &x.StartedAt
					yym1406 := z.EncBinary()
					_ = yym1406
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1405) {
					} else if yym1406 {
						z.EncBinaryMarshal(yy1405)
					} else if !yym1406 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1405)
					} else {
						z.EncFallback(yy1405)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1403[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1407 := &x.StartedAt
					yym1408 := z.EncBinary()
					_ = yym1408
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1407) {
					} else if yym1408 {
						z.EncBinaryMarshal(yy1407)
					} else if !yym1408 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1407)
					} else {
						z.EncFallback(yy1407)
					}
				}
			}
			if yyr1403 || yy2arr1403 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1409 := z.DecBinary()
	_ = yym1409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1410 := r.ContainerType()
		if yyct1410 == codecSelferValueTypeMap1234 {
			yyl1410 := r.ReadMapStart()
			if yyl1410 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1410, d)
			}
		} else if yyct1410 == codecSelferValueTypeArray1234 {
			yyl1410 := r.ReadArrayStart()
			if yyl1410 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1411Slc
	var yyhl1411 bool = l >= 0
	for yyj1411 := 0; ; yyj1411++ {
		if yyhl1411 {
			if yyj1411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1411Slc = r.DecodeBytes(yys1411Slc, true, true)
		yys1411 := string(yys1411Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1411 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1412 := &x.StartedAt
				yym1413 := z.DecBinary()
				_ = yym1413
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1412) {
				} else if yym1413 {
					z.DecBinaryUnmarshal(yyv1412)
				} else if !yym1413 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1412)
				} else {
					z.DecFallback(yyv1412, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1411)
		} // end switch yys1411
	} // end for yyj1411
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1414 int
	var yyb1414 bool
	var yyhl1414 bool = l >= 0
	yyj1414++
	if yyhl1414 {
		yyb1414 = yyj1414 > l
	} else {
		yyb1414 = r.CheckBreak()
	}
	if yyb1414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1415 := &x.StartedAt
		yym1416 := z.DecBinary()
		_ = yym1416
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1415) {
		} else if yym1416 {
			z.DecBinaryUnmarshal(yyv1415)
		} else if !yym1416 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1415)
		} else {
			z.DecFallback(yyv1415, false)
		}
	}
	for {
		yyj1414++
		if yyhl1414 {
			yyb1414 = yyj1414 > l
		} else {
			yyb1414 = r.CheckBreak()
		}
		if yyb1414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1417 := z.EncBinary()
		_ = yym1417
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1418 := !z.EncBinary()
			yy2arr1418 := z.EncBasicHandle().StructToArray
			var yyq1418 [7]bool
			_, _, _ = yysep1418, yyq1418, yy2arr1418
			const yyr1418 bool = false
			yyq1418[1] = x.Signal != 0
			yyq1418[2] = x.Reason != ""
			yyq1418[3] = x.Message != ""
			yyq1418[4] = true
			yyq1418[5] = true
			yyq1418[6] = x.ContainerID != ""
			var yynn1418 int
			if yyr1418 || yy2arr1418 {
				r.EncodeArrayStart(7)
			} else {
				yynn1418 = 1
				for _, b := range yyq1418 {
					if b {
						yynn1418++
					}
				}
				r.EncodeMapStart(yynn1418)
				yynn1418 = 0
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1420 := z.EncBinary()
				_ = yym1420
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1421 := z.EncBinary()
				_ = yym1421
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[1] {
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1418[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1424 := z.EncBinary()
					_ = yym1424
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[2] {
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1418[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1427 := z.EncBinary()
					_ = yym1427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[3] {
					yym1429 := z.EncBinary()
					_ = yym1429
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1418[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[4] {
					yy1432 := &x.StartedAt
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1432) {
					} else if yym1433 {
						z.EncBinaryMarshal(yy1432)
					} else if !yym1433 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1432)
					} else {
						z.EncFallback(yy1432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1418[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1434 := &x.StartedAt
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1434) {
					} else if yym1435 {
						z.EncBinaryMarshal(yy1434)
					} else if !yym1435 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1434)
					} else {
						z.EncFallback(yy1434)
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[5] {
					yy1437 := &x.FinishedAt
					yym1438 := z.EncBinary()
					_ = yym1438
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1437) {
					} else if yym1438 {
						z.EncBinaryMarshal(yy1437)
					} else if !yym1438 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1437)
					} else {
						z.EncFallback(yy1437)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1418[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1439 := &x.FinishedAt
					yym1440 := z.EncBinary()
					_ = yym1440
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1439) {
					} else if yym1440 {
						z.EncBinaryMarshal(yy1439)
					} else if !yym1440 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1439)
					} else {
						z.EncFallback(yy1439)
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1418[6] {
					yym1442 := z.EncBinary()
					_ = yym1442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1418[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1443 := z.EncBinary()
					_ = yym1443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1418 || yy2arr1418 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1444 := z.DecBinary()
	_ = yym1444
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1445 := r.ContainerType()
		if yyct1445 == codecSelferValueTypeMap1234 {
			yyl1445 := r.ReadMapStart()
			if yyl1445 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1445, d)
			}
		} else if yyct1445 == codecSelferValueTypeArray1234 {
			yyl1445 := r.ReadArrayStart()
			if yyl1445 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1445, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1446Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1446Slc
	var yyhl1446 bool = l >= 0
	for yyj1446 := 0; ; yyj1446++ {
		if yyhl1446 {
			if yyj1446 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1446Slc = r.DecodeBytes(yys1446Slc, true, true)
		yys1446 := string(yys1446Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1446 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1451 := &x.StartedAt
				yym1452 := z.DecBinary()
				_ = yym1452
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1451) {
				} else if yym1452 {
					z.DecBinaryUnmarshal(yyv1451)
				} else if !yym1452 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1451)
				} else {
					z.DecFallback(yyv1451, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1453 := &x.FinishedAt
				yym1454 := z.DecBinary()
				_ = yym1454
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1453) {
				} else if yym1454 {
					z.DecBinaryUnmarshal(yyv1453)
				} else if !yym1454 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1453)
				} else {
					z.DecFallback(yyv1453, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1446)
		} // end switch yys1446
	} // end for yyj1446
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1456 int
	var yyb1456 bool
	var yyhl1456 bool = l >= 0
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1461 := &x.StartedAt
		yym1462 := z.DecBinary()
		_ = yym1462
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1461) {
		} else if yym1462 {
			z.DecBinaryUnmarshal(yyv1461)
		} else if !yym1462 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1461)
		} else {
			z.DecFallback(yyv1461, false)
		}
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1463 := &x.FinishedAt
		yym1464 := z.DecBinary()
		_ = yym1464
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1463) {
		} else if yym1464 {
			z.DecBinaryUnmarshal(yyv1463)
		} else if !yym1464 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1463)
		} else {
			z.DecFallback(yyv1463, false)
		}
	}
	yyj1456++
	if yyhl1456 {
		yyb1456 = yyj1456 > l
	} else {
		yyb1456 = r.CheckBreak()
	}
	if yyb1456 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1456++
		if yyhl1456 {
			yyb1456 = yyj1456 > l
		} else {
			yyb1456 = r.CheckBreak()
		}
		if yyb1456 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1456-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1466 := z.EncBinary()
		_ = yym1466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1467 := !z.EncBinary()
			yy2arr1467 := z.EncBasicHandle().StructToArray
			var yyq1467 [3]bool
			_, _, _ = yysep1467, yyq1467, yy2arr1467
			const yyr1467 bool = false
			yyq1467[0] = x.Waiting != nil
			yyq1467[1] = x.Running != nil
			yyq1467[2] = x.Terminated != nil
			var yynn1467 int
			if yyr1467 || yy2arr1467 {
				r.EncodeArrayStart(3)
			} else {
				yynn1467 = 0
				for _, b := range yyq1467 {
					if b {
						yynn1467++
					}
				}
				r.EncodeMapStart(yynn1467)
				yynn1467 = 0
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1467[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1467 || yy2arr1467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1471 := z.DecBinary()
	_ = yym1471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1472 := r.ContainerType()
		if yyct1472 == codecSelferValueTypeMap1234 {
			yyl1472 := r.ReadMapStart()
			if yyl1472 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1472, d)
			}
		} else if yyct1472 == codecSelferValueTypeArray1234 {
			yyl1472 := r.ReadArrayStart()
			if yyl1472 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1472, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1473Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1473Slc
	var yyhl1473 bool = l >= 0
	for yyj1473 := 0; ; yyj1473++ {
		if yyhl1473 {
			if yyj1473 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1473Slc = r.DecodeBytes(yys1473Slc, true, true)
		yys1473 := string(yys1473Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1473 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1473)
		} // end switch yys1473
	} // end for yyj1473
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1477 int
	var yyb1477 bool
	var yyhl1477 bool = l >= 0
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1477++
	if yyhl1477 {
		yyb1477 = yyj1477 > l
	} else {
		yyb1477 = r.CheckBreak()
	}
	if yyb1477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1477++
		if yyhl1477 {
			yyb1477 = yyj1477 > l
		} else {
			yyb1477 = r.CheckBreak()
		}
		if yyb1477 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1477-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1481 := z.EncBinary()
		_ = yym1481
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1482 := !z.EncBinary()
			yy2arr1482 := z.EncBasicHandle().StructToArray
			var yyq1482 [8]bool
			_, _, _ = yysep1482, yyq1482, yy2arr1482
			const yyr1482 bool = false
			yyq1482[1] = true
			yyq1482[2] = true
			yyq1482[7] = x.ContainerID != ""
			var yynn1482 int
			if yyr1482 || yy2arr1482 {
				r.EncodeArrayStart(8)
			} else {
				yynn1482 = 5
				for _, b := range yyq1482 {
					if b {
						yynn1482++
					}
				}
				r.EncodeMapStart(yynn1482)
				yynn1482 = 0
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1484 := z.EncBinary()
				_ = yym1484
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1485 := z.EncBinary()
				_ = yym1485
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[1] {
					yy1487 := &x.State
					yy1487.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1482[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1488 := &x.State
					yy1488.CodecEncodeSelf(e)
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[2] {
					yy1490 := &x.LastTerminationState
					yy1490.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1482[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1491 := &x.LastTerminationState
					yy1491.CodecEncodeSelf(e)
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1493 := z.EncBinary()
				_ = yym1493
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1494 := z.EncBinary()
				_ = yym1494
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1496 := z.EncBinary()
				_ = yym1496
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1497 := z.EncBinary()
				_ = yym1497
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1499 := z.EncBinary()
				_ = yym1499
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1500 := z.EncBinary()
				_ = yym1500
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1502 := z.EncBinary()
				_ = yym1502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1503 := z.EncBinary()
				_ = yym1503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1482[7] {
					yym1505 := z.EncBinary()
					_ = yym1505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1482[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1482 || yy2arr1482 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1507 := z.DecBinary()
	_ = yym1507
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1508 := r.ContainerType()
		if yyct1508 == codecSelferValueTypeMap1234 {
			yyl1508 := r.ReadMapStart()
			if yyl1508 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1508, d)
			}
		} else if yyct1508 == codecSelferValueTypeArray1234 {
			yyl1508 := r.ReadArrayStart()
			if yyl1508 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1508, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1509Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1509Slc
	var yyhl1509 bool = l >= 0
	for yyj1509 := 0; ; yyj1509++ {
		if yyhl1509 {
			if yyj1509 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1509Slc = r.DecodeBytes(yys1509Slc, true, true)
		yys1509 := string(yys1509Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1509 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1511 := &x.State
				yyv1511.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1512 := &x.LastTerminationState
				yyv1512.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1509)
		} // end switch yys1509
	} // end for yyj1509
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1518 int
	var yyb1518 bool
	var yyhl1518 bool = l >= 0
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1520 := &x.State
		yyv1520.CodecDecodeSelf(d)
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1521 := &x.LastTerminationState
		yyv1521.CodecDecodeSelf(d)
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1518++
	if yyhl1518 {
		yyb1518 = yyj1518 > l
	} else {
		yyb1518 = r.CheckBreak()
	}
	if yyb1518 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1518++
		if yyhl1518 {
			yyb1518 = yyj1518 > l
		} else {
			yyb1518 = r.CheckBreak()
		}
		if yyb1518 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1518-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1527 := z.EncBinary()
	_ = yym1527
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1528 := z.DecBinary()
	_ = yym1528
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1529 := z.EncBinary()
	_ = yym1529
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1530 := z.DecBinary()
	_ = yym1530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1531 := z.EncBinary()
		_ = yym1531
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1532 := !z.EncBinary()
			yy2arr1532 := z.EncBasicHandle().StructToArray
			var yyq1532 [6]bool
			_, _, _ = yysep1532, yyq1532, yy2arr1532
			const yyr1532 bool = false
			yyq1532[2] = true
			yyq1532[3] = true
			yyq1532[4] = x.Reason != ""
			yyq1532[5] = x.Message != ""
			var yynn1532 int
			if yyr1532 || yy2arr1532 {
				r.EncodeArrayStart(6)
			} else {
				yynn1532 = 2
				for _, b := range yyq1532 {
					if b {
						yynn1532++
					}
				}
				r.EncodeMapStart(yynn1532)
				yynn1532 = 0
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1532[2] {
					yy1536 := &x.LastProbeTime
					yym1537 := z.EncBinary()
					_ = yym1537
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1536) {
					} else if yym1537 {
						z.EncBinaryMarshal(yy1536)
					} else if !yym1537 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1536)
					} else {
						z.EncFallback(yy1536)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1532[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1538 := &x.LastProbeTime
					yym1539 := z.EncBinary()
					_ = yym1539
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1538) {
					} else if yym1539 {
						z.EncBinaryMarshal(yy1538)
					} else if !yym1539 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1538)
					} else {
						z.EncFallback(yy1538)
					}
				}
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1532[3] {
					yy1541 := &x.LastTransitionTime
					yym1542 := z.EncBinary()
					_ = yym1542
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1541) {
					} else if yym1542 {
						z.EncBinaryMarshal(yy1541)
					} else if !yym1542 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1541)
					} else {
						z.EncFallback(yy1541)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1532[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1543 := &x.LastTransitionTime
					yym1544 := z.EncBinary()
					_ = yym1544
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1543) {
					} else if yym1544 {
						z.EncBinaryMarshal(yy1543)
					} else if !yym1544 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1543)
					} else {
						z.EncFallback(yy1543)
					}
				}
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1532[4] {
					yym1546 := z.EncBinary()
					_ = yym1546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1532[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1547 := z.EncBinary()
					_ = yym1547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1532[5] {
					yym1549 := z.EncBinary()
					_ = yym1549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1532[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1550 := z.EncBinary()
					_ = yym1550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1532 || yy2arr1532 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1551 := z.DecBinary()
	_ = yym1551
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1552 := r.ContainerType()
		if yyct1552 == codecSelferValueTypeMap1234 {
			yyl1552 := r.ReadMapStart()
			if yyl1552 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1552, d)
			}
		} else if yyct1552 == codecSelferValueTypeArray1234 {
			yyl1552 := r.ReadArrayStart()
			if yyl1552 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1552, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1553Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1553Slc
	var yyhl1553 bool = l >= 0
	for yyj1553 := 0; ; yyj1553++ {
		if yyhl1553 {
			if yyj1553 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1553Slc = r.DecodeBytes(yys1553Slc, true, true)
		yys1553 := string(yys1553Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1553 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1556 := &x.LastProbeTime
				yym1557 := z.DecBinary()
				_ = yym1557
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1556) {
				} else if yym1557 {
					z.DecBinaryUnmarshal(yyv1556)
				} else if !yym1557 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1556)
				} else {
					z.DecFallback(yyv1556, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1558 := &x.LastTransitionTime
				yym1559 := z.DecBinary()
				_ = yym1559
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1558) {
				} else if yym1559 {
					z.DecBinaryUnmarshal(yyv1558)
				} else if !yym1559 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1558)
				} else {
					z.DecFallback(yyv1558, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1553)
		} // end switch yys1553
	} // end for yyj1553
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1562 int
	var yyb1562 bool
	var yyhl1562 bool = l >= 0
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1565 := &x.LastProbeTime
		yym1566 := z.DecBinary()
		_ = yym1566
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1565) {
		} else if yym1566 {
			z.DecBinaryUnmarshal(yyv1565)
		} else if !yym1566 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1565)
		} else {
			z.DecFallback(yyv1565, false)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1567 := &x.LastTransitionTime
		yym1568 := z.DecBinary()
		_ = yym1568
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1567) {
		} else if yym1568 {
			z.DecBinaryUnmarshal(yyv1567)
		} else if !yym1568 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1567)
		} else {
			z.DecFallback(yyv1567, false)
		}
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1562++
	if yyhl1562 {
		yyb1562 = yyj1562 > l
	} else {
		yyb1562 = r.CheckBreak()
	}
	if yyb1562 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1562++
		if yyhl1562 {
			yyb1562 = yyj1562 > l
		} else {
			yyb1562 = r.CheckBreak()
		}
		if yyb1562 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1562-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1571 := z.EncBinary()
	_ = yym1571
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1572 := z.DecBinary()
	_ = yym1572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1573 := z.EncBinary()
	_ = yym1573
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1574 := z.DecBinary()
	_ = yym1574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1575 := z.EncBinary()
		_ = yym1575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1576 := !z.EncBinary()
			yy2arr1576 := z.EncBasicHandle().StructToArray
			var yyq1576 [1]bool
			_, _, _ = yysep1576, yyq1576, yy2arr1576
			const yyr1576 bool = false
			var yynn1576 int
			if yyr1576 || yy2arr1576 {
				r.EncodeArrayStart(1)
			} else {
				yynn1576 = 1
				for _, b := range yyq1576 {
					if b {
						yynn1576++
					}
				}
				r.EncodeMapStart(yynn1576)
				yynn1576 = 0
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1578 := z.EncBinary()
					_ = yym1578
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1576 || yy2arr1576 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1580 := z.DecBinary()
	_ = yym1580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1581 := r.ContainerType()
		if yyct1581 == codecSelferValueTypeMap1234 {
			yyl1581 := r.ReadMapStart()
			if yyl1581 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1581, d)
			}
		} else if yyct1581 == codecSelferValueTypeArray1234 {
			yyl1581 := r.ReadArrayStart()
			if yyl1581 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1581, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1582Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1582Slc
	var yyhl1582 bool = l >= 0
	for yyj1582 := 0; ; yyj1582++ {
		if yyhl1582 {
			if yyj1582 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1582Slc = r.DecodeBytes(yys1582Slc, true, true)
		yys1582 := string(yys1582Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1582 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1583 := &x.NodeSelectorTerms
				yym1584 := z.DecBinary()
				_ = yym1584
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1583), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1582)
		} // end switch yys1582
	} // end for yyj1582
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1585 int
	var yyb1585 bool
	var yyhl1585 bool = l >= 0
	yyj1585++
	if yyhl1585 {
		yyb1585 = yyj1585 > l
	} else {
		yyb1585 = r.CheckBreak()
	}
	if yyb1585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1586 := &x.NodeSelectorTerms
		yym1587 := z.DecBinary()
		_ = yym1587
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1586), d)
		}
	}
	for {
		yyj1585++
		if yyhl1585 {
			yyb1585 = yyj1585 > l
		} else {
			yyb1585 = r.CheckBreak()
		}
		if yyb1585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1588 := z.EncBinary()
		_ = yym1588
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1589 := !z.EncBinary()
			yy2arr1589 := z.EncBasicHandle().StructToArray
			var yyq1589 [1]bool
			_, _, _ = yysep1589, yyq1589, yy2arr1589
			const yyr1589 bool = false
			var yynn1589 int
			if yyr1589 || yy2arr1589 {
				r.EncodeArrayStart(1)
			} else {
				yynn1589 = 1
				for _, b := range yyq1589 {
					if b {
						yynn1589++
					}
				}
				r.EncodeMapStart(yynn1589)
				yynn1589 = 0
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1591 := z.EncBinary()
					_ = yym1591
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1592 := z.EncBinary()
					_ = yym1592
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1589 || yy2arr1589 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1593 := z.DecBinary()
	_ = yym1593
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1594 := r.ContainerType()
		if yyct1594 == codecSelferValueTypeMap1234 {
			yyl1594 := r.ReadMapStart()
			if yyl1594 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1594, d)
			}
		} else if yyct1594 == codecSelferValueTypeArray1234 {
			yyl1594 := r.ReadArrayStart()
			if yyl1594 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1594, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1595Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1595Slc
	var yyhl1595 bool = l >= 0
	for yyj1595 := 0; ; yyj1595++ {
		if yyhl1595 {
			if yyj1595 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1595Slc = r.DecodeBytes(yys1595Slc, true, true)
		yys1595 := string(yys1595Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1595 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1596 := &x.MatchExpressions
				yym1597 := z.DecBinary()
				_ = yym1597
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1596), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1595)
		} // end switch yys1595
	} // end for yyj1595
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1598 int
	var yyb1598 bool
	var yyhl1598 bool = l >= 0
	yyj1598++
	if yyhl1598 {
		yyb1598 = yyj1598 > l
	} else {
		yyb1598 = r.CheckBreak()
	}
	if yyb1598 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1599 := &x.MatchExpressions
		yym1600 := z.DecBinary()
		_ = yym1600
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1599), d)
		}
	}
	for {
		yyj1598++
		if yyhl1598 {
			yyb1598 = yyj1598 > l
		} else {
			yyb1598 = r.CheckBreak()
		}
		if yyb1598 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1598-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1601 := z.EncBinary()
		_ = yym1601
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1602 := !z.EncBinary()
			yy2arr1602 := z.EncBasicHandle().StructToArray
			var yyq1602 [3]bool
			_, _, _ = yysep1602, yyq1602, yy2arr1602
			const yyr1602 bool = false
			yyq1602[2] = len(x.Values) != 0
			var yynn1602 int
			if yyr1602 || yy2arr1602 {
				r.EncodeArrayStart(3)
			} else {
				yynn1602 = 2
				for _, b := range yyq1602 {
					if b {
						yynn1602++
					}
				}
				r.EncodeMapStart(yynn1602)
				yynn1602 = 0
			}
			if yyr1602 || yy2arr1602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1604 := z.EncBinary()
				_ = yym1604
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1605 := z.EncBinary()
				_ = yym1605
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1602 || yy2arr1602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1602 || yy2arr1602 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1602[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1608 := z.EncBinary()
						_ = yym1608
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1602[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1609 := z.EncBinary()
						_ = yym1609
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1602 || yy2arr1602 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1610 := z.DecBinary()
	_ = yym1610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1611 := r.ContainerType()
		if yyct1611 == codecSelferValueTypeMap1234 {
			yyl1611 := r.ReadMapStart()
			if yyl1611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1611, d)
			}
		} else if yyct1611 == codecSelferValueTypeArray1234 {
			yyl1611 := r.ReadArrayStart()
			if yyl1611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1612Slc
	var yyhl1612 bool = l >= 0
	for yyj1612 := 0; ; yyj1612++ {
		if yyhl1612 {
			if yyj1612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1612Slc = r.DecodeBytes(yys1612Slc, true, true)
		yys1612 := string(yys1612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1612 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1615 := &x.Values
				yym1616 := z.DecBinary()
				_ = yym1616
				if false {
				} else {
					z.F.DecSliceStringX(yyv1615, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1612)
		} // end switch yys1612
	} // end for yyj1612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1617 int
	var yyb1617 bool
	var yyhl1617 bool = l >= 0
	yyj1617++
	if yyhl1617 {
		yyb1617 = yyj1617 > l
	} else {
		yyb1617 = r.CheckBreak()
	}
	if yyb1617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1617++
	if yyhl1617 {
		yyb1617 = yyj1617 > l
	} else {
		yyb1617 = r.CheckBreak()
	}
	if yyb1617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1617++
	if yyhl1617 {
		yyb1617 = yyj1617 > l
	} else {
		yyb1617 = r.CheckBreak()
	}
	if yyb1617 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1620 := &x.Values
		yym1621 := z.DecBinary()
		_ = yym1621
		if false {
		} else {
			z.F.DecSliceStringX(yyv1620, false, d)
		}
	}
	for {
		yyj1617++
		if yyhl1617 {
			yyb1617 = yyj1617 > l
		} else {
			yyb1617 = r.CheckBreak()
		}
		if yyb1617 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1617-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1622 := z.EncBinary()
	_ = yym1622
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1623 := z.DecBinary()
	_ = yym1623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1624 := z.EncBinary()
		_ = yym1624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1625 := !z.EncBinary()
			yy2arr1625 := z.EncBasicHandle().StructToArray
			var yyq1625 [1]bool
			_, _, _ = yysep1625, yyq1625, yy2arr1625
			const yyr1625 bool = false
			yyq1625[0] = x.NodeAffinity != nil
			var yynn1625 int
			if yyr1625 || yy2arr1625 {
				r.EncodeArrayStart(1)
			} else {
				yynn1625 = 0
				for _, b := range yyq1625 {
					if b {
						yynn1625++
					}
				}
				r.EncodeMapStart(yynn1625)
				yynn1625 = 0
			}
			if yyr1625 || yy2arr1625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1625[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1625[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1625 || yy2arr1625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1627 := z.DecBinary()
	_ = yym1627
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1628 := r.ContainerType()
		if yyct1628 == codecSelferValueTypeMap1234 {
			yyl1628 := r.ReadMapStart()
			if yyl1628 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1628, d)
			}
		} else if yyct1628 == codecSelferValueTypeArray1234 {
			yyl1628 := r.ReadArrayStart()
			if yyl1628 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1628, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1629Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1629Slc
	var yyhl1629 bool = l >= 0
	for yyj1629 := 0; ; yyj1629++ {
		if yyhl1629 {
			if yyj1629 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1629Slc = r.DecodeBytes(yys1629Slc, true, true)
		yys1629 := string(yys1629Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1629 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1629)
		} // end switch yys1629
	} // end for yyj1629
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1631 int
	var yyb1631 bool
	var yyhl1631 bool = l >= 0
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1631++
		if yyhl1631 {
			yyb1631 = yyj1631 > l
		} else {
			yyb1631 = r.CheckBreak()
		}
		if yyb1631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1633 := z.EncBinary()
		_ = yym1633
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1634 := !z.EncBinary()
			yy2arr1634 := z.EncBasicHandle().StructToArray
			var yyq1634 [3]bool
			_, _, _ = yysep1634, yyq1634, yy2arr1634
			const yyr1634 bool = false
			yyq1634[0] = x.RequiredDuringSchedulingRequiredDuringExecution != nil
			yyq1634[1] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1634[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1634 int
			if yyr1634 || yy2arr1634 {
				r.EncodeArrayStart(3)
			} else {
				yynn1634 = 0
				for _, b := range yyq1634 {
					if b {
						yynn1634++
					}
				}
				r.EncodeMapStart(yynn1634)
				yynn1634 = 0
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1634[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1634[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1634[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1634[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1634[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1638 := z.EncBinary()
						_ = yym1638
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1634[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1639 := z.EncBinary()
						_ = yym1639
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1634 || yy2arr1634 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1640 := z.DecBinary()
	_ = yym1640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1641 := r.ContainerType()
		if yyct1641 == codecSelferValueTypeMap1234 {
			yyl1641 := r.ReadMapStart()
			if yyl1641 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1641, d)
			}
		} else if yyct1641 == codecSelferValueTypeArray1234 {
			yyl1641 := r.ReadArrayStart()
			if yyl1641 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1641, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1642Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1642Slc
	var yyhl1642 bool = l >= 0
	for yyj1642 := 0; ; yyj1642++ {
		if yyhl1642 {
			if yyj1642 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1642Slc = r.DecodeBytes(yys1642Slc, true, true)
		yys1642 := string(yys1642Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1642 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1645 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1646 := z.DecBinary()
				_ = yym1646
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1645), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1642)
		} // end switch yys1642
	} // end for yyj1642
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1647 int
	var yyb1647 bool
	var yyhl1647 bool = l >= 0
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1647++
	if yyhl1647 {
		yyb1647 = yyj1647 > l
	} else {
		yyb1647 = r.CheckBreak()
	}
	if yyb1647 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1650 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1651 := z.DecBinary()
		_ = yym1651
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1650), d)
		}
	}
	for {
		yyj1647++
		if yyhl1647 {
			yyb1647 = yyj1647 > l
		} else {
			yyb1647 = r.CheckBreak()
		}
		if yyb1647 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1647-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1652 := z.EncBinary()
		_ = yym1652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1653 := !z.EncBinary()
			yy2arr1653 := z.EncBasicHandle().StructToArray
			var yyq1653 [2]bool
			_, _, _ = yysep1653, yyq1653, yy2arr1653
			const yyr1653 bool = false
			var yynn1653 int
			if yyr1653 || yy2arr1653 {
				r.EncodeArrayStart(2)
			} else {
				yynn1653 = 2
				for _, b := range yyq1653 {
					if b {
						yynn1653++
					}
				}
				r.EncodeMapStart(yynn1653)
				yynn1653 = 0
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1655 := z.EncBinary()
				_ = yym1655
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1656 := z.EncBinary()
				_ = yym1656
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1658 := &x.Preference
				yy1658.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1659 := &x.Preference
				yy1659.CodecEncodeSelf(e)
			}
			if yyr1653 || yy2arr1653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1660 := z.DecBinary()
	_ = yym1660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1661 := r.ContainerType()
		if yyct1661 == codecSelferValueTypeMap1234 {
			yyl1661 := r.ReadMapStart()
			if yyl1661 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1661, d)
			}
		} else if yyct1661 == codecSelferValueTypeArray1234 {
			yyl1661 := r.ReadArrayStart()
			if yyl1661 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1662Slc
	var yyhl1662 bool = l >= 0
	for yyj1662 := 0; ; yyj1662++ {
		if yyhl1662 {
			if yyj1662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1662Slc = r.DecodeBytes(yys1662Slc, true, true)
		yys1662 := string(yys1662Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1662 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1664 := &x.Preference
				yyv1664.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1662)
		} // end switch yys1662
	} // end for yyj1662
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1665 int
	var yyb1665 bool
	var yyhl1665 bool = l >= 0
	yyj1665++
	if yyhl1665 {
		yyb1665 = yyj1665 > l
	} else {
		yyb1665 = r.CheckBreak()
	}
	if yyb1665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1665++
	if yyhl1665 {
		yyb1665 = yyj1665 > l
	} else {
		yyb1665 = r.CheckBreak()
	}
	if yyb1665 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1667 := &x.Preference
		yyv1667.CodecDecodeSelf(d)
	}
	for {
		yyj1665++
		if yyhl1665 {
			yyb1665 = yyj1665 > l
		} else {
			yyb1665 = r.CheckBreak()
		}
		if yyb1665 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1665-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1668 := z.EncBinary()
		_ = yym1668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1669 := !z.EncBinary()
			yy2arr1669 := z.EncBasicHandle().StructToArray
			var yyq1669 [15]bool
			_, _, _ = yysep1669, yyq1669, yy2arr1669
			const yyr1669 bool = false
			yyq1669[0] = len(x.Volumes) != 0
			yyq1669[2] = x.RestartPolicy != ""
			yyq1669[3] = x.TerminationGracePeriodSeconds != nil
			yyq1669[4] = x.ActiveDeadlineSeconds != nil
			yyq1669[5] = x.DNSPolicy != ""
			yyq1669[6] = len(x.NodeSelector) != 0
			yyq1669[7] = x.ServiceAccountName != ""
			yyq1669[8] = x.DeprecatedServiceAccount != ""
			yyq1669[9] = x.NodeName != ""
			yyq1669[10] = x.HostNetwork != false
			yyq1669[11] = x.HostPID != false
			yyq1669[12] = x.HostIPC != false
			yyq1669[13] = x.SecurityContext != nil
			yyq1669[14] = len(x.ImagePullSecrets) != 0
			var yynn1669 int
			if yyr1669 || yy2arr1669 {
				r.EncodeArrayStart(15)
			} else {
				yynn1669 = 1
				for _, b := range yyq1669 {
					if b {
						yynn1669++
					}
				}
				r.EncodeMapStart(yynn1669)
				yynn1669 = 0
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1671 := z.EncBinary()
						_ = yym1671
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1672 := z.EncBinary()
						_ = yym1672
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1674 := z.EncBinary()
					_ = yym1674
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1675 := z.EncBinary()
					_ = yym1675
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1678 := *x.TerminationGracePeriodSeconds
						yym1679 := z.EncBinary()
						_ = yym1679
						if false {
						} else {
							r.EncodeInt(int64(yy1678))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1680 := *x.TerminationGracePeriodSeconds
						yym1681 := z.EncBinary()
						_ = yym1681
						if false {
						} else {
							r.EncodeInt(int64(yy1680))
						}
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1683 := *x.ActiveDeadlineSeconds
						yym1684 := z.EncBinary()
						_ = yym1684
						if false {
						} else {
							r.EncodeInt(int64(yy1683))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1685 := *x.ActiveDeadlineSeconds
						yym1686 := z.EncBinary()
						_ = yym1686
						if false {
						} else {
							r.EncodeInt(int64(yy1685))
						}
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1689 := z.EncBinary()
						_ = yym1689
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1690 := z.EncBinary()
						_ = yym1690
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[7] {
					yym1692 := z.EncBinary()
					_ = yym1692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1693 := z.EncBinary()
					_ = yym1693
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[8] {
					yym1695 := z.EncBinary()
					_ = yym1695
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[9] {
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1669[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1699 := z.EncBinary()
					_ = yym1699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[10] {
					yym1701 := z.EncBinary()
					_ = yym1701
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1669[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1702 := z.EncBinary()
					_ = yym1702
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[11] {
					yym1704 := z.EncBinary()
					_ = yym1704
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1669[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1705 := z.EncBinary()
					_ = yym1705
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[12] {
					yym1707 := z.EncBinary()
					_ = yym1707
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1669[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1669[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1711 := z.EncBinary()
						_ = yym1711
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1669[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1712 := z.EncBinary()
						_ = yym1712
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1669 || yy2arr1669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1713 := z.DecBinary()
	_ = yym1713
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1714 := r.ContainerType()
		if yyct1714 == codecSelferValueTypeMap1234 {
			yyl1714 := r.ReadMapStart()
			if yyl1714 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1714, d)
			}
		} else if yyct1714 == codecSelferValueTypeArray1234 {
			yyl1714 := r.ReadArrayStart()
			if yyl1714 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1714, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1715Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1715Slc
	var yyhl1715 bool = l >= 0
	for yyj1715 := 0; ; yyj1715++ {
		if yyhl1715 {
			if yyj1715 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1715Slc = r.DecodeBytes(yys1715Slc, true, true)
		yys1715 := string(yys1715Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1715 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1716 := &x.Volumes
				yym1717 := z.DecBinary()
				_ = yym1717
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1716), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1718 := &x.Containers
				yym1719 := z.DecBinary()
				_ = yym1719
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1718), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1722 := z.DecBinary()
				_ = yym1722
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1724 := z.DecBinary()
				_ = yym1724
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1726 := &x.NodeSelector
				yym1727 := z.DecBinary()
				_ = yym1727
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1726, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1735 := &x.ImagePullSecrets
				yym1736 := z.DecBinary()
				_ = yym1736
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1735), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1715)
		} // end switch yys1715
	} // end for yyj1715
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1737 int
	var yyb1737 bool
	var yyhl1737 bool = l >= 0
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1738 := &x.Volumes
		yym1739 := z.DecBinary()
		_ = yym1739
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1738), d)
		}
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1740 := &x.Containers
		yym1741 := z.DecBinary()
		_ = yym1741
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1740), d)
		}
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1744 := z.DecBinary()
		_ = yym1744
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1746 := z.DecBinary()
		_ = yym1746
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1748 := &x.NodeSelector
		yym1749 := z.DecBinary()
		_ = yym1749
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1748, false, d)
		}
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1737++
	if yyhl1737 {
		yyb1737 = yyj1737 > l
	} else {
		yyb1737 = r.CheckBreak()
	}
	if yyb1737 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1757 := &x.ImagePullSecrets
		yym1758 := z.DecBinary()
		_ = yym1758
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1757), d)
		}
	}
	for {
		yyj1737++
		if yyhl1737 {
			yyb1737 = yyj1737 > l
		} else {
			yyb1737 = r.CheckBreak()
		}
		if yyb1737 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1737-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1759 := z.EncBinary()
		_ = yym1759
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1760 := !z.EncBinary()
			yy2arr1760 := z.EncBasicHandle().StructToArray
			var yyq1760 [5]bool
			_, _, _ = yysep1760, yyq1760, yy2arr1760
			const yyr1760 bool = false
			yyq1760[0] = x.SELinuxOptions != nil
			yyq1760[1] = x.RunAsUser != nil
			yyq1760[2] = x.RunAsNonRoot != nil
			yyq1760[3] = len(x.SupplementalGroups) != 0
			yyq1760[4] = x.FSGroup != nil
			var yynn1760 int
			if yyr1760 || yy2arr1760 {
				r.EncodeArrayStart(5)
			} else {
				yynn1760 = 0
				for _, b := range yyq1760 {
					if b {
						yynn1760++
					}
				}
				r.EncodeMapStart(yynn1760)
				yynn1760 = 0
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1763 := *x.RunAsUser
						yym1764 := z.EncBinary()
						_ = yym1764
						if false {
						} else {
							r.EncodeInt(int64(yy1763))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1765 := *x.RunAsUser
						yym1766 := z.EncBinary()
						_ = yym1766
						if false {
						} else {
							r.EncodeInt(int64(yy1765))
						}
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1768 := *x.RunAsNonRoot
						yym1769 := z.EncBinary()
						_ = yym1769
						if false {
						} else {
							r.EncodeBool(bool(yy1768))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1770 := *x.RunAsNonRoot
						yym1771 := z.EncBinary()
						_ = yym1771
						if false {
						} else {
							r.EncodeBool(bool(yy1770))
						}
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1773 := z.EncBinary()
						_ = yym1773
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1774 := z.EncBinary()
						_ = yym1774
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1760[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1776 := *x.FSGroup
						yym1777 := z.EncBinary()
						_ = yym1777
						if false {
						} else {
							r.EncodeInt(int64(yy1776))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1760[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1778 := *x.FSGroup
						yym1779 := z.EncBinary()
						_ = yym1779
						if false {
						} else {
							r.EncodeInt(int64(yy1778))
						}
					}
				}
			}
			if yyr1760 || yy2arr1760 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1780 := z.DecBinary()
	_ = yym1780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1781 := r.ContainerType()
		if yyct1781 == codecSelferValueTypeMap1234 {
			yyl1781 := r.ReadMapStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1781, d)
			}
		} else if yyct1781 == codecSelferValueTypeArray1234 {
			yyl1781 := r.ReadArrayStart()
			if yyl1781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1782Slc
	var yyhl1782 bool = l >= 0
	for yyj1782 := 0; ; yyj1782++ {
		if yyhl1782 {
			if yyj1782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1782Slc = r.DecodeBytes(yys1782Slc, true, true)
		yys1782 := string(yys1782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1782 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1785 := z.DecBinary()
				_ = yym1785
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1787 := z.DecBinary()
				_ = yym1787
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1788 := &x.SupplementalGroups
				yym1789 := z.DecBinary()
				_ = yym1789
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1788, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1791 := z.DecBinary()
				_ = yym1791
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1782)
		} // end switch yys1782
	} // end for yyj1782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1792 int
	var yyb1792 bool
	var yyhl1792 bool = l >= 0
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1795 := z.DecBinary()
		_ = yym1795
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1797 := z.DecBinary()
		_ = yym1797
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1798 := &x.SupplementalGroups
		yym1799 := z.DecBinary()
		_ = yym1799
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1798, false, d)
		}
	}
	yyj1792++
	if yyhl1792 {
		yyb1792 = yyj1792 > l
	} else {
		yyb1792 = r.CheckBreak()
	}
	if yyb1792 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1801 := z.DecBinary()
		_ = yym1801
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1792++
		if yyhl1792 {
			yyb1792 = yyj1792 > l
		} else {
			yyb1792 = r.CheckBreak()
		}
		if yyb1792 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1792-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1802 := z.EncBinary()
		_ = yym1802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1803 := !z.EncBinary()
			yy2arr1803 := z.EncBasicHandle().StructToArray
			var yyq1803 [8]bool
			_, _, _ = yysep1803, yyq1803, yy2arr1803
			const yyr1803 bool = false
			yyq1803[0] = x.Phase != ""
			yyq1803[1] = len(x.Conditions) != 0
			yyq1803[2] = x.Message != ""
			yyq1803[3] = x.Reason != ""
			yyq1803[4] = x.HostIP != ""
			yyq1803[5] = x.PodIP != ""
			yyq1803[6] = x.StartTime != nil
			yyq1803[7] = len(x.ContainerStatuses) != 0
			var yynn1803 int
			if yyr1803 || yy2arr1803 {
				r.EncodeArrayStart(8)
			} else {
				yynn1803 = 0
				for _, b := range yyq1803 {
					if b {
						yynn1803++
					}
				}
				r.EncodeMapStart(yynn1803)
				yynn1803 = 0
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1806 := z.EncBinary()
						_ = yym1806
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1807 := z.EncBinary()
						_ = yym1807
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[2] {
					yym1809 := z.EncBinary()
					_ = yym1809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[3] {
					yym1812 := z.EncBinary()
					_ = yym1812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[4] {
					yym1815 := z.EncBinary()
					_ = yym1815
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1816 := z.EncBinary()
					_ = yym1816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[5] {
					yym1818 := z.EncBinary()
					_ = yym1818
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1803[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1821 := z.EncBinary()
						_ = yym1821
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1821 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1821 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1822 := z.EncBinary()
						_ = yym1822
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1822 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1822 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1803[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1824 := z.EncBinary()
						_ = yym1824
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1803[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1825 := z.EncBinary()
						_ = yym1825
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1826 := z.DecBinary()
	_ = yym1826
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1827 := r.ContainerType()
		if yyct1827 == codecSelferValueTypeMap1234 {
			yyl1827 := r.ReadMapStart()
			if yyl1827 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1827, d)
			}
		} else if yyct1827 == codecSelferValueTypeArray1234 {
			yyl1827 := r.ReadArrayStart()
			if yyl1827 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1827, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1828Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1828Slc
	var yyhl1828 bool = l >= 0
	for yyj1828 := 0; ; yyj1828++ {
		if yyhl1828 {
			if yyj1828 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1828Slc = r.DecodeBytes(yys1828Slc, true, true)
		yys1828 := string(yys1828Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1828 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1830 := &x.Conditions
				yym1831 := z.DecBinary()
				_ = yym1831
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1830), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1837 := z.DecBinary()
				_ = yym1837
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1837 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1837 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1838 := &x.ContainerStatuses
				yym1839 := z.DecBinary()
				_ = yym1839
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1838), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1828)
		} // end switch yys1828
	} // end for yyj1828
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1840 int
	var yyb1840 bool
	var yyhl1840 bool = l >= 0
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1842 := &x.Conditions
		yym1843 := z.DecBinary()
		_ = yym1843
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1842), d)
		}
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1849 := z.DecBinary()
		_ = yym1849
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1849 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1849 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1840++
	if yyhl1840 {
		yyb1840 = yyj1840 > l
	} else {
		yyb1840 = r.CheckBreak()
	}
	if yyb1840 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1850 := &x.ContainerStatuses
		yym1851 := z.DecBinary()
		_ = yym1851
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1850), d)
		}
	}
	for {
		yyj1840++
		if yyhl1840 {
			yyb1840 = yyj1840 > l
		} else {
			yyb1840 = r.CheckBreak()
		}
		if yyb1840 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1840-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1852 := z.EncBinary()
		_ = yym1852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1853 := !z.EncBinary()
			yy2arr1853 := z.EncBasicHandle().StructToArray
			var yyq1853 [4]bool
			_, _, _ = yysep1853, yyq1853, yy2arr1853
			const yyr1853 bool = false
			yyq1853[0] = x.Kind != ""
			yyq1853[1] = x.APIVersion != ""
			yyq1853[2] = true
			yyq1853[3] = true
			var yynn1853 int
			if yyr1853 || yy2arr1853 {
				r.EncodeArrayStart(4)
			} else {
				yynn1853 = 0
				for _, b := range yyq1853 {
					if b {
						yynn1853++
					}
				}
				r.EncodeMapStart(yynn1853)
				yynn1853 = 0
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[0] {
					yym1855 := z.EncBinary()
					_ = yym1855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1853[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1856 := z.EncBinary()
					_ = yym1856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[1] {
					yym1858 := z.EncBinary()
					_ = yym1858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1853[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1859 := z.EncBinary()
					_ = yym1859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[2] {
					yy1861 := &x.ObjectMeta
					yy1861.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1853[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1862 := &x.ObjectMeta
					yy1862.CodecEncodeSelf(e)
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1853[3] {
					yy1864 := &x.Status
					yy1864.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1853[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1865 := &x.Status
					yy1865.CodecEncodeSelf(e)
				}
			}
			if yyr1853 || yy2arr1853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1866 := z.DecBinary()
	_ = yym1866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1867 := r.ContainerType()
		if yyct1867 == codecSelferValueTypeMap1234 {
			yyl1867 := r.ReadMapStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1867, d)
			}
		} else if yyct1867 == codecSelferValueTypeArray1234 {
			yyl1867 := r.ReadArrayStart()
			if yyl1867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1868Slc
	var yyhl1868 bool = l >= 0
	for yyj1868 := 0; ; yyj1868++ {
		if yyhl1868 {
			if yyj1868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1868Slc = r.DecodeBytes(yys1868Slc, true, true)
		yys1868 := string(yys1868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1868 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1871 := &x.ObjectMeta
				yyv1871.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1872 := &x.Status
				yyv1872.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1868)
		} // end switch yys1868
	} // end for yyj1868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1873 int
	var yyb1873 bool
	var yyhl1873 bool = l >= 0
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1876 := &x.ObjectMeta
		yyv1876.CodecDecodeSelf(d)
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1877 := &x.Status
		yyv1877.CodecDecodeSelf(d)
	}
	for {
		yyj1873++
		if yyhl1873 {
			yyb1873 = yyj1873 > l
		} else {
			yyb1873 = r.CheckBreak()
		}
		if yyb1873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1878 := z.EncBinary()
		_ = yym1878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1879 := !z.EncBinary()
			yy2arr1879 := z.EncBasicHandle().StructToArray
			var yyq1879 [5]bool
			_, _, _ = yysep1879, yyq1879, yy2arr1879
			const yyr1879 bool = false
			yyq1879[0] = x.Kind != ""
			yyq1879[1] = x.APIVersion != ""
			yyq1879[2] = true
			yyq1879[3] = true
			yyq1879[4] = true
			var yynn1879 int
			if yyr1879 || yy2arr1879 {
				r.EncodeArrayStart(5)
			} else {
				yynn1879 = 0
				for _, b := range yyq1879 {
					if b {
						yynn1879++
					}
				}
				r.EncodeMapStart(yynn1879)
				yynn1879 = 0
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[0] {
					yym1881 := z.EncBinary()
					_ = yym1881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1882 := z.EncBinary()
					_ = yym1882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[1] {
					yym1884 := z.EncBinary()
					_ = yym1884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1885 := z.EncBinary()
					_ = yym1885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[2] {
					yy1887 := &x.ObjectMeta
					yy1887.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1888 := &x.ObjectMeta
					yy1888.CodecEncodeSelf(e)
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[3] {
					yy1890 := &x.Spec
					yy1890.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1891 := &x.Spec
					yy1891.CodecEncodeSelf(e)
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1879[4] {
					yy1893 := &x.Status
					yy1893.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1879[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1894 := &x.Status
					yy1894.CodecEncodeSelf(e)
				}
			}
			if yyr1879 || yy2arr1879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1895 := z.DecBinary()
	_ = yym1895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1896 := r.ContainerType()
		if yyct1896 == codecSelferValueTypeMap1234 {
			yyl1896 := r.ReadMapStart()
			if yyl1896 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1896, d)
			}
		} else if yyct1896 == codecSelferValueTypeArray1234 {
			yyl1896 := r.ReadArrayStart()
			if yyl1896 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1897Slc
	var yyhl1897 bool = l >= 0
	for yyj1897 := 0; ; yyj1897++ {
		if yyhl1897 {
			if yyj1897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1897Slc = r.DecodeBytes(yys1897Slc, true, true)
		yys1897 := string(yys1897Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1897 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1900 := &x.ObjectMeta
				yyv1900.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1901 := &x.Spec
				yyv1901.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1902 := &x.Status
				yyv1902.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1897)
		} // end switch yys1897
	} // end for yyj1897
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1903 int
	var yyb1903 bool
	var yyhl1903 bool = l >= 0
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1906 := &x.ObjectMeta
		yyv1906.CodecDecodeSelf(d)
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1907 := &x.Spec
		yyv1907.CodecDecodeSelf(d)
	}
	yyj1903++
	if yyhl1903 {
		yyb1903 = yyj1903 > l
	} else {
		yyb1903 = r.CheckBreak()
	}
	if yyb1903 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1908 := &x.Status
		yyv1908.CodecDecodeSelf(d)
	}
	for {
		yyj1903++
		if yyhl1903 {
			yyb1903 = yyj1903 > l
		} else {
			yyb1903 = r.CheckBreak()
		}
		if yyb1903 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1903-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1909 := z.EncBinary()
		_ = yym1909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1910 := !z.EncBinary()
			yy2arr1910 := z.EncBasicHandle().StructToArray
			var yyq1910 [4]bool
			_, _, _ = yysep1910, yyq1910, yy2arr1910
			const yyr1910 bool = false
			yyq1910[0] = x.Kind != ""
			yyq1910[1] = x.APIVersion != ""
			yyq1910[2] = true
			var yynn1910 int
			if yyr1910 || yy2arr1910 {
				r.EncodeArrayStart(4)
			} else {
				yynn1910 = 1
				for _, b := range yyq1910 {
					if b {
						yynn1910++
					}
				}
				r.EncodeMapStart(yynn1910)
				yynn1910 = 0
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[0] {
					yym1912 := z.EncBinary()
					_ = yym1912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1913 := z.EncBinary()
					_ = yym1913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[1] {
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[2] {
					yy1918 := &x.ListMeta
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1918) {
					} else {
						z.EncFallback(yy1918)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1910[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1920 := &x.ListMeta
					yym1921 := z.EncBinary()
					_ = yym1921
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1920) {
					} else {
						z.EncFallback(yy1920)
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1925 := z.DecBinary()
	_ = yym1925
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1926 := r.ContainerType()
		if yyct1926 == codecSelferValueTypeMap1234 {
			yyl1926 := r.ReadMapStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1926, d)
			}
		} else if yyct1926 == codecSelferValueTypeArray1234 {
			yyl1926 := r.ReadArrayStart()
			if yyl1926 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1926, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1927Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1927Slc
	var yyhl1927 bool = l >= 0
	for yyj1927 := 0; ; yyj1927++ {
		if yyhl1927 {
			if yyj1927 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1927Slc = r.DecodeBytes(yys1927Slc, true, true)
		yys1927 := string(yys1927Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1927 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1930 := &x.ListMeta
				yym1931 := z.DecBinary()
				_ = yym1931
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1930) {
				} else {
					z.DecFallback(yyv1930, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1932 := &x.Items
				yym1933 := z.DecBinary()
				_ = yym1933
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1932), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1927)
		} // end switch yys1927
	} // end for yyj1927
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1934 int
	var yyb1934 bool
	var yyhl1934 bool = l >= 0
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1937 := &x.ListMeta
		yym1938 := z.DecBinary()
		_ = yym1938
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1937) {
		} else {
			z.DecFallback(yyv1937, false)
		}
	}
	yyj1934++
	if yyhl1934 {
		yyb1934 = yyj1934 > l
	} else {
		yyb1934 = r.CheckBreak()
	}
	if yyb1934 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1939 := &x.Items
		yym1940 := z.DecBinary()
		_ = yym1940
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1939), d)
		}
	}
	for {
		yyj1934++
		if yyhl1934 {
			yyb1934 = yyj1934 > l
		} else {
			yyb1934 = r.CheckBreak()
		}
		if yyb1934 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1934-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1941 := z.EncBinary()
		_ = yym1941
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1942 := !z.EncBinary()
			yy2arr1942 := z.EncBasicHandle().StructToArray
			var yyq1942 [2]bool
			_, _, _ = yysep1942, yyq1942, yy2arr1942
			const yyr1942 bool = false
			yyq1942[0] = true
			yyq1942[1] = true
			var yynn1942 int
			if yyr1942 || yy2arr1942 {
				r.EncodeArrayStart(2)
			} else {
				yynn1942 = 0
				for _, b := range yyq1942 {
					if b {
						yynn1942++
					}
				}
				r.EncodeMapStart(yynn1942)
				yynn1942 = 0
			}
			if yyr1942 || yy2arr1942 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1942[0] {
					yy1944 := &x.ObjectMeta
					yy1944.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1942[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1945 := &x.ObjectMeta
					yy1945.CodecEncodeSelf(e)
				}
			}
			if yyr1942 || yy2arr1942 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1942[1] {
					yy1947 := &x.Spec
					yy1947.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1942[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1948 := &x.Spec
					yy1948.CodecEncodeSelf(e)
				}
			}
			if yyr1942 || yy2arr1942 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1949 := z.DecBinary()
	_ = yym1949
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1950 := r.ContainerType()
		if yyct1950 == codecSelferValueTypeMap1234 {
			yyl1950 := r.ReadMapStart()
			if yyl1950 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1950, d)
			}
		} else if yyct1950 == codecSelferValueTypeArray1234 {
			yyl1950 := r.ReadArrayStart()
			if yyl1950 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1950, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1951Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1951Slc
	var yyhl1951 bool = l >= 0
	for yyj1951 := 0; ; yyj1951++ {
		if yyhl1951 {
			if yyj1951 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1951Slc = r.DecodeBytes(yys1951Slc, true, true)
		yys1951 := string(yys1951Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1951 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1952 := &x.ObjectMeta
				yyv1952.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1953 := &x.Spec
				yyv1953.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1951)
		} // end switch yys1951
	} // end for yyj1951
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1954 int
	var yyb1954 bool
	var yyhl1954 bool = l >= 0
	yyj1954++
	if yyhl1954 {
		yyb1954 = yyj1954 > l
	} else {
		yyb1954 = r.CheckBreak()
	}
	if yyb1954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1955 := &x.ObjectMeta
		yyv1955.CodecDecodeSelf(d)
	}
	yyj1954++
	if yyhl1954 {
		yyb1954 = yyj1954 > l
	} else {
		yyb1954 = r.CheckBreak()
	}
	if yyb1954 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1956 := &x.Spec
		yyv1956.CodecDecodeSelf(d)
	}
	for {
		yyj1954++
		if yyhl1954 {
			yyb1954 = yyj1954 > l
		} else {
			yyb1954 = r.CheckBreak()
		}
		if yyb1954 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1954-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1957 := z.EncBinary()
		_ = yym1957
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1958 := !z.EncBinary()
			yy2arr1958 := z.EncBasicHandle().StructToArray
			var yyq1958 [4]bool
			_, _, _ = yysep1958, yyq1958, yy2arr1958
			const yyr1958 bool = false
			yyq1958[0] = x.Kind != ""
			yyq1958[1] = x.APIVersion != ""
			yyq1958[2] = true
			yyq1958[3] = true
			var yynn1958 int
			if yyr1958 || yy2arr1958 {
				r.EncodeArrayStart(4)
			} else {
				yynn1958 = 0
				for _, b := range yyq1958 {
					if b {
						yynn1958++
					}
				}
				r.EncodeMapStart(yynn1958)
				yynn1958 = 0
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[0] {
					yym1960 := z.EncBinary()
					_ = yym1960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1958[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1961 := z.EncBinary()
					_ = yym1961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[1] {
					yym1963 := z.EncBinary()
					_ = yym1963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1958[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1964 := z.EncBinary()
					_ = yym1964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[2] {
					yy1966 := &x.ObjectMeta
					yy1966.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1958[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1967 := &x.ObjectMeta
					yy1967.CodecEncodeSelf(e)
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1958[3] {
					yy1969 := &x.Template
					yy1969.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1958[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1970 := &x.Template
					yy1970.CodecEncodeSelf(e)
				}
			}
			if yyr1958 || yy2arr1958 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1971 := z.DecBinary()
	_ = yym1971
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1972 := r.ContainerType()
		if yyct1972 == codecSelferValueTypeMap1234 {
			yyl1972 := r.ReadMapStart()
			if yyl1972 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1972, d)
			}
		} else if yyct1972 == codecSelferValueTypeArray1234 {
			yyl1972 := r.ReadArrayStart()
			if yyl1972 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1972, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1973Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1973Slc
	var yyhl1973 bool = l >= 0
	for yyj1973 := 0; ; yyj1973++ {
		if yyhl1973 {
			if yyj1973 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1973Slc = r.DecodeBytes(yys1973Slc, true, true)
		yys1973 := string(yys1973Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1973 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1976 := &x.ObjectMeta
				yyv1976.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1977 := &x.Template
				yyv1977.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1973)
		} // end switch yys1973
	} // end for yyj1973
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1978 int
	var yyb1978 bool
	var yyhl1978 bool = l >= 0
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1981 := &x.ObjectMeta
		yyv1981.CodecDecodeSelf(d)
	}
	yyj1978++
	if yyhl1978 {
		yyb1978 = yyj1978 > l
	} else {
		yyb1978 = r.CheckBreak()
	}
	if yyb1978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1982 := &x.Template
		yyv1982.CodecDecodeSelf(d)
	}
	for {
		yyj1978++
		if yyhl1978 {
			yyb1978 = yyj1978 > l
		} else {
			yyb1978 = r.CheckBreak()
		}
		if yyb1978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1983 := z.EncBinary()
		_ = yym1983
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1984 := !z.EncBinary()
			yy2arr1984 := z.EncBasicHandle().StructToArray
			var yyq1984 [4]bool
			_, _, _ = yysep1984, yyq1984, yy2arr1984
			const yyr1984 bool = false
			yyq1984[0] = x.Kind != ""
			yyq1984[1] = x.APIVersion != ""
			yyq1984[2] = true
			var yynn1984 int
			if yyr1984 || yy2arr1984 {
				r.EncodeArrayStart(4)
			} else {
				yynn1984 = 1
				for _, b := range yyq1984 {
					if b {
						yynn1984++
					}
				}
				r.EncodeMapStart(yynn1984)
				yynn1984 = 0
			}
			if yyr1984 || yy2arr1984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1984[0] {
					yym1986 := z.EncBinary()
					_ = yym1986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1984[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1987 := z.EncBinary()
					_ = yym1987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1984 || yy2arr1984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1984[1] {
					yym1989 := z.EncBinary()
					_ = yym1989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1984[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1984 || yy2arr1984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1984[2] {
					yy1992 := &x.ListMeta
					yym1993 := z.EncBinary()
					_ = yym1993
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1992) {
					} else {
						z.EncFallback(yy1992)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1984[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1994 := &x.ListMeta
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1994) {
					} else {
						z.EncFallback(yy1994)
					}
				}
			}
			if yyr1984 || yy2arr1984 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1984 || yy2arr1984 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1999 := z.DecBinary()
	_ = yym1999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2000 := r.ContainerType()
		if yyct2000 == codecSelferValueTypeMap1234 {
			yyl2000 := r.ReadMapStart()
			if yyl2000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2000, d)
			}
		} else if yyct2000 == codecSelferValueTypeArray1234 {
			yyl2000 := r.ReadArrayStart()
			if yyl2000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2001Slc
	var yyhl2001 bool = l >= 0
	for yyj2001 := 0; ; yyj2001++ {
		if yyhl2001 {
			if yyj2001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2001Slc = r.DecodeBytes(yys2001Slc, true, true)
		yys2001 := string(yys2001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2001 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2004 := &x.ListMeta
				yym2005 := z.DecBinary()
				_ = yym2005
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2004) {
				} else {
					z.DecFallback(yyv2004, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2006 := &x.Items
				yym2007 := z.DecBinary()
				_ = yym2007
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2006), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2001)
		} // end switch yys2001
	} // end for yyj2001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2008 int
	var yyb2008 bool
	var yyhl2008 bool = l >= 0
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2011 := &x.ListMeta
		yym2012 := z.DecBinary()
		_ = yym2012
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2011) {
		} else {
			z.DecFallback(yyv2011, false)
		}
	}
	yyj2008++
	if yyhl2008 {
		yyb2008 = yyj2008 > l
	} else {
		yyb2008 = r.CheckBreak()
	}
	if yyb2008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2013 := &x.Items
		yym2014 := z.DecBinary()
		_ = yym2014
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2013), d)
		}
	}
	for {
		yyj2008++
		if yyhl2008 {
			yyb2008 = yyj2008 > l
		} else {
			yyb2008 = r.CheckBreak()
		}
		if yyb2008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2015 := z.EncBinary()
		_ = yym2015
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2016 := !z.EncBinary()
			yy2arr2016 := z.EncBasicHandle().StructToArray
			var yyq2016 [3]bool
			_, _, _ = yysep2016, yyq2016, yy2arr2016
			const yyr2016 bool = false
			yyq2016[0] = x.Replicas != nil
			yyq2016[1] = len(x.Selector) != 0
			yyq2016[2] = x.Template != nil
			var yynn2016 int
			if yyr2016 || yy2arr2016 {
				r.EncodeArrayStart(3)
			} else {
				yynn2016 = 0
				for _, b := range yyq2016 {
					if b {
						yynn2016++
					}
				}
				r.EncodeMapStart(yynn2016)
				yynn2016 = 0
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2018 := *x.Replicas
						yym2019 := z.EncBinary()
						_ = yym2019
						if false {
						} else {
							r.EncodeInt(int64(yy2018))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2020 := *x.Replicas
						yym2021 := z.EncBinary()
						_ = yym2021
						if false {
						} else {
							r.EncodeInt(int64(yy2020))
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2023 := z.EncBinary()
						_ = yym2023
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2016[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2016[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2016 || yy2arr2016 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2026 := z.DecBinary()
	_ = yym2026
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2027 := r.ContainerType()
		if yyct2027 == codecSelferValueTypeMap1234 {
			yyl2027 := r.ReadMapStart()
			if yyl2027 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2027, d)
			}
		} else if yyct2027 == codecSelferValueTypeArray1234 {
			yyl2027 := r.ReadArrayStart()
			if yyl2027 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2027, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2028Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2028Slc
	var yyhl2028 bool = l >= 0
	for yyj2028 := 0; ; yyj2028++ {
		if yyhl2028 {
			if yyj2028 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2028Slc = r.DecodeBytes(yys2028Slc, true, true)
		yys2028 := string(yys2028Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2028 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2030 := z.DecBinary()
				_ = yym2030
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2031 := &x.Selector
				yym2032 := z.DecBinary()
				_ = yym2032
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2031, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2028)
		} // end switch yys2028
	} // end for yyj2028
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2034 int
	var yyb2034 bool
	var yyhl2034 bool = l >= 0
	yyj2034++
	if yyhl2034 {
		yyb2034 = yyj2034 > l
	} else {
		yyb2034 = r.CheckBreak()
	}
	if yyb2034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2036 := z.DecBinary()
		_ = yym2036
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2034++
	if yyhl2034 {
		yyb2034 = yyj2034 > l
	} else {
		yyb2034 = r.CheckBreak()
	}
	if yyb2034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2037 := &x.Selector
		yym2038 := z.DecBinary()
		_ = yym2038
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2037, false, d)
		}
	}
	yyj2034++
	if yyhl2034 {
		yyb2034 = yyj2034 > l
	} else {
		yyb2034 = r.CheckBreak()
	}
	if yyb2034 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2034++
		if yyhl2034 {
			yyb2034 = yyj2034 > l
		} else {
			yyb2034 = r.CheckBreak()
		}
		if yyb2034 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2034-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2040 := z.EncBinary()
		_ = yym2040
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2041 := !z.EncBinary()
			yy2arr2041 := z.EncBasicHandle().StructToArray
			var yyq2041 [2]bool
			_, _, _ = yysep2041, yyq2041, yy2arr2041
			const yyr2041 bool = false
			yyq2041[1] = x.ObservedGeneration != 0
			var yynn2041 int
			if yyr2041 || yy2arr2041 {
				r.EncodeArrayStart(2)
			} else {
				yynn2041 = 1
				for _, b := range yyq2041 {
					if b {
						yynn2041++
					}
				}
				r.EncodeMapStart(yynn2041)
				yynn2041 = 0
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2043 := z.EncBinary()
				_ = yym2043
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2044 := z.EncBinary()
				_ = yym2044
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2041[1] {
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2041[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2047 := z.EncBinary()
					_ = yym2047
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2041 || yy2arr2041 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2048 := z.DecBinary()
	_ = yym2048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2049 := r.ContainerType()
		if yyct2049 == codecSelferValueTypeMap1234 {
			yyl2049 := r.ReadMapStart()
			if yyl2049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2049, d)
			}
		} else if yyct2049 == codecSelferValueTypeArray1234 {
			yyl2049 := r.ReadArrayStart()
			if yyl2049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2050Slc
	var yyhl2050 bool = l >= 0
	for yyj2050 := 0; ; yyj2050++ {
		if yyhl2050 {
			if yyj2050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2050Slc = r.DecodeBytes(yys2050Slc, true, true)
		yys2050 := string(yys2050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2050 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2050)
		} // end switch yys2050
	} // end for yyj2050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2053 int
	var yyb2053 bool
	var yyhl2053 bool = l >= 0
	yyj2053++
	if yyhl2053 {
		yyb2053 = yyj2053 > l
	} else {
		yyb2053 = r.CheckBreak()
	}
	if yyb2053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2053++
	if yyhl2053 {
		yyb2053 = yyj2053 > l
	} else {
		yyb2053 = r.CheckBreak()
	}
	if yyb2053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2053++
		if yyhl2053 {
			yyb2053 = yyj2053 > l
		} else {
			yyb2053 = r.CheckBreak()
		}
		if yyb2053 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2053-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2056 := z.EncBinary()
		_ = yym2056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2057 := !z.EncBinary()
			yy2arr2057 := z.EncBasicHandle().StructToArray
			var yyq2057 [5]bool
			_, _, _ = yysep2057, yyq2057, yy2arr2057
			const yyr2057 bool = false
			yyq2057[0] = x.Kind != ""
			yyq2057[1] = x.APIVersion != ""
			yyq2057[2] = true
			yyq2057[3] = true
			yyq2057[4] = true
			var yynn2057 int
			if yyr2057 || yy2arr2057 {
				r.EncodeArrayStart(5)
			} else {
				yynn2057 = 0
				for _, b := range yyq2057 {
					if b {
						yynn2057++
					}
				}
				r.EncodeMapStart(yynn2057)
				yynn2057 = 0
			}
			if yyr2057 || yy2arr2057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2057[0] {
					yym2059 := z.EncBinary()
					_ = yym2059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2057[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2057 || yy2arr2057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2057[1] {
					yym2062 := z.EncBinary()
					_ = yym2062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2057[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2057 || yy2arr2057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2057[2] {
					yy2065 := &x.ObjectMeta
					yy2065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2057[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2066 := &x.ObjectMeta
					yy2066.CodecEncodeSelf(e)
				}
			}
			if yyr2057 || yy2arr2057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2057[3] {
					yy2068 := &x.Spec
					yy2068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2057[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2069 := &x.Spec
					yy2069.CodecEncodeSelf(e)
				}
			}
			if yyr2057 || yy2arr2057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2057[4] {
					yy2071 := &x.Status
					yy2071.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2057[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2072 := &x.Status
					yy2072.CodecEncodeSelf(e)
				}
			}
			if yyr2057 || yy2arr2057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2074 := r.ContainerType()
		if yyct2074 == codecSelferValueTypeMap1234 {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if yyct2074 == codecSelferValueTypeArray1234 {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2075 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2078 := &x.ObjectMeta
				yyv2078.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2079 := &x.Spec
				yyv2079.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2080 := &x.Status
				yyv2080.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2081 int
	var yyb2081 bool
	var yyhl2081 bool = l >= 0
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2084 := &x.ObjectMeta
		yyv2084.CodecDecodeSelf(d)
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2085 := &x.Spec
		yyv2085.CodecDecodeSelf(d)
	}
	yyj2081++
	if yyhl2081 {
		yyb2081 = yyj2081 > l
	} else {
		yyb2081 = r.CheckBreak()
	}
	if yyb2081 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2086 := &x.Status
		yyv2086.CodecDecodeSelf(d)
	}
	for {
		yyj2081++
		if yyhl2081 {
			yyb2081 = yyj2081 > l
		} else {
			yyb2081 = r.CheckBreak()
		}
		if yyb2081 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2081-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2087 := z.EncBinary()
		_ = yym2087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2088 := !z.EncBinary()
			yy2arr2088 := z.EncBasicHandle().StructToArray
			var yyq2088 [4]bool
			_, _, _ = yysep2088, yyq2088, yy2arr2088
			const yyr2088 bool = false
			yyq2088[0] = x.Kind != ""
			yyq2088[1] = x.APIVersion != ""
			yyq2088[2] = true
			var yynn2088 int
			if yyr2088 || yy2arr2088 {
				r.EncodeArrayStart(4)
			} else {
				yynn2088 = 1
				for _, b := range yyq2088 {
					if b {
						yynn2088++
					}
				}
				r.EncodeMapStart(yynn2088)
				yynn2088 = 0
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2088[0] {
					yym2090 := z.EncBinary()
					_ = yym2090
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2088[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2091 := z.EncBinary()
					_ = yym2091
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2088[1] {
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2088[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2094 := z.EncBinary()
					_ = yym2094
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2088[2] {
					yy2096 := &x.ListMeta
					yym2097 := z.EncBinary()
					_ = yym2097
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2096) {
					} else {
						z.EncFallback(yy2096)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2088[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2098 := &x.ListMeta
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2098) {
					} else {
						z.EncFallback(yy2098)
					}
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2088 || yy2arr2088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2104 := r.ContainerType()
		if yyct2104 == codecSelferValueTypeMap1234 {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if yyct2104 == codecSelferValueTypeArray1234 {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2108 := &x.ListMeta
				yym2109 := z.DecBinary()
				_ = yym2109
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2108) {
				} else {
					z.DecFallback(yyv2108, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2110 := &x.Items
				yym2111 := z.DecBinary()
				_ = yym2111
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2110), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2112 int
	var yyb2112 bool
	var yyhl2112 bool = l >= 0
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2115 := &x.ListMeta
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2115) {
		} else {
			z.DecFallback(yyv2115, false)
		}
	}
	yyj2112++
	if yyhl2112 {
		yyb2112 = yyj2112 > l
	} else {
		yyb2112 = r.CheckBreak()
	}
	if yyb2112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2117 := &x.Items
		yym2118 := z.DecBinary()
		_ = yym2118
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2117), d)
		}
	}
	for {
		yyj2112++
		if yyhl2112 {
			yyb2112 = yyj2112 > l
		} else {
			yyb2112 = r.CheckBreak()
		}
		if yyb2112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2119 := z.EncBinary()
	_ = yym2119
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2120 := z.DecBinary()
	_ = yym2120
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2121 := z.EncBinary()
	_ = yym2121
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2122 := z.DecBinary()
	_ = yym2122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2123 := z.EncBinary()
		_ = yym2123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2124 := !z.EncBinary()
			yy2arr2124 := z.EncBasicHandle().StructToArray
			var yyq2124 [1]bool
			_, _, _ = yysep2124, yyq2124, yy2arr2124
			const yyr2124 bool = false
			yyq2124[0] = true
			var yynn2124 int
			if yyr2124 || yy2arr2124 {
				r.EncodeArrayStart(1)
			} else {
				yynn2124 = 0
				for _, b := range yyq2124 {
					if b {
						yynn2124++
					}
				}
				r.EncodeMapStart(yynn2124)
				yynn2124 = 0
			}
			if yyr2124 || yy2arr2124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2124[0] {
					yy2126 := &x.LoadBalancer
					yy2126.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2127 := &x.LoadBalancer
					yy2127.CodecEncodeSelf(e)
				}
			}
			if yyr2124 || yy2arr2124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2128 := z.DecBinary()
	_ = yym2128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2129 := r.ContainerType()
		if yyct2129 == codecSelferValueTypeMap1234 {
			yyl2129 := r.ReadMapStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2129, d)
			}
		} else if yyct2129 == codecSelferValueTypeArray1234 {
			yyl2129 := r.ReadArrayStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2130Slc
	var yyhl2130 bool = l >= 0
	for yyj2130 := 0; ; yyj2130++ {
		if yyhl2130 {
			if yyj2130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2130Slc = r.DecodeBytes(yys2130Slc, true, true)
		yys2130 := string(yys2130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2130 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2131 := &x.LoadBalancer
				yyv2131.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2130)
		} // end switch yys2130
	} // end for yyj2130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2132 int
	var yyb2132 bool
	var yyhl2132 bool = l >= 0
	yyj2132++
	if yyhl2132 {
		yyb2132 = yyj2132 > l
	} else {
		yyb2132 = r.CheckBreak()
	}
	if yyb2132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2133 := &x.LoadBalancer
		yyv2133.CodecDecodeSelf(d)
	}
	for {
		yyj2132++
		if yyhl2132 {
			yyb2132 = yyj2132 > l
		} else {
			yyb2132 = r.CheckBreak()
		}
		if yyb2132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2134 := z.EncBinary()
		_ = yym2134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2135 := !z.EncBinary()
			yy2arr2135 := z.EncBasicHandle().StructToArray
			var yyq2135 [1]bool
			_, _, _ = yysep2135, yyq2135, yy2arr2135
			const yyr2135 bool = false
			yyq2135[0] = len(x.Ingress) != 0
			var yynn2135 int
			if yyr2135 || yy2arr2135 {
				r.EncodeArrayStart(1)
			} else {
				yynn2135 = 0
				for _, b := range yyq2135 {
					if b {
						yynn2135++
					}
				}
				r.EncodeMapStart(yynn2135)
				yynn2135 = 0
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2135[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2137 := z.EncBinary()
						_ = yym2137
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2135[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2138 := z.EncBinary()
						_ = yym2138
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2135 || yy2arr2135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2139 := z.DecBinary()
	_ = yym2139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2140 := r.ContainerType()
		if yyct2140 == codecSelferValueTypeMap1234 {
			yyl2140 := r.ReadMapStart()
			if yyl2140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2140, d)
			}
		} else if yyct2140 == codecSelferValueTypeArray1234 {
			yyl2140 := r.ReadArrayStart()
			if yyl2140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2141Slc
	var yyhl2141 bool = l >= 0
	for yyj2141 := 0; ; yyj2141++ {
		if yyhl2141 {
			if yyj2141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2141Slc = r.DecodeBytes(yys2141Slc, true, true)
		yys2141 := string(yys2141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2141 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2142 := &x.Ingress
				yym2143 := z.DecBinary()
				_ = yym2143
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2142), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2141)
		} // end switch yys2141
	} // end for yyj2141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2144 int
	var yyb2144 bool
	var yyhl2144 bool = l >= 0
	yyj2144++
	if yyhl2144 {
		yyb2144 = yyj2144 > l
	} else {
		yyb2144 = r.CheckBreak()
	}
	if yyb2144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2145 := &x.Ingress
		yym2146 := z.DecBinary()
		_ = yym2146
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2145), d)
		}
	}
	for {
		yyj2144++
		if yyhl2144 {
			yyb2144 = yyj2144 > l
		} else {
			yyb2144 = r.CheckBreak()
		}
		if yyb2144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2147 := z.EncBinary()
		_ = yym2147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2148 := !z.EncBinary()
			yy2arr2148 := z.EncBasicHandle().StructToArray
			var yyq2148 [2]bool
			_, _, _ = yysep2148, yyq2148, yy2arr2148
			const yyr2148 bool = false
			yyq2148[0] = x.IP != ""
			yyq2148[1] = x.Hostname != ""
			var yynn2148 int
			if yyr2148 || yy2arr2148 {
				r.EncodeArrayStart(2)
			} else {
				yynn2148 = 0
				for _, b := range yyq2148 {
					if b {
						yynn2148++
					}
				}
				r.EncodeMapStart(yynn2148)
				yynn2148 = 0
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[0] {
					yym2150 := z.EncBinary()
					_ = yym2150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2151 := z.EncBinary()
					_ = yym2151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2148[1] {
					yym2153 := z.EncBinary()
					_ = yym2153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2148[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2154 := z.EncBinary()
					_ = yym2154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2148 || yy2arr2148 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2156 := r.ContainerType()
		if yyct2156 == codecSelferValueTypeMap1234 {
			yyl2156 := r.ReadMapStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2156, d)
			}
		} else if yyct2156 == codecSelferValueTypeArray1234 {
			yyl2156 := r.ReadArrayStart()
			if yyl2156 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2156, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2157Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2157Slc
	var yyhl2157 bool = l >= 0
	for yyj2157 := 0; ; yyj2157++ {
		if yyhl2157 {
			if yyj2157 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2157Slc = r.DecodeBytes(yys2157Slc, true, true)
		yys2157 := string(yys2157Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2157 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2157)
		} // end switch yys2157
	} // end for yyj2157
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2160 int
	var yyb2160 bool
	var yyhl2160 bool = l >= 0
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2160++
	if yyhl2160 {
		yyb2160 = yyj2160 > l
	} else {
		yyb2160 = r.CheckBreak()
	}
	if yyb2160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2160++
		if yyhl2160 {
			yyb2160 = yyj2160 > l
		} else {
			yyb2160 = r.CheckBreak()
		}
		if yyb2160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2163 := z.EncBinary()
		_ = yym2163
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2164 := !z.EncBinary()
			yy2arr2164 := z.EncBasicHandle().StructToArray
			var yyq2164 [8]bool
			_, _, _ = yysep2164, yyq2164, yy2arr2164
			const yyr2164 bool = false
			yyq2164[1] = len(x.Selector) != 0
			yyq2164[2] = x.ClusterIP != ""
			yyq2164[3] = x.Type != ""
			yyq2164[4] = len(x.ExternalIPs) != 0
			yyq2164[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2164[6] = x.SessionAffinity != ""
			yyq2164[7] = x.LoadBalancerIP != ""
			var yynn2164 int
			if yyr2164 || yy2arr2164 {
				r.EncodeArrayStart(8)
			} else {
				yynn2164 = 1
				for _, b := range yyq2164 {
					if b {
						yynn2164++
					}
				}
				r.EncodeMapStart(yynn2164)
				yynn2164 = 0
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2169 := z.EncBinary()
						_ = yym2169
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2164[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2170 := z.EncBinary()
						_ = yym2170
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[2] {
					yym2172 := z.EncBinary()
					_ = yym2172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2164[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2173 := z.EncBinary()
					_ = yym2173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2164[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2176 := z.EncBinary()
						_ = yym2176
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2164[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2177 := z.EncBinary()
						_ = yym2177
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2179 := z.EncBinary()
						_ = yym2179
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2164[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2180 := z.EncBinary()
						_ = yym2180
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2164[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2164[7] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2164[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2164 || yy2arr2164 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2185 := z.DecBinary()
	_ = yym2185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2186 := r.ContainerType()
		if yyct2186 == codecSelferValueTypeMap1234 {
			yyl2186 := r.ReadMapStart()
			if yyl2186 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2186, d)
			}
		} else if yyct2186 == codecSelferValueTypeArray1234 {
			yyl2186 := r.ReadArrayStart()
			if yyl2186 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2187Slc
	var yyhl2187 bool = l >= 0
	for yyj2187 := 0; ; yyj2187++ {
		if yyhl2187 {
			if yyj2187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2187Slc = r.DecodeBytes(yys2187Slc, true, true)
		yys2187 := string(yys2187Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2187 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2188 := &x.Ports
				yym2189 := z.DecBinary()
				_ = yym2189
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2188), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2190 := &x.Selector
				yym2191 := z.DecBinary()
				_ = yym2191
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2190, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2194 := &x.ExternalIPs
				yym2195 := z.DecBinary()
				_ = yym2195
				if false {
				} else {
					z.F.DecSliceStringX(yyv2194, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2196 := &x.DeprecatedPublicIPs
				yym2197 := z.DecBinary()
				_ = yym2197
				if false {
				} else {
					z.F.DecSliceStringX(yyv2196, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2187)
		} // end switch yys2187
	} // end for yyj2187
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2200 int
	var yyb2200 bool
	var yyhl2200 bool = l >= 0
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2201 := &x.Ports
		yym2202 := z.DecBinary()
		_ = yym2202
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2201), d)
		}
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2203 := &x.Selector
		yym2204 := z.DecBinary()
		_ = yym2204
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2203, false, d)
		}
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2207 := &x.ExternalIPs
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			z.F.DecSliceStringX(yyv2207, false, d)
		}
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2209 := &x.DeprecatedPublicIPs
		yym2210 := z.DecBinary()
		_ = yym2210
		if false {
		} else {
			z.F.DecSliceStringX(yyv2209, false, d)
		}
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2200++
	if yyhl2200 {
		yyb2200 = yyj2200 > l
	} else {
		yyb2200 = r.CheckBreak()
	}
	if yyb2200 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj2200++
		if yyhl2200 {
			yyb2200 = yyj2200 > l
		} else {
			yyb2200 = r.CheckBreak()
		}
		if yyb2200 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2200-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2213 := z.EncBinary()
		_ = yym2213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2214 := !z.EncBinary()
			yy2arr2214 := z.EncBasicHandle().StructToArray
			var yyq2214 [5]bool
			_, _, _ = yysep2214, yyq2214, yy2arr2214
			const yyr2214 bool = false
			yyq2214[0] = x.Name != ""
			yyq2214[1] = x.Protocol != ""
			yyq2214[3] = true
			yyq2214[4] = x.NodePort != 0
			var yynn2214 int
			if yyr2214 || yy2arr2214 {
				r.EncodeArrayStart(5)
			} else {
				yynn2214 = 1
				for _, b := range yyq2214 {
					if b {
						yynn2214++
					}
				}
				r.EncodeMapStart(yynn2214)
				yynn2214 = 0
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[0] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2214[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2214[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2220 := z.EncBinary()
				_ = yym2220
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2221 := z.EncBinary()
				_ = yym2221
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[3] {
					yy2223 := &x.TargetPort
					yym2224 := z.EncBinary()
					_ = yym2224
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2223) {
					} else if !yym2224 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2223)
					} else {
						z.EncFallback(yy2223)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2214[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2225 := &x.TargetPort
					yym2226 := z.EncBinary()
					_ = yym2226
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2225) {
					} else if !yym2226 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2225)
					} else {
						z.EncFallback(yy2225)
					}
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2214[4] {
					yym2228 := z.EncBinary()
					_ = yym2228
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2214[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2214 || yy2arr2214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2230 := z.DecBinary()
	_ = yym2230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2231 := r.ContainerType()
		if yyct2231 == codecSelferValueTypeMap1234 {
			yyl2231 := r.ReadMapStart()
			if yyl2231 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2231, d)
			}
		} else if yyct2231 == codecSelferValueTypeArray1234 {
			yyl2231 := r.ReadArrayStart()
			if yyl2231 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2231, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2232Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2232Slc
	var yyhl2232 bool = l >= 0
	for yyj2232 := 0; ; yyj2232++ {
		if yyhl2232 {
			if yyj2232 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2232Slc = r.DecodeBytes(yys2232Slc, true, true)
		yys2232 := string(yys2232Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2232 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2236 := &x.TargetPort
				yym2237 := z.DecBinary()
				_ = yym2237
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2236) {
				} else if !yym2237 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2236)
				} else {
					z.DecFallback(yyv2236, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2232)
		} // end switch yys2232
	} // end for yyj2232
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2239 int
	var yyb2239 bool
	var yyhl2239 bool = l >= 0
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2243 := &x.TargetPort
		yym2244 := z.DecBinary()
		_ = yym2244
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2243) {
		} else if !yym2244 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2243)
		} else {
			z.DecFallback(yyv2243, false)
		}
	}
	yyj2239++
	if yyhl2239 {
		yyb2239 = yyj2239 > l
	} else {
		yyb2239 = r.CheckBreak()
	}
	if yyb2239 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2239++
		if yyhl2239 {
			yyb2239 = yyj2239 > l
		} else {
			yyb2239 = r.CheckBreak()
		}
		if yyb2239 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2239-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [5]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			yyq2247[0] = x.Kind != ""
			yyq2247[1] = x.APIVersion != ""
			yyq2247[2] = true
			yyq2247[3] = true
			yyq2247[4] = true
			var yynn2247 int
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(5)
			} else {
				yynn2247 = 0
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
				yynn2247 = 0
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[0] {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[1] {
					yym2252 := z.EncBinary()
					_ = yym2252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2253 := z.EncBinary()
					_ = yym2253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[2] {
					yy2255 := &x.ObjectMeta
					yy2255.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2256 := &x.ObjectMeta
					yy2256.CodecEncodeSelf(e)
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[3] {
					yy2258 := &x.Spec
					yy2258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2259 := &x.Spec
					yy2259.CodecEncodeSelf(e)
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[4] {
					yy2261 := &x.Status
					yy2261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2262 := &x.Status
					yy2262.CodecEncodeSelf(e)
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2263 := z.DecBinary()
	_ = yym2263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2264 := r.ContainerType()
		if yyct2264 == codecSelferValueTypeMap1234 {
			yyl2264 := r.ReadMapStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2264, d)
			}
		} else if yyct2264 == codecSelferValueTypeArray1234 {
			yyl2264 := r.ReadArrayStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2265Slc
	var yyhl2265 bool = l >= 0
	for yyj2265 := 0; ; yyj2265++ {
		if yyhl2265 {
			if yyj2265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2265Slc = r.DecodeBytes(yys2265Slc, true, true)
		yys2265 := string(yys2265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2265 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2268 := &x.ObjectMeta
				yyv2268.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2269 := &x.Spec
				yyv2269.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2270 := &x.Status
				yyv2270.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2265)
		} // end switch yys2265
	} // end for yyj2265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2271 int
	var yyb2271 bool
	var yyhl2271 bool = l >= 0
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2274 := &x.ObjectMeta
		yyv2274.CodecDecodeSelf(d)
	}
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2275 := &x.Spec
		yyv2275.CodecDecodeSelf(d)
	}
	yyj2271++
	if yyhl2271 {
		yyb2271 = yyj2271 > l
	} else {
		yyb2271 = r.CheckBreak()
	}
	if yyb2271 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2276 := &x.Status
		yyv2276.CodecDecodeSelf(d)
	}
	for {
		yyj2271++
		if yyhl2271 {
			yyb2271 = yyj2271 > l
		} else {
			yyb2271 = r.CheckBreak()
		}
		if yyb2271 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2271-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2277 := z.EncBinary()
		_ = yym2277
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2278 := !z.EncBinary()
			yy2arr2278 := z.EncBasicHandle().StructToArray
			var yyq2278 [4]bool
			_, _, _ = yysep2278, yyq2278, yy2arr2278
			const yyr2278 bool = false
			yyq2278[0] = x.Kind != ""
			yyq2278[1] = x.APIVersion != ""
			yyq2278[2] = true
			var yynn2278 int
			if yyr2278 || yy2arr2278 {
				r.EncodeArrayStart(4)
			} else {
				yynn2278 = 1
				for _, b := range yyq2278 {
					if b {
						yynn2278++
					}
				}
				r.EncodeMapStart(yynn2278)
				yynn2278 = 0
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[0] {
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2278[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2281 := z.EncBinary()
					_ = yym2281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[1] {
					yym2283 := z.EncBinary()
					_ = yym2283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2278[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2284 := z.EncBinary()
					_ = yym2284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2278[2] {
					yy2286 := &x.ListMeta
					yym2287 := z.EncBinary()
					_ = yym2287
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2286) {
					} else {
						z.EncFallback(yy2286)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2278[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2288 := &x.ListMeta
					yym2289 := z.EncBinary()
					_ = yym2289
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2288) {
					} else {
						z.EncFallback(yy2288)
					}
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2278 || yy2arr2278 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2293 := z.DecBinary()
	_ = yym2293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2294 := r.ContainerType()
		if yyct2294 == codecSelferValueTypeMap1234 {
			yyl2294 := r.ReadMapStart()
			if yyl2294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2294, d)
			}
		} else if yyct2294 == codecSelferValueTypeArray1234 {
			yyl2294 := r.ReadArrayStart()
			if yyl2294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2295Slc
	var yyhl2295 bool = l >= 0
	for yyj2295 := 0; ; yyj2295++ {
		if yyhl2295 {
			if yyj2295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2295Slc = r.DecodeBytes(yys2295Slc, true, true)
		yys2295 := string(yys2295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2295 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2298 := &x.ListMeta
				yym2299 := z.DecBinary()
				_ = yym2299
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2298) {
				} else {
					z.DecFallback(yyv2298, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2300 := &x.Items
				yym2301 := z.DecBinary()
				_ = yym2301
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2300), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2295)
		} // end switch yys2295
	} // end for yyj2295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2302 int
	var yyb2302 bool
	var yyhl2302 bool = l >= 0
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2305 := &x.ListMeta
		yym2306 := z.DecBinary()
		_ = yym2306
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2305) {
		} else {
			z.DecFallback(yyv2305, false)
		}
	}
	yyj2302++
	if yyhl2302 {
		yyb2302 = yyj2302 > l
	} else {
		yyb2302 = r.CheckBreak()
	}
	if yyb2302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2307 := &x.Items
		yym2308 := z.DecBinary()
		_ = yym2308
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2307), d)
		}
	}
	for {
		yyj2302++
		if yyhl2302 {
			yyb2302 = yyj2302 > l
		} else {
			yyb2302 = r.CheckBreak()
		}
		if yyb2302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2309 := z.EncBinary()
		_ = yym2309
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2310 := !z.EncBinary()
			yy2arr2310 := z.EncBasicHandle().StructToArray
			var yyq2310 [5]bool
			_, _, _ = yysep2310, yyq2310, yy2arr2310
			const yyr2310 bool = false
			yyq2310[0] = x.Kind != ""
			yyq2310[1] = x.APIVersion != ""
			yyq2310[2] = true
			yyq2310[3] = len(x.Secrets) != 0
			yyq2310[4] = len(x.ImagePullSecrets) != 0
			var yynn2310 int
			if yyr2310 || yy2arr2310 {
				r.EncodeArrayStart(5)
			} else {
				yynn2310 = 0
				for _, b := range yyq2310 {
					if b {
						yynn2310++
					}
				}
				r.EncodeMapStart(yynn2310)
				yynn2310 = 0
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[0] {
					yym2312 := z.EncBinary()
					_ = yym2312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[1] {
					yym2315 := z.EncBinary()
					_ = yym2315
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2310[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[2] {
					yy2318 := &x.ObjectMeta
					yy2318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2319 := &x.ObjectMeta
					yy2319.CodecEncodeSelf(e)
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[3] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2321 := z.EncBinary()
						_ = yym2321
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2322 := z.EncBinary()
						_ = yym2322
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2310[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2324 := z.EncBinary()
						_ = yym2324
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2310[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2325 := z.EncBinary()
						_ = yym2325
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2310 || yy2arr2310 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2326 := z.DecBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2327 := r.ContainerType()
		if yyct2327 == codecSelferValueTypeMap1234 {
			yyl2327 := r.ReadMapStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2327, d)
			}
		} else if yyct2327 == codecSelferValueTypeArray1234 {
			yyl2327 := r.ReadArrayStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2328Slc
	var yyhl2328 bool = l >= 0
	for yyj2328 := 0; ; yyj2328++ {
		if yyhl2328 {
			if yyj2328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2328Slc = r.DecodeBytes(yys2328Slc, true, true)
		yys2328 := string(yys2328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2328 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2331 := &x.ObjectMeta
				yyv2331.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2332 := &x.Secrets
				yym2333 := z.DecBinary()
				_ = yym2333
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2332), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2334 := &x.ImagePullSecrets
				yym2335 := z.DecBinary()
				_ = yym2335
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2334), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2328)
		} // end switch yys2328
	} // end for yyj2328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2336 int
	var yyb2336 bool
	var yyhl2336 bool = l >= 0
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2339 := &x.ObjectMeta
		yyv2339.CodecDecodeSelf(d)
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2340 := &x.Secrets
		yym2341 := z.DecBinary()
		_ = yym2341
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2340), d)
		}
	}
	yyj2336++
	if yyhl2336 {
		yyb2336 = yyj2336 > l
	} else {
		yyb2336 = r.CheckBreak()
	}
	if yyb2336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2342 := &x.ImagePullSecrets
		yym2343 := z.DecBinary()
		_ = yym2343
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2342), d)
		}
	}
	for {
		yyj2336++
		if yyhl2336 {
			yyb2336 = yyj2336 > l
		} else {
			yyb2336 = r.CheckBreak()
		}
		if yyb2336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2344 := z.EncBinary()
		_ = yym2344
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2345 := !z.EncBinary()
			yy2arr2345 := z.EncBasicHandle().StructToArray
			var yyq2345 [4]bool
			_, _, _ = yysep2345, yyq2345, yy2arr2345
			const yyr2345 bool = false
			yyq2345[0] = x.Kind != ""
			yyq2345[1] = x.APIVersion != ""
			yyq2345[2] = true
			var yynn2345 int
			if yyr2345 || yy2arr2345 {
				r.EncodeArrayStart(4)
			} else {
				yynn2345 = 1
				for _, b := range yyq2345 {
					if b {
						yynn2345++
					}
				}
				r.EncodeMapStart(yynn2345)
				yynn2345 = 0
			}
			if yyr2345 || yy2arr2345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2345[0] {
					yym2347 := z.EncBinary()
					_ = yym2347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2345[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2348 := z.EncBinary()
					_ = yym2348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2345 || yy2arr2345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2345[1] {
					yym2350 := z.EncBinary()
					_ = yym2350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2345[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2345 || yy2arr2345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2345[2] {
					yy2353 := &x.ListMeta
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2353) {
					} else {
						z.EncFallback(yy2353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2345[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2355 := &x.ListMeta
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2355) {
					} else {
						z.EncFallback(yy2355)
					}
				}
			}
			if yyr2345 || yy2arr2345 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2345 || yy2arr2345 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2360 := z.DecBinary()
	_ = yym2360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2361 := r.ContainerType()
		if yyct2361 == codecSelferValueTypeMap1234 {
			yyl2361 := r.ReadMapStart()
			if yyl2361 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2361, d)
			}
		} else if yyct2361 == codecSelferValueTypeArray1234 {
			yyl2361 := r.ReadArrayStart()
			if yyl2361 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2361, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2362Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2362Slc
	var yyhl2362 bool = l >= 0
	for yyj2362 := 0; ; yyj2362++ {
		if yyhl2362 {
			if yyj2362 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2362Slc = r.DecodeBytes(yys2362Slc, true, true)
		yys2362 := string(yys2362Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2362 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2365 := &x.ListMeta
				yym2366 := z.DecBinary()
				_ = yym2366
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2365) {
				} else {
					z.DecFallback(yyv2365, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2367 := &x.Items
				yym2368 := z.DecBinary()
				_ = yym2368
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2367), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2362)
		} // end switch yys2362
	} // end for yyj2362
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2369 int
	var yyb2369 bool
	var yyhl2369 bool = l >= 0
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2372 := &x.ListMeta
		yym2373 := z.DecBinary()
		_ = yym2373
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2372) {
		} else {
			z.DecFallback(yyv2372, false)
		}
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2374 := &x.Items
		yym2375 := z.DecBinary()
		_ = yym2375
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2374), d)
		}
	}
	for {
		yyj2369++
		if yyhl2369 {
			yyb2369 = yyj2369 > l
		} else {
			yyb2369 = r.CheckBreak()
		}
		if yyb2369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2376 := z.EncBinary()
		_ = yym2376
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2377 := !z.EncBinary()
			yy2arr2377 := z.EncBasicHandle().StructToArray
			var yyq2377 [4]bool
			_, _, _ = yysep2377, yyq2377, yy2arr2377
			const yyr2377 bool = false
			yyq2377[0] = x.Kind != ""
			yyq2377[1] = x.APIVersion != ""
			yyq2377[2] = true
			var yynn2377 int
			if yyr2377 || yy2arr2377 {
				r.EncodeArrayStart(4)
			} else {
				yynn2377 = 1
				for _, b := range yyq2377 {
					if b {
						yynn2377++
					}
				}
				r.EncodeMapStart(yynn2377)
				yynn2377 = 0
			}
			if yyr2377 || yy2arr2377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2377[0] {
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2377[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2380 := z.EncBinary()
					_ = yym2380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2377 || yy2arr2377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2377[1] {
					yym2382 := z.EncBinary()
					_ = yym2382
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2377[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2377 || yy2arr2377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2377[2] {
					yy2385 := &x.ObjectMeta
					yy2385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2377[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2386 := &x.ObjectMeta
					yy2386.CodecEncodeSelf(e)
				}
			}
			if yyr2377 || yy2arr2377 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2377 || yy2arr2377 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2390 := z.DecBinary()
	_ = yym2390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2391 := r.ContainerType()
		if yyct2391 == codecSelferValueTypeMap1234 {
			yyl2391 := r.ReadMapStart()
			if yyl2391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2391, d)
			}
		} else if yyct2391 == codecSelferValueTypeArray1234 {
			yyl2391 := r.ReadArrayStart()
			if yyl2391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2392Slc
	var yyhl2392 bool = l >= 0
	for yyj2392 := 0; ; yyj2392++ {
		if yyhl2392 {
			if yyj2392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2392Slc = r.DecodeBytes(yys2392Slc, true, true)
		yys2392 := string(yys2392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2395 := &x.ObjectMeta
				yyv2395.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2396 := &x.Subsets
				yym2397 := z.DecBinary()
				_ = yym2397
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2396), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2392)
		} // end switch yys2392
	} // end for yyj2392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2398 int
	var yyb2398 bool
	var yyhl2398 bool = l >= 0
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2401 := &x.ObjectMeta
		yyv2401.CodecDecodeSelf(d)
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2402 := &x.Subsets
		yym2403 := z.DecBinary()
		_ = yym2403
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2402), d)
		}
	}
	for {
		yyj2398++
		if yyhl2398 {
			yyb2398 = yyj2398 > l
		} else {
			yyb2398 = r.CheckBreak()
		}
		if yyb2398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2404 := z.EncBinary()
		_ = yym2404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2405 := !z.EncBinary()
			yy2arr2405 := z.EncBasicHandle().StructToArray
			var yyq2405 [3]bool
			_, _, _ = yysep2405, yyq2405, yy2arr2405
			const yyr2405 bool = false
			yyq2405[0] = len(x.Addresses) != 0
			yyq2405[1] = len(x.NotReadyAddresses) != 0
			yyq2405[2] = len(x.Ports) != 0
			var yynn2405 int
			if yyr2405 || yy2arr2405 {
				r.EncodeArrayStart(3)
			} else {
				yynn2405 = 0
				for _, b := range yyq2405 {
					if b {
						yynn2405++
					}
				}
				r.EncodeMapStart(yynn2405)
				yynn2405 = 0
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2407 := z.EncBinary()
						_ = yym2407
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2408 := z.EncBinary()
						_ = yym2408
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2410 := z.EncBinary()
						_ = yym2410
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2411 := z.EncBinary()
						_ = yym2411
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2413 := z.EncBinary()
						_ = yym2413
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2414 := z.EncBinary()
						_ = yym2414
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2415 := z.DecBinary()
	_ = yym2415
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2416 := r.ContainerType()
		if yyct2416 == codecSelferValueTypeMap1234 {
			yyl2416 := r.ReadMapStart()
			if yyl2416 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2416, d)
			}
		} else if yyct2416 == codecSelferValueTypeArray1234 {
			yyl2416 := r.ReadArrayStart()
			if yyl2416 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2416, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2417Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2417Slc
	var yyhl2417 bool = l >= 0
	for yyj2417 := 0; ; yyj2417++ {
		if yyhl2417 {
			if yyj2417 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2417Slc = r.DecodeBytes(yys2417Slc, true, true)
		yys2417 := string(yys2417Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2417 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2418 := &x.Addresses
				yym2419 := z.DecBinary()
				_ = yym2419
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2418), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2420 := &x.NotReadyAddresses
				yym2421 := z.DecBinary()
				_ = yym2421
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2420), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2422 := &x.Ports
				yym2423 := z.DecBinary()
				_ = yym2423
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2422), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2417)
		} // end switch yys2417
	} // end for yyj2417
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2424 int
	var yyb2424 bool
	var yyhl2424 bool = l >= 0
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2425 := &x.Addresses
		yym2426 := z.DecBinary()
		_ = yym2426
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2425), d)
		}
	}
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2427 := &x.NotReadyAddresses
		yym2428 := z.DecBinary()
		_ = yym2428
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2427), d)
		}
	}
	yyj2424++
	if yyhl2424 {
		yyb2424 = yyj2424 > l
	} else {
		yyb2424 = r.CheckBreak()
	}
	if yyb2424 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2429 := &x.Ports
		yym2430 := z.DecBinary()
		_ = yym2430
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2429), d)
		}
	}
	for {
		yyj2424++
		if yyhl2424 {
			yyb2424 = yyj2424 > l
		} else {
			yyb2424 = r.CheckBreak()
		}
		if yyb2424 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2424-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2431 := z.EncBinary()
		_ = yym2431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2432 := !z.EncBinary()
			yy2arr2432 := z.EncBasicHandle().StructToArray
			var yyq2432 [2]bool
			_, _, _ = yysep2432, yyq2432, yy2arr2432
			const yyr2432 bool = false
			yyq2432[1] = x.TargetRef != nil
			var yynn2432 int
			if yyr2432 || yy2arr2432 {
				r.EncodeArrayStart(2)
			} else {
				yynn2432 = 1
				for _, b := range yyq2432 {
					if b {
						yynn2432++
					}
				}
				r.EncodeMapStart(yynn2432)
				yynn2432 = 0
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2434 := z.EncBinary()
				_ = yym2434
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2435 := z.EncBinary()
				_ = yym2435
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2432[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2432 || yy2arr2432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2437 := z.DecBinary()
	_ = yym2437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2438 := r.ContainerType()
		if yyct2438 == codecSelferValueTypeMap1234 {
			yyl2438 := r.ReadMapStart()
			if yyl2438 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2438, d)
			}
		} else if yyct2438 == codecSelferValueTypeArray1234 {
			yyl2438 := r.ReadArrayStart()
			if yyl2438 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2439Slc
	var yyhl2439 bool = l >= 0
	for yyj2439 := 0; ; yyj2439++ {
		if yyhl2439 {
			if yyj2439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2439Slc = r.DecodeBytes(yys2439Slc, true, true)
		yys2439 := string(yys2439Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2439 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2439)
		} // end switch yys2439
	} // end for yyj2439
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2442 int
	var yyb2442 bool
	var yyhl2442 bool = l >= 0
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2442++
	if yyhl2442 {
		yyb2442 = yyj2442 > l
	} else {
		yyb2442 = r.CheckBreak()
	}
	if yyb2442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2442++
		if yyhl2442 {
			yyb2442 = yyj2442 > l
		} else {
			yyb2442 = r.CheckBreak()
		}
		if yyb2442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2445 := z.EncBinary()
		_ = yym2445
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2446 := !z.EncBinary()
			yy2arr2446 := z.EncBasicHandle().StructToArray
			var yyq2446 [3]bool
			_, _, _ = yysep2446, yyq2446, yy2arr2446
			const yyr2446 bool = false
			yyq2446[0] = x.Name != ""
			yyq2446[2] = x.Protocol != ""
			var yynn2446 int
			if yyr2446 || yy2arr2446 {
				r.EncodeArrayStart(3)
			} else {
				yynn2446 = 1
				for _, b := range yyq2446 {
					if b {
						yynn2446++
					}
				}
				r.EncodeMapStart(yynn2446)
				yynn2446 = 0
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[0] {
					yym2448 := z.EncBinary()
					_ = yym2448
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2451 := z.EncBinary()
				_ = yym2451
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2452 := z.EncBinary()
				_ = yym2452
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2446[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2446[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2446 || yy2arr2446 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2454 := z.DecBinary()
	_ = yym2454
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2455 := r.ContainerType()
		if yyct2455 == codecSelferValueTypeMap1234 {
			yyl2455 := r.ReadMapStart()
			if yyl2455 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2455, d)
			}
		} else if yyct2455 == codecSelferValueTypeArray1234 {
			yyl2455 := r.ReadArrayStart()
			if yyl2455 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2455, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2456Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2456Slc
	var yyhl2456 bool = l >= 0
	for yyj2456 := 0; ; yyj2456++ {
		if yyhl2456 {
			if yyj2456 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2456Slc = r.DecodeBytes(yys2456Slc, true, true)
		yys2456 := string(yys2456Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2456 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2456)
		} // end switch yys2456
	} // end for yyj2456
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2460 int
	var yyb2460 bool
	var yyhl2460 bool = l >= 0
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2460++
	if yyhl2460 {
		yyb2460 = yyj2460 > l
	} else {
		yyb2460 = r.CheckBreak()
	}
	if yyb2460 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2460++
		if yyhl2460 {
			yyb2460 = yyj2460 > l
		} else {
			yyb2460 = r.CheckBreak()
		}
		if yyb2460 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2460-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2464 := z.EncBinary()
		_ = yym2464
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2465 := !z.EncBinary()
			yy2arr2465 := z.EncBasicHandle().StructToArray
			var yyq2465 [4]bool
			_, _, _ = yysep2465, yyq2465, yy2arr2465
			const yyr2465 bool = false
			yyq2465[0] = x.Kind != ""
			yyq2465[1] = x.APIVersion != ""
			yyq2465[2] = true
			var yynn2465 int
			if yyr2465 || yy2arr2465 {
				r.EncodeArrayStart(4)
			} else {
				yynn2465 = 1
				for _, b := range yyq2465 {
					if b {
						yynn2465++
					}
				}
				r.EncodeMapStart(yynn2465)
				yynn2465 = 0
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[0] {
					yym2467 := z.EncBinary()
					_ = yym2467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2465[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2468 := z.EncBinary()
					_ = yym2468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[1] {
					yym2470 := z.EncBinary()
					_ = yym2470
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2465[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2471 := z.EncBinary()
					_ = yym2471
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[2] {
					yy2473 := &x.ListMeta
					yym2474 := z.EncBinary()
					_ = yym2474
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2473) {
					} else {
						z.EncFallback(yy2473)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2465[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2475 := &x.ListMeta
					yym2476 := z.EncBinary()
					_ = yym2476
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2475) {
					} else {
						z.EncFallback(yy2475)
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2480 := z.DecBinary()
	_ = yym2480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2481 := r.ContainerType()
		if yyct2481 == codecSelferValueTypeMap1234 {
			yyl2481 := r.ReadMapStart()
			if yyl2481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2481, d)
			}
		} else if yyct2481 == codecSelferValueTypeArray1234 {
			yyl2481 := r.ReadArrayStart()
			if yyl2481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2482Slc
	var yyhl2482 bool = l >= 0
	for yyj2482 := 0; ; yyj2482++ {
		if yyhl2482 {
			if yyj2482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2482Slc = r.DecodeBytes(yys2482Slc, true, true)
		yys2482 := string(yys2482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2482 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2485 := &x.ListMeta
				yym2486 := z.DecBinary()
				_ = yym2486
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2485) {
				} else {
					z.DecFallback(yyv2485, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2487 := &x.Items
				yym2488 := z.DecBinary()
				_ = yym2488
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2487), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2482)
		} // end switch yys2482
	} // end for yyj2482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2489 int
	var yyb2489 bool
	var yyhl2489 bool = l >= 0
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2492 := &x.ListMeta
		yym2493 := z.DecBinary()
		_ = yym2493
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2492) {
		} else {
			z.DecFallback(yyv2492, false)
		}
	}
	yyj2489++
	if yyhl2489 {
		yyb2489 = yyj2489 > l
	} else {
		yyb2489 = r.CheckBreak()
	}
	if yyb2489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2494 := &x.Items
		yym2495 := z.DecBinary()
		_ = yym2495
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2494), d)
		}
	}
	for {
		yyj2489++
		if yyhl2489 {
			yyb2489 = yyj2489 > l
		} else {
			yyb2489 = r.CheckBreak()
		}
		if yyb2489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2496 := z.EncBinary()
		_ = yym2496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2497 := !z.EncBinary()
			yy2arr2497 := z.EncBasicHandle().StructToArray
			var yyq2497 [4]bool
			_, _, _ = yysep2497, yyq2497, yy2arr2497
			const yyr2497 bool = false
			yyq2497[0] = x.PodCIDR != ""
			yyq2497[1] = x.ExternalID != ""
			yyq2497[2] = x.ProviderID != ""
			yyq2497[3] = x.Unschedulable != false
			var yynn2497 int
			if yyr2497 || yy2arr2497 {
				r.EncodeArrayStart(4)
			} else {
				yynn2497 = 0
				for _, b := range yyq2497 {
					if b {
						yynn2497++
					}
				}
				r.EncodeMapStart(yynn2497)
				yynn2497 = 0
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[0] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[1] {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[2] {
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[3] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2497[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2510 := z.DecBinary()
	_ = yym2510
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2511 := r.ContainerType()
		if yyct2511 == codecSelferValueTypeMap1234 {
			yyl2511 := r.ReadMapStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2511, d)
			}
		} else if yyct2511 == codecSelferValueTypeArray1234 {
			yyl2511 := r.ReadArrayStart()
			if yyl2511 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2511, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2512Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2512Slc
	var yyhl2512 bool = l >= 0
	for yyj2512 := 0; ; yyj2512++ {
		if yyhl2512 {
			if yyj2512 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2512Slc = r.DecodeBytes(yys2512Slc, true, true)
		yys2512 := string(yys2512Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2512 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2512)
		} // end switch yys2512
	} // end for yyj2512
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2517 int
	var yyb2517 bool
	var yyhl2517 bool = l >= 0
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2517++
	if yyhl2517 {
		yyb2517 = yyj2517 > l
	} else {
		yyb2517 = r.CheckBreak()
	}
	if yyb2517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2517++
		if yyhl2517 {
			yyb2517 = yyj2517 > l
		} else {
			yyb2517 = r.CheckBreak()
		}
		if yyb2517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2522 := z.EncBinary()
		_ = yym2522
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2523 := !z.EncBinary()
			yy2arr2523 := z.EncBasicHandle().StructToArray
			var yyq2523 [1]bool
			_, _, _ = yysep2523, yyq2523, yy2arr2523
			const yyr2523 bool = false
			var yynn2523 int
			if yyr2523 || yy2arr2523 {
				r.EncodeArrayStart(1)
			} else {
				yynn2523 = 1
				for _, b := range yyq2523 {
					if b {
						yynn2523++
					}
				}
				r.EncodeMapStart(yynn2523)
				yynn2523 = 0
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2525 := z.EncBinary()
				_ = yym2525
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2526 := z.EncBinary()
				_ = yym2526
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2523 || yy2arr2523 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2527 := z.DecBinary()
	_ = yym2527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2528 := r.ContainerType()
		if yyct2528 == codecSelferValueTypeMap1234 {
			yyl2528 := r.ReadMapStart()
			if yyl2528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2528, d)
			}
		} else if yyct2528 == codecSelferValueTypeArray1234 {
			yyl2528 := r.ReadArrayStart()
			if yyl2528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2529Slc
	var yyhl2529 bool = l >= 0
	for yyj2529 := 0; ; yyj2529++ {
		if yyhl2529 {
			if yyj2529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2529Slc = r.DecodeBytes(yys2529Slc, true, true)
		yys2529 := string(yys2529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2529 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2529)
		} // end switch yys2529
	} // end for yyj2529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2531 int
	var yyb2531 bool
	var yyhl2531 bool = l >= 0
	yyj2531++
	if yyhl2531 {
		yyb2531 = yyj2531 > l
	} else {
		yyb2531 = r.CheckBreak()
	}
	if yyb2531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2531++
		if yyhl2531 {
			yyb2531 = yyj2531 > l
		} else {
			yyb2531 = r.CheckBreak()
		}
		if yyb2531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2533 := z.EncBinary()
		_ = yym2533
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2534 := !z.EncBinary()
			yy2arr2534 := z.EncBasicHandle().StructToArray
			var yyq2534 [1]bool
			_, _, _ = yysep2534, yyq2534, yy2arr2534
			const yyr2534 bool = false
			yyq2534[0] = true
			var yynn2534 int
			if yyr2534 || yy2arr2534 {
				r.EncodeArrayStart(1)
			} else {
				yynn2534 = 0
				for _, b := range yyq2534 {
					if b {
						yynn2534++
					}
				}
				r.EncodeMapStart(yynn2534)
				yynn2534 = 0
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2534[0] {
					yy2536 := &x.KubeletEndpoint
					yy2536.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2534[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2537 := &x.KubeletEndpoint
					yy2537.CodecEncodeSelf(e)
				}
			}
			if yyr2534 || yy2arr2534 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2538 := z.DecBinary()
	_ = yym2538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2539 := r.ContainerType()
		if yyct2539 == codecSelferValueTypeMap1234 {
			yyl2539 := r.ReadMapStart()
			if yyl2539 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2539, d)
			}
		} else if yyct2539 == codecSelferValueTypeArray1234 {
			yyl2539 := r.ReadArrayStart()
			if yyl2539 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2539, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2540Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2540Slc
	var yyhl2540 bool = l >= 0
	for yyj2540 := 0; ; yyj2540++ {
		if yyhl2540 {
			if yyj2540 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2540Slc = r.DecodeBytes(yys2540Slc, true, true)
		yys2540 := string(yys2540Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2540 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2541 := &x.KubeletEndpoint
				yyv2541.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2540)
		} // end switch yys2540
	} // end for yyj2540
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2542 int
	var yyb2542 bool
	var yyhl2542 bool = l >= 0
	yyj2542++
	if yyhl2542 {
		yyb2542 = yyj2542 > l
	} else {
		yyb2542 = r.CheckBreak()
	}
	if yyb2542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2543 := &x.KubeletEndpoint
		yyv2543.CodecDecodeSelf(d)
	}
	for {
		yyj2542++
		if yyhl2542 {
			yyb2542 = yyj2542 > l
		} else {
			yyb2542 = r.CheckBreak()
		}
		if yyb2542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2544 := z.EncBinary()
		_ = yym2544
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2545 := !z.EncBinary()
			yy2arr2545 := z.EncBasicHandle().StructToArray
			var yyq2545 [8]bool
			_, _, _ = yysep2545, yyq2545, yy2arr2545
			const yyr2545 bool = false
			var yynn2545 int
			if yyr2545 || yy2arr2545 {
				r.EncodeArrayStart(8)
			} else {
				yynn2545 = 8
				for _, b := range yyq2545 {
					if b {
						yynn2545++
					}
				}
				r.EncodeMapStart(yynn2545)
				yynn2545 = 0
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2547 := z.EncBinary()
				_ = yym2547
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2548 := z.EncBinary()
				_ = yym2548
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2550 := z.EncBinary()
				_ = yym2550
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2551 := z.EncBinary()
				_ = yym2551
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2553 := z.EncBinary()
				_ = yym2553
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2554 := z.EncBinary()
				_ = yym2554
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2556 := z.EncBinary()
				_ = yym2556
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2557 := z.EncBinary()
				_ = yym2557
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2559 := z.EncBinary()
				_ = yym2559
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2560 := z.EncBinary()
				_ = yym2560
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2562 := z.EncBinary()
				_ = yym2562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2563 := z.EncBinary()
				_ = yym2563
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2565 := z.EncBinary()
				_ = yym2565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2566 := z.EncBinary()
				_ = yym2566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2568 := z.EncBinary()
				_ = yym2568
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2569 := z.EncBinary()
				_ = yym2569
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2545 || yy2arr2545 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2570 := z.DecBinary()
	_ = yym2570
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2571 := r.ContainerType()
		if yyct2571 == codecSelferValueTypeMap1234 {
			yyl2571 := r.ReadMapStart()
			if yyl2571 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2571, d)
			}
		} else if yyct2571 == codecSelferValueTypeArray1234 {
			yyl2571 := r.ReadArrayStart()
			if yyl2571 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2571, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2572Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2572Slc
	var yyhl2572 bool = l >= 0
	for yyj2572 := 0; ; yyj2572++ {
		if yyhl2572 {
			if yyj2572 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2572Slc = r.DecodeBytes(yys2572Slc, true, true)
		yys2572 := string(yys2572Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2572 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2572)
		} // end switch yys2572
	} // end for yyj2572
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2581 int
	var yyb2581 bool
	var yyhl2581 bool = l >= 0
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2581++
	if yyhl2581 {
		yyb2581 = yyj2581 > l
	} else {
		yyb2581 = r.CheckBreak()
	}
	if yyb2581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2581++
		if yyhl2581 {
			yyb2581 = yyj2581 > l
		} else {
			yyb2581 = r.CheckBreak()
		}
		if yyb2581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2590 := z.EncBinary()
		_ = yym2590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2591 := !z.EncBinary()
			yy2arr2591 := z.EncBasicHandle().StructToArray
			var yyq2591 [8]bool
			_, _, _ = yysep2591, yyq2591, yy2arr2591
			const yyr2591 bool = false
			yyq2591[0] = len(x.Capacity) != 0
			yyq2591[1] = len(x.Allocatable) != 0
			yyq2591[2] = x.Phase != ""
			yyq2591[3] = len(x.Conditions) != 0
			yyq2591[4] = len(x.Addresses) != 0
			yyq2591[5] = true
			yyq2591[6] = true
			var yynn2591 int
			if yyr2591 || yy2arr2591 {
				r.EncodeArrayStart(8)
			} else {
				yynn2591 = 1
				for _, b := range yyq2591 {
					if b {
						yynn2591++
					}
				}
				r.EncodeMapStart(yynn2591)
				yynn2591 = 0
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2596 := z.EncBinary()
						_ = yym2596
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2597 := z.EncBinary()
						_ = yym2597
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2599 := z.EncBinary()
						_ = yym2599
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2600 := z.EncBinary()
						_ = yym2600
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[5] {
					yy2602 := &x.DaemonEndpoints
					yy2602.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2603 := &x.DaemonEndpoints
					yy2603.CodecEncodeSelf(e)
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[6] {
					yy2605 := &x.NodeInfo
					yy2605.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2591[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2606 := &x.NodeInfo
					yy2606.CodecEncodeSelf(e)
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2608 := z.EncBinary()
					_ = yym2608
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2609 := z.EncBinary()
					_ = yym2609
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2610 := z.DecBinary()
	_ = yym2610
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2611 := r.ContainerType()
		if yyct2611 == codecSelferValueTypeMap1234 {
			yyl2611 := r.ReadMapStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2611, d)
			}
		} else if yyct2611 == codecSelferValueTypeArray1234 {
			yyl2611 := r.ReadArrayStart()
			if yyl2611 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2611, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2612Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2612Slc
	var yyhl2612 bool = l >= 0
	for yyj2612 := 0; ; yyj2612++ {
		if yyhl2612 {
			if yyj2612 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2612Slc = r.DecodeBytes(yys2612Slc, true, true)
		yys2612 := string(yys2612Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2612 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2613 := &x.Capacity
				yyv2613.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2614 := &x.Allocatable
				yyv2614.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2616 := &x.Conditions
				yym2617 := z.DecBinary()
				_ = yym2617
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2616), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2618 := &x.Addresses
				yym2619 := z.DecBinary()
				_ = yym2619
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2618), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2620 := &x.DaemonEndpoints
				yyv2620.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2621 := &x.NodeInfo
				yyv2621.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2622 := &x.Images
				yym2623 := z.DecBinary()
				_ = yym2623
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2622), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2612)
		} // end switch yys2612
	} // end for yyj2612
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2624 int
	var yyb2624 bool
	var yyhl2624 bool = l >= 0
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2625 := &x.Capacity
		yyv2625.CodecDecodeSelf(d)
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2626 := &x.Allocatable
		yyv2626.CodecDecodeSelf(d)
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2628 := &x.Conditions
		yym2629 := z.DecBinary()
		_ = yym2629
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2628), d)
		}
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2630 := &x.Addresses
		yym2631 := z.DecBinary()
		_ = yym2631
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2630), d)
		}
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2632 := &x.DaemonEndpoints
		yyv2632.CodecDecodeSelf(d)
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2633 := &x.NodeInfo
		yyv2633.CodecDecodeSelf(d)
	}
	yyj2624++
	if yyhl2624 {
		yyb2624 = yyj2624 > l
	} else {
		yyb2624 = r.CheckBreak()
	}
	if yyb2624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2634 := &x.Images
		yym2635 := z.DecBinary()
		_ = yym2635
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2634), d)
		}
	}
	for {
		yyj2624++
		if yyhl2624 {
			yyb2624 = yyj2624 > l
		} else {
			yyb2624 = r.CheckBreak()
		}
		if yyb2624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2636 := z.EncBinary()
		_ = yym2636
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2637 := !z.EncBinary()
			yy2arr2637 := z.EncBasicHandle().StructToArray
			var yyq2637 [2]bool
			_, _, _ = yysep2637, yyq2637, yy2arr2637
			const yyr2637 bool = false
			yyq2637[1] = x.Size != 0
			var yynn2637 int
			if yyr2637 || yy2arr2637 {
				r.EncodeArrayStart(2)
			} else {
				yynn2637 = 1
				for _, b := range yyq2637 {
					if b {
						yynn2637++
					}
				}
				r.EncodeMapStart(yynn2637)
				yynn2637 = 0
			}
			if yyr2637 || yy2arr2637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2640 := z.EncBinary()
					_ = yym2640
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2637 || yy2arr2637 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2637[1] {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2637[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2643 := z.EncBinary()
					_ = yym2643
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2637 || yy2arr2637 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2644 := z.DecBinary()
	_ = yym2644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2645 := r.ContainerType()
		if yyct2645 == codecSelferValueTypeMap1234 {
			yyl2645 := r.ReadMapStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2645, d)
			}
		} else if yyct2645 == codecSelferValueTypeArray1234 {
			yyl2645 := r.ReadArrayStart()
			if yyl2645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2646Slc
	var yyhl2646 bool = l >= 0
	for yyj2646 := 0; ; yyj2646++ {
		if yyhl2646 {
			if yyj2646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2646Slc = r.DecodeBytes(yys2646Slc, true, true)
		yys2646 := string(yys2646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2646 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2647 := &x.RepoTags
				yym2648 := z.DecBinary()
				_ = yym2648
				if false {
				} else {
					z.F.DecSliceStringX(yyv2647, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2646)
		} // end switch yys2646
	} // end for yyj2646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2650 int
	var yyb2650 bool
	var yyhl2650 bool = l >= 0
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2651 := &x.RepoTags
		yym2652 := z.DecBinary()
		_ = yym2652
		if false {
		} else {
			z.F.DecSliceStringX(yyv2651, false, d)
		}
	}
	yyj2650++
	if yyhl2650 {
		yyb2650 = yyj2650 > l
	} else {
		yyb2650 = r.CheckBreak()
	}
	if yyb2650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2650++
		if yyhl2650 {
			yyb2650 = yyj2650 > l
		} else {
			yyb2650 = r.CheckBreak()
		}
		if yyb2650 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2650-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2654 := z.EncBinary()
	_ = yym2654
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2655 := z.DecBinary()
	_ = yym2655
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2656 := z.EncBinary()
	_ = yym2656
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2657 := z.DecBinary()
	_ = yym2657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2658 := z.EncBinary()
		_ = yym2658
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2659 := !z.EncBinary()
			yy2arr2659 := z.EncBasicHandle().StructToArray
			var yyq2659 [6]bool
			_, _, _ = yysep2659, yyq2659, yy2arr2659
			const yyr2659 bool = false
			yyq2659[2] = true
			yyq2659[3] = true
			yyq2659[4] = x.Reason != ""
			yyq2659[5] = x.Message != ""
			var yynn2659 int
			if yyr2659 || yy2arr2659 {
				r.EncodeArrayStart(6)
			} else {
				yynn2659 = 2
				for _, b := range yyq2659 {
					if b {
						yynn2659++
					}
				}
				r.EncodeMapStart(yynn2659)
				yynn2659 = 0
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[2] {
					yy2663 := &x.LastHeartbeatTime
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2663) {
					} else if yym2664 {
						z.EncBinaryMarshal(yy2663)
					} else if !yym2664 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2663)
					} else {
						z.EncFallback(yy2663)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2659[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2665 := &x.LastHeartbeatTime
					yym2666 := z.EncBinary()
					_ = yym2666
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2665) {
					} else if yym2666 {
						z.EncBinaryMarshal(yy2665)
					} else if !yym2666 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2665)
					} else {
						z.EncFallback(yy2665)
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[3] {
					yy2668 := &x.LastTransitionTime
					yym2669 := z.EncBinary()
					_ = yym2669
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2668) {
					} else if yym2669 {
						z.EncBinaryMarshal(yy2668)
					} else if !yym2669 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2668)
					} else {
						z.EncFallback(yy2668)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2659[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2670 := &x.LastTransitionTime
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2670) {
					} else if yym2671 {
						z.EncBinaryMarshal(yy2670)
					} else if !yym2671 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2670)
					} else {
						z.EncFallback(yy2670)
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[4] {
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2659[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2674 := z.EncBinary()
					_ = yym2674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2659[5] {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2659[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2677 := z.EncBinary()
					_ = yym2677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2659 || yy2arr2659 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2678 := z.DecBinary()
	_ = yym2678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2679 := r.ContainerType()
		if yyct2679 == codecSelferValueTypeMap1234 {
			yyl2679 := r.ReadMapStart()
			if yyl2679 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2679, d)
			}
		} else if yyct2679 == codecSelferValueTypeArray1234 {
			yyl2679 := r.ReadArrayStart()
			if yyl2679 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2679, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2680Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2680Slc
	var yyhl2680 bool = l >= 0
	for yyj2680 := 0; ; yyj2680++ {
		if yyhl2680 {
			if yyj2680 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2680Slc = r.DecodeBytes(yys2680Slc, true, true)
		yys2680 := string(yys2680Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2680 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2683 := &x.LastHeartbeatTime
				yym2684 := z.DecBinary()
				_ = yym2684
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2683) {
				} else if yym2684 {
					z.DecBinaryUnmarshal(yyv2683)
				} else if !yym2684 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2683)
				} else {
					z.DecFallback(yyv2683, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2685 := &x.LastTransitionTime
				yym2686 := z.DecBinary()
				_ = yym2686
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2685) {
				} else if yym2686 {
					z.DecBinaryUnmarshal(yyv2685)
				} else if !yym2686 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2685)
				} else {
					z.DecFallback(yyv2685, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2680)
		} // end switch yys2680
	} // end for yyj2680
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2689 int
	var yyb2689 bool
	var yyhl2689 bool = l >= 0
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2692 := &x.LastHeartbeatTime
		yym2693 := z.DecBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2692) {
		} else if yym2693 {
			z.DecBinaryUnmarshal(yyv2692)
		} else if !yym2693 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2692)
		} else {
			z.DecFallback(yyv2692, false)
		}
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2694 := &x.LastTransitionTime
		yym2695 := z.DecBinary()
		_ = yym2695
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2694) {
		} else if yym2695 {
			z.DecBinaryUnmarshal(yyv2694)
		} else if !yym2695 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2694)
		} else {
			z.DecFallback(yyv2694, false)
		}
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2689++
	if yyhl2689 {
		yyb2689 = yyj2689 > l
	} else {
		yyb2689 = r.CheckBreak()
	}
	if yyb2689 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2689++
		if yyhl2689 {
			yyb2689 = yyj2689 > l
		} else {
			yyb2689 = r.CheckBreak()
		}
		if yyb2689 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2689-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2698 := z.EncBinary()
	_ = yym2698
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2699 := z.DecBinary()
	_ = yym2699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2700 := z.EncBinary()
		_ = yym2700
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2701 := !z.EncBinary()
			yy2arr2701 := z.EncBasicHandle().StructToArray
			var yyq2701 [2]bool
			_, _, _ = yysep2701, yyq2701, yy2arr2701
			const yyr2701 bool = false
			var yynn2701 int
			if yyr2701 || yy2arr2701 {
				r.EncodeArrayStart(2)
			} else {
				yynn2701 = 2
				for _, b := range yyq2701 {
					if b {
						yynn2701++
					}
				}
				r.EncodeMapStart(yynn2701)
				yynn2701 = 0
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2704 := z.EncBinary()
				_ = yym2704
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2705 := z.EncBinary()
				_ = yym2705
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2701 || yy2arr2701 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2706 := z.DecBinary()
	_ = yym2706
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2707 := r.ContainerType()
		if yyct2707 == codecSelferValueTypeMap1234 {
			yyl2707 := r.ReadMapStart()
			if yyl2707 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2707, d)
			}
		} else if yyct2707 == codecSelferValueTypeArray1234 {
			yyl2707 := r.ReadArrayStart()
			if yyl2707 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2707, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2708Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2708Slc
	var yyhl2708 bool = l >= 0
	for yyj2708 := 0; ; yyj2708++ {
		if yyhl2708 {
			if yyj2708 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2708Slc = r.DecodeBytes(yys2708Slc, true, true)
		yys2708 := string(yys2708Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2708 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2708)
		} // end switch yys2708
	} // end for yyj2708
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2711 int
	var yyb2711 bool
	var yyhl2711 bool = l >= 0
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2711++
	if yyhl2711 {
		yyb2711 = yyj2711 > l
	} else {
		yyb2711 = r.CheckBreak()
	}
	if yyb2711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2711++
		if yyhl2711 {
			yyb2711 = yyj2711 > l
		} else {
			yyb2711 = r.CheckBreak()
		}
		if yyb2711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2714 := z.EncBinary()
	_ = yym2714
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2715 := z.DecBinary()
	_ = yym2715
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2716 := z.EncBinary()
		_ = yym2716
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2717 := z.DecBinary()
	_ = yym2717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2718 := z.EncBinary()
		_ = yym2718
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2719 := !z.EncBinary()
			yy2arr2719 := z.EncBasicHandle().StructToArray
			var yyq2719 [5]bool
			_, _, _ = yysep2719, yyq2719, yy2arr2719
			const yyr2719 bool = false
			yyq2719[0] = x.Kind != ""
			yyq2719[1] = x.APIVersion != ""
			yyq2719[2] = true
			yyq2719[3] = true
			yyq2719[4] = true
			var yynn2719 int
			if yyr2719 || yy2arr2719 {
				r.EncodeArrayStart(5)
			} else {
				yynn2719 = 0
				for _, b := range yyq2719 {
					if b {
						yynn2719++
					}
				}
				r.EncodeMapStart(yynn2719)
				yynn2719 = 0
			}
			if yyr2719 || yy2arr2719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2719[0] {
					yym2721 := z.EncBinary()
					_ = yym2721
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2719[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2722 := z.EncBinary()
					_ = yym2722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2719 || yy2arr2719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2719[1] {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2719[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2719 || yy2arr2719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2719[2] {
					yy2727 := &x.ObjectMeta
					yy2727.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2719[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2728 := &x.ObjectMeta
					yy2728.CodecEncodeSelf(e)
				}
			}
			if yyr2719 || yy2arr2719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2719[3] {
					yy2730 := &x.Spec
					yy2730.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2719[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2731 := &x.Spec
					yy2731.CodecEncodeSelf(e)
				}
			}
			if yyr2719 || yy2arr2719 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2719[4] {
					yy2733 := &x.Status
					yy2733.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2719[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2734 := &x.Status
					yy2734.CodecEncodeSelf(e)
				}
			}
			if yyr2719 || yy2arr2719 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2735 := z.DecBinary()
	_ = yym2735
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2736 := r.ContainerType()
		if yyct2736 == codecSelferValueTypeMap1234 {
			yyl2736 := r.ReadMapStart()
			if yyl2736 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2736, d)
			}
		} else if yyct2736 == codecSelferValueTypeArray1234 {
			yyl2736 := r.ReadArrayStart()
			if yyl2736 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2736, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2737Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2737Slc
	var yyhl2737 bool = l >= 0
	for yyj2737 := 0; ; yyj2737++ {
		if yyhl2737 {
			if yyj2737 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2737Slc = r.DecodeBytes(yys2737Slc, true, true)
		yys2737 := string(yys2737Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2737 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2740 := &x.ObjectMeta
				yyv2740.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2741 := &x.Spec
				yyv2741.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2742 := &x.Status
				yyv2742.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2737)
		} // end switch yys2737
	} // end for yyj2737
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2743 int
	var yyb2743 bool
	var yyhl2743 bool = l >= 0
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2746 := &x.ObjectMeta
		yyv2746.CodecDecodeSelf(d)
	}
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2747 := &x.Spec
		yyv2747.CodecDecodeSelf(d)
	}
	yyj2743++
	if yyhl2743 {
		yyb2743 = yyj2743 > l
	} else {
		yyb2743 = r.CheckBreak()
	}
	if yyb2743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2748 := &x.Status
		yyv2748.CodecDecodeSelf(d)
	}
	for {
		yyj2743++
		if yyhl2743 {
			yyb2743 = yyj2743 > l
		} else {
			yyb2743 = r.CheckBreak()
		}
		if yyb2743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2749 := z.EncBinary()
		_ = yym2749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2750 := !z.EncBinary()
			yy2arr2750 := z.EncBasicHandle().StructToArray
			var yyq2750 [4]bool
			_, _, _ = yysep2750, yyq2750, yy2arr2750
			const yyr2750 bool = false
			yyq2750[0] = x.Kind != ""
			yyq2750[1] = x.APIVersion != ""
			yyq2750[2] = true
			var yynn2750 int
			if yyr2750 || yy2arr2750 {
				r.EncodeArrayStart(4)
			} else {
				yynn2750 = 1
				for _, b := range yyq2750 {
					if b {
						yynn2750++
					}
				}
				r.EncodeMapStart(yynn2750)
				yynn2750 = 0
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[0] {
					yym2752 := z.EncBinary()
					_ = yym2752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2753 := z.EncBinary()
					_ = yym2753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[1] {
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2750[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2756 := z.EncBinary()
					_ = yym2756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2750[2] {
					yy2758 := &x.ListMeta
					yym2759 := z.EncBinary()
					_ = yym2759
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2758) {
					} else {
						z.EncFallback(yy2758)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2750[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2760 := &x.ListMeta
					yym2761 := z.EncBinary()
					_ = yym2761
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2760) {
					} else {
						z.EncFallback(yy2760)
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2750 || yy2arr2750 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2765 := z.DecBinary()
	_ = yym2765
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2766 := r.ContainerType()
		if yyct2766 == codecSelferValueTypeMap1234 {
			yyl2766 := r.ReadMapStart()
			if yyl2766 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2766, d)
			}
		} else if yyct2766 == codecSelferValueTypeArray1234 {
			yyl2766 := r.ReadArrayStart()
			if yyl2766 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2766, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2767Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2767Slc
	var yyhl2767 bool = l >= 0
	for yyj2767 := 0; ; yyj2767++ {
		if yyhl2767 {
			if yyj2767 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2767Slc = r.DecodeBytes(yys2767Slc, true, true)
		yys2767 := string(yys2767Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2767 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2770 := &x.ListMeta
				yym2771 := z.DecBinary()
				_ = yym2771
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2770) {
				} else {
					z.DecFallback(yyv2770, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2772 := &x.Items
				yym2773 := z.DecBinary()
				_ = yym2773
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2772), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2767)
		} // end switch yys2767
	} // end for yyj2767
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2774 int
	var yyb2774 bool
	var yyhl2774 bool = l >= 0
	yyj2774++
	if yyhl2774 {
		yyb2774 = yyj2774 > l
	} else {
		yyb2774 = r.CheckBreak()
	}
	if yyb2774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2774++
	if yyhl2774 {
		yyb2774 = yyj2774 > l
	} else {
		yyb2774 = r.CheckBreak()
	}
	if yyb2774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2774++
	if yyhl2774 {
		yyb2774 = yyj2774 > l
	} else {
		yyb2774 = r.CheckBreak()
	}
	if yyb2774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2777 := &x.ListMeta
		yym2778 := z.DecBinary()
		_ = yym2778
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2777) {
		} else {
			z.DecFallback(yyv2777, false)
		}
	}
	yyj2774++
	if yyhl2774 {
		yyb2774 = yyj2774 > l
	} else {
		yyb2774 = r.CheckBreak()
	}
	if yyb2774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2779 := &x.Items
		yym2780 := z.DecBinary()
		_ = yym2780
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2779), d)
		}
	}
	for {
		yyj2774++
		if yyhl2774 {
			yyb2774 = yyj2774 > l
		} else {
			yyb2774 = r.CheckBreak()
		}
		if yyb2774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2781 := z.EncBinary()
	_ = yym2781
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2782 := z.DecBinary()
	_ = yym2782
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2783 := z.EncBinary()
		_ = yym2783
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2784 := !z.EncBinary()
			yy2arr2784 := z.EncBasicHandle().StructToArray
			var yyq2784 [1]bool
			_, _, _ = yysep2784, yyq2784, yy2arr2784
			const yyr2784 bool = false
			yyq2784[0] = len(x.Finalizers) != 0
			var yynn2784 int
			if yyr2784 || yy2arr2784 {
				r.EncodeArrayStart(1)
			} else {
				yynn2784 = 0
				for _, b := range yyq2784 {
					if b {
						yynn2784++
					}
				}
				r.EncodeMapStart(yynn2784)
				yynn2784 = 0
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2784[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2786 := z.EncBinary()
						_ = yym2786
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2784[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2787 := z.EncBinary()
						_ = yym2787
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr2784 || yy2arr2784 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2788 := z.DecBinary()
	_ = yym2788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2789 := r.ContainerType()
		if yyct2789 == codecSelferValueTypeMap1234 {
			yyl2789 := r.ReadMapStart()
			if yyl2789 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2789, d)
			}
		} else if yyct2789 == codecSelferValueTypeArray1234 {
			yyl2789 := r.ReadArrayStart()
			if yyl2789 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2789, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2790Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2790Slc
	var yyhl2790 bool = l >= 0
	for yyj2790 := 0; ; yyj2790++ {
		if yyhl2790 {
			if yyj2790 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2790Slc = r.DecodeBytes(yys2790Slc, true, true)
		yys2790 := string(yys2790Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2790 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2791 := &x.Finalizers
				yym2792 := z.DecBinary()
				_ = yym2792
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2791), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2790)
		} // end switch yys2790
	} // end for yyj2790
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2793 int
	var yyb2793 bool
	var yyhl2793 bool = l >= 0
	yyj2793++
	if yyhl2793 {
		yyb2793 = yyj2793 > l
	} else {
		yyb2793 = r.CheckBreak()
	}
	if yyb2793 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2794 := &x.Finalizers
		yym2795 := z.DecBinary()
		_ = yym2795
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2794), d)
		}
	}
	for {
		yyj2793++
		if yyhl2793 {
			yyb2793 = yyj2793 > l
		} else {
			yyb2793 = r.CheckBreak()
		}
		if yyb2793 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2793-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2796 := z.EncBinary()
		_ = yym2796
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2797 := !z.EncBinary()
			yy2arr2797 := z.EncBasicHandle().StructToArray
			var yyq2797 [1]bool
			_, _, _ = yysep2797, yyq2797, yy2arr2797
			const yyr2797 bool = false
			yyq2797[0] = x.Phase != ""
			var yynn2797 int
			if yyr2797 || yy2arr2797 {
				r.EncodeArrayStart(1)
			} else {
				yynn2797 = 0
				for _, b := range yyq2797 {
					if b {
						yynn2797++
					}
				}
				r.EncodeMapStart(yynn2797)
				yynn2797 = 0
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2797[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2797[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2797 || yy2arr2797 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2799 := z.DecBinary()
	_ = yym2799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2800 := r.ContainerType()
		if yyct2800 == codecSelferValueTypeMap1234 {
			yyl2800 := r.ReadMapStart()
			if yyl2800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2800, d)
			}
		} else if yyct2800 == codecSelferValueTypeArray1234 {
			yyl2800 := r.ReadArrayStart()
			if yyl2800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2801Slc
	var yyhl2801 bool = l >= 0
	for yyj2801 := 0; ; yyj2801++ {
		if yyhl2801 {
			if yyj2801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2801Slc = r.DecodeBytes(yys2801Slc, true, true)
		yys2801 := string(yys2801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2801 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2801)
		} // end switch yys2801
	} // end for yyj2801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2803 int
	var yyb2803 bool
	var yyhl2803 bool = l >= 0
	yyj2803++
	if yyhl2803 {
		yyb2803 = yyj2803 > l
	} else {
		yyb2803 = r.CheckBreak()
	}
	if yyb2803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2803++
		if yyhl2803 {
			yyb2803 = yyj2803 > l
		} else {
			yyb2803 = r.CheckBreak()
		}
		if yyb2803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2805 := z.EncBinary()
	_ = yym2805
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2806 := z.DecBinary()
	_ = yym2806
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2807 := z.EncBinary()
		_ = yym2807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2808 := !z.EncBinary()
			yy2arr2808 := z.EncBasicHandle().StructToArray
			var yyq2808 [5]bool
			_, _, _ = yysep2808, yyq2808, yy2arr2808
			const yyr2808 bool = false
			yyq2808[0] = x.Kind != ""
			yyq2808[1] = x.APIVersion != ""
			yyq2808[2] = true
			yyq2808[3] = true
			yyq2808[4] = true
			var yynn2808 int
			if yyr2808 || yy2arr2808 {
				r.EncodeArrayStart(5)
			} else {
				yynn2808 = 0
				for _, b := range yyq2808 {
					if b {
						yynn2808++
					}
				}
				r.EncodeMapStart(yynn2808)
				yynn2808 = 0
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[0] {
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2808[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[1] {
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2808[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[2] {
					yy2816 := &x.ObjectMeta
					yy2816.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2808[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2817 := &x.ObjectMeta
					yy2817.CodecEncodeSelf(e)
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[3] {
					yy2819 := &x.Spec
					yy2819.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2808[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2820 := &x.Spec
					yy2820.CodecEncodeSelf(e)
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2808[4] {
					yy2822 := &x.Status
					yy2822.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2808[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2823 := &x.Status
					yy2823.CodecEncodeSelf(e)
				}
			}
			if yyr2808 || yy2arr2808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2824 := z.DecBinary()
	_ = yym2824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2825 := r.ContainerType()
		if yyct2825 == codecSelferValueTypeMap1234 {
			yyl2825 := r.ReadMapStart()
			if yyl2825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2825, d)
			}
		} else if yyct2825 == codecSelferValueTypeArray1234 {
			yyl2825 := r.ReadArrayStart()
			if yyl2825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2826Slc
	var yyhl2826 bool = l >= 0
	for yyj2826 := 0; ; yyj2826++ {
		if yyhl2826 {
			if yyj2826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2826Slc = r.DecodeBytes(yys2826Slc, true, true)
		yys2826 := string(yys2826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2826 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2829 := &x.ObjectMeta
				yyv2829.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2830 := &x.Spec
				yyv2830.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2831 := &x.Status
				yyv2831.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2826)
		} // end switch yys2826
	} // end for yyj2826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2832 int
	var yyb2832 bool
	var yyhl2832 bool = l >= 0
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2835 := &x.ObjectMeta
		yyv2835.CodecDecodeSelf(d)
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2836 := &x.Spec
		yyv2836.CodecDecodeSelf(d)
	}
	yyj2832++
	if yyhl2832 {
		yyb2832 = yyj2832 > l
	} else {
		yyb2832 = r.CheckBreak()
	}
	if yyb2832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2837 := &x.Status
		yyv2837.CodecDecodeSelf(d)
	}
	for {
		yyj2832++
		if yyhl2832 {
			yyb2832 = yyj2832 > l
		} else {
			yyb2832 = r.CheckBreak()
		}
		if yyb2832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2838 := z.EncBinary()
		_ = yym2838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2839 := !z.EncBinary()
			yy2arr2839 := z.EncBasicHandle().StructToArray
			var yyq2839 [4]bool
			_, _, _ = yysep2839, yyq2839, yy2arr2839
			const yyr2839 bool = false
			yyq2839[0] = x.Kind != ""
			yyq2839[1] = x.APIVersion != ""
			yyq2839[2] = true
			var yynn2839 int
			if yyr2839 || yy2arr2839 {
				r.EncodeArrayStart(4)
			} else {
				yynn2839 = 1
				for _, b := range yyq2839 {
					if b {
						yynn2839++
					}
				}
				r.EncodeMapStart(yynn2839)
				yynn2839 = 0
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[0] {
					yym2841 := z.EncBinary()
					_ = yym2841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2842 := z.EncBinary()
					_ = yym2842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[1] {
					yym2844 := z.EncBinary()
					_ = yym2844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2845 := z.EncBinary()
					_ = yym2845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2839[2] {
					yy2847 := &x.ListMeta
					yym2848 := z.EncBinary()
					_ = yym2848
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2847) {
					} else {
						z.EncFallback(yy2847)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2849 := &x.ListMeta
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2849) {
					} else {
						z.EncFallback(yy2849)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2839 || yy2arr2839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2854 := z.DecBinary()
	_ = yym2854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2855 := r.ContainerType()
		if yyct2855 == codecSelferValueTypeMap1234 {
			yyl2855 := r.ReadMapStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2855, d)
			}
		} else if yyct2855 == codecSelferValueTypeArray1234 {
			yyl2855 := r.ReadArrayStart()
			if yyl2855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2856Slc
	var yyhl2856 bool = l >= 0
	for yyj2856 := 0; ; yyj2856++ {
		if yyhl2856 {
			if yyj2856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2856Slc = r.DecodeBytes(yys2856Slc, true, true)
		yys2856 := string(yys2856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2856 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2859 := &x.ListMeta
				yym2860 := z.DecBinary()
				_ = yym2860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2859) {
				} else {
					z.DecFallback(yyv2859, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2861 := &x.Items
				yym2862 := z.DecBinary()
				_ = yym2862
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2861), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2856)
		} // end switch yys2856
	} // end for yyj2856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2863 int
	var yyb2863 bool
	var yyhl2863 bool = l >= 0
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2866 := &x.ListMeta
		yym2867 := z.DecBinary()
		_ = yym2867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2866) {
		} else {
			z.DecFallback(yyv2866, false)
		}
	}
	yyj2863++
	if yyhl2863 {
		yyb2863 = yyj2863 > l
	} else {
		yyb2863 = r.CheckBreak()
	}
	if yyb2863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2868 := &x.Items
		yym2869 := z.DecBinary()
		_ = yym2869
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2868), d)
		}
	}
	for {
		yyj2863++
		if yyhl2863 {
			yyb2863 = yyj2863 > l
		} else {
			yyb2863 = r.CheckBreak()
		}
		if yyb2863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2870 := z.EncBinary()
		_ = yym2870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2871 := !z.EncBinary()
			yy2arr2871 := z.EncBasicHandle().StructToArray
			var yyq2871 [4]bool
			_, _, _ = yysep2871, yyq2871, yy2arr2871
			const yyr2871 bool = false
			yyq2871[0] = x.Kind != ""
			yyq2871[1] = x.APIVersion != ""
			yyq2871[2] = true
			var yynn2871 int
			if yyr2871 || yy2arr2871 {
				r.EncodeArrayStart(4)
			} else {
				yynn2871 = 1
				for _, b := range yyq2871 {
					if b {
						yynn2871++
					}
				}
				r.EncodeMapStart(yynn2871)
				yynn2871 = 0
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[0] {
					yym2873 := z.EncBinary()
					_ = yym2873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2874 := z.EncBinary()
					_ = yym2874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[1] {
					yym2876 := z.EncBinary()
					_ = yym2876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2871[2] {
					yy2879 := &x.ObjectMeta
					yy2879.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2880 := &x.ObjectMeta
					yy2880.CodecEncodeSelf(e)
				}
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2882 := &x.Target
				yy2882.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2883 := &x.Target
				yy2883.CodecEncodeSelf(e)
			}
			if yyr2871 || yy2arr2871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2884 := z.DecBinary()
	_ = yym2884
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2885 := r.ContainerType()
		if yyct2885 == codecSelferValueTypeMap1234 {
			yyl2885 := r.ReadMapStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2885, d)
			}
		} else if yyct2885 == codecSelferValueTypeArray1234 {
			yyl2885 := r.ReadArrayStart()
			if yyl2885 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2885, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2886Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2886Slc
	var yyhl2886 bool = l >= 0
	for yyj2886 := 0; ; yyj2886++ {
		if yyhl2886 {
			if yyj2886 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2886Slc = r.DecodeBytes(yys2886Slc, true, true)
		yys2886 := string(yys2886Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2886 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2889 := &x.ObjectMeta
				yyv2889.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2890 := &x.Target
				yyv2890.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2886)
		} // end switch yys2886
	} // end for yyj2886
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2891 int
	var yyb2891 bool
	var yyhl2891 bool = l >= 0
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2894 := &x.ObjectMeta
		yyv2894.CodecDecodeSelf(d)
	}
	yyj2891++
	if yyhl2891 {
		yyb2891 = yyj2891 > l
	} else {
		yyb2891 = r.CheckBreak()
	}
	if yyb2891 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2895 := &x.Target
		yyv2895.CodecDecodeSelf(d)
	}
	for {
		yyj2891++
		if yyhl2891 {
			yyb2891 = yyj2891 > l
		} else {
			yyb2891 = r.CheckBreak()
		}
		if yyb2891 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2891-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2896 := z.EncBinary()
		_ = yym2896
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2897 := !z.EncBinary()
			yy2arr2897 := z.EncBasicHandle().StructToArray
			var yyq2897 [3]bool
			_, _, _ = yysep2897, yyq2897, yy2arr2897
			const yyr2897 bool = false
			yyq2897[0] = x.Kind != ""
			yyq2897[1] = x.APIVersion != ""
			var yynn2897 int
			if yyr2897 || yy2arr2897 {
				r.EncodeArrayStart(3)
			} else {
				yynn2897 = 1
				for _, b := range yyq2897 {
					if b {
						yynn2897++
					}
				}
				r.EncodeMapStart(yynn2897)
				yynn2897 = 0
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2897[0] {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2897[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2897[1] {
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2897[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2905 := *x.GracePeriodSeconds
					yym2906 := z.EncBinary()
					_ = yym2906
					if false {
					} else {
						r.EncodeInt(int64(yy2905))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2907 := *x.GracePeriodSeconds
					yym2908 := z.EncBinary()
					_ = yym2908
					if false {
					} else {
						r.EncodeInt(int64(yy2907))
					}
				}
			}
			if yyr2897 || yy2arr2897 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2909 := z.DecBinary()
	_ = yym2909
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2910 := r.ContainerType()
		if yyct2910 == codecSelferValueTypeMap1234 {
			yyl2910 := r.ReadMapStart()
			if yyl2910 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2910, d)
			}
		} else if yyct2910 == codecSelferValueTypeArray1234 {
			yyl2910 := r.ReadArrayStart()
			if yyl2910 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2910, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2911Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2911Slc
	var yyhl2911 bool = l >= 0
	for yyj2911 := 0; ; yyj2911++ {
		if yyhl2911 {
			if yyj2911 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2911Slc = r.DecodeBytes(yys2911Slc, true, true)
		yys2911 := string(yys2911Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2911 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2915 := z.DecBinary()
				_ = yym2915
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2911)
		} // end switch yys2911
	} // end for yyj2911
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2916 int
	var yyb2916 bool
	var yyhl2916 bool = l >= 0
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2916++
	if yyhl2916 {
		yyb2916 = yyj2916 > l
	} else {
		yyb2916 = r.CheckBreak()
	}
	if yyb2916 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2920 := z.DecBinary()
		_ = yym2920
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2916++
		if yyhl2916 {
			yyb2916 = yyj2916 > l
		} else {
			yyb2916 = r.CheckBreak()
		}
		if yyb2916 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2916-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2921 := z.EncBinary()
		_ = yym2921
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2922 := !z.EncBinary()
			yy2arr2922 := z.EncBasicHandle().StructToArray
			var yyq2922 [4]bool
			_, _, _ = yysep2922, yyq2922, yy2arr2922
			const yyr2922 bool = false
			yyq2922[0] = x.Kind != ""
			yyq2922[1] = x.APIVersion != ""
			var yynn2922 int
			if yyr2922 || yy2arr2922 {
				r.EncodeArrayStart(4)
			} else {
				yynn2922 = 2
				for _, b := range yyq2922 {
					if b {
						yynn2922++
					}
				}
				r.EncodeMapStart(yynn2922)
				yynn2922 = 0
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2922[0] {
					yym2924 := z.EncBinary()
					_ = yym2924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2922[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2925 := z.EncBinary()
					_ = yym2925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2922[1] {
					yym2927 := z.EncBinary()
					_ = yym2927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2922[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2928 := z.EncBinary()
					_ = yym2928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2930 := z.EncBinary()
				_ = yym2930
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2931 := z.EncBinary()
				_ = yym2931
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2933 := z.EncBinary()
				_ = yym2933
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2934 := z.EncBinary()
				_ = yym2934
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2922 || yy2arr2922 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2935 := z.DecBinary()
	_ = yym2935
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2936 := r.ContainerType()
		if yyct2936 == codecSelferValueTypeMap1234 {
			yyl2936 := r.ReadMapStart()
			if yyl2936 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2936, d)
			}
		} else if yyct2936 == codecSelferValueTypeArray1234 {
			yyl2936 := r.ReadArrayStart()
			if yyl2936 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2936, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2937Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2937Slc
	var yyhl2937 bool = l >= 0
	for yyj2937 := 0; ; yyj2937++ {
		if yyhl2937 {
			if yyj2937 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2937Slc = r.DecodeBytes(yys2937Slc, true, true)
		yys2937 := string(yys2937Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2937 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2937)
		} // end switch yys2937
	} // end for yyj2937
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2942 int
	var yyb2942 bool
	var yyhl2942 bool = l >= 0
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2942++
	if yyhl2942 {
		yyb2942 = yyj2942 > l
	} else {
		yyb2942 = r.CheckBreak()
	}
	if yyb2942 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj2942++
		if yyhl2942 {
			yyb2942 = yyj2942 > l
		} else {
			yyb2942 = r.CheckBreak()
		}
		if yyb2942 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2942-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2947 := z.EncBinary()
		_ = yym2947
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2948 := !z.EncBinary()
			yy2arr2948 := z.EncBasicHandle().StructToArray
			var yyq2948 [7]bool
			_, _, _ = yysep2948, yyq2948, yy2arr2948
			const yyr2948 bool = false
			yyq2948[0] = x.Kind != ""
			yyq2948[1] = x.APIVersion != ""
			yyq2948[2] = x.LabelSelector != ""
			yyq2948[3] = x.FieldSelector != ""
			yyq2948[4] = x.Watch != false
			yyq2948[5] = x.ResourceVersion != ""
			yyq2948[6] = x.TimeoutSeconds != nil
			var yynn2948 int
			if yyr2948 || yy2arr2948 {
				r.EncodeArrayStart(7)
			} else {
				yynn2948 = 0
				for _, b := range yyq2948 {
					if b {
						yynn2948++
					}
				}
				r.EncodeMapStart(yynn2948)
				yynn2948 = 0
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[0] {
					yym2950 := z.EncBinary()
					_ = yym2950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2948[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2951 := z.EncBinary()
					_ = yym2951
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[1] {
					yym2953 := z.EncBinary()
					_ = yym2953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2948[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2954 := z.EncBinary()
					_ = yym2954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[2] {
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2948[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[3] {
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2948[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[4] {
					yym2962 := z.EncBinary()
					_ = yym2962
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2948[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[5] {
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2948[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2948[6] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2968 := *x.TimeoutSeconds
						yym2969 := z.EncBinary()
						_ = yym2969
						if false {
						} else {
							r.EncodeInt(int64(yy2968))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2948[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2970 := *x.TimeoutSeconds
						yym2971 := z.EncBinary()
						_ = yym2971
						if false {
						} else {
							r.EncodeInt(int64(yy2970))
						}
					}
				}
			}
			if yyr2948 || yy2arr2948 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2972 := z.DecBinary()
	_ = yym2972
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2973 := r.ContainerType()
		if yyct2973 == codecSelferValueTypeMap1234 {
			yyl2973 := r.ReadMapStart()
			if yyl2973 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2973, d)
			}
		} else if yyct2973 == codecSelferValueTypeArray1234 {
			yyl2973 := r.ReadArrayStart()
			if yyl2973 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2973, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2974Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2974Slc
	var yyhl2974 bool = l >= 0
	for yyj2974 := 0; ; yyj2974++ {
		if yyhl2974 {
			if yyj2974 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2974Slc = r.DecodeBytes(yys2974Slc, true, true)
		yys2974 := string(yys2974Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2974 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym2982 := z.DecBinary()
				_ = yym2982
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2974)
		} // end switch yys2974
	} // end for yyj2974
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2983 int
	var yyb2983 bool
	var yyhl2983 bool = l >= 0
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2983++
	if yyhl2983 {
		yyb2983 = yyj2983 > l
	} else {
		yyb2983 = r.CheckBreak()
	}
	if yyb2983 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym2991 := z.DecBinary()
		_ = yym2991
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2983++
		if yyhl2983 {
			yyb2983 = yyj2983 > l
		} else {
			yyb2983 = r.CheckBreak()
		}
		if yyb2983 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2983-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2992 := z.EncBinary()
		_ = yym2992
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2993 := !z.EncBinary()
			yy2arr2993 := z.EncBasicHandle().StructToArray
			var yyq2993 [10]bool
			_, _, _ = yysep2993, yyq2993, yy2arr2993
			const yyr2993 bool = false
			yyq2993[0] = x.Kind != ""
			yyq2993[1] = x.APIVersion != ""
			yyq2993[2] = x.Container != ""
			yyq2993[3] = x.Follow != false
			yyq2993[4] = x.Previous != false
			yyq2993[5] = x.SinceSeconds != nil
			yyq2993[6] = x.SinceTime != nil
			yyq2993[7] = x.Timestamps != false
			yyq2993[8] = x.TailLines != nil
			yyq2993[9] = x.LimitBytes != nil
			var yynn2993 int
			if yyr2993 || yy2arr2993 {
				r.EncodeArrayStart(10)
			} else {
				yynn2993 = 0
				for _, b := range yyq2993 {
					if b {
						yynn2993++
					}
				}
				r.EncodeMapStart(yynn2993)
				yynn2993 = 0
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[0] {
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2993[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2996 := z.EncBinary()
					_ = yym2996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[1] {
					yym2998 := z.EncBinary()
					_ = yym2998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2993[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[2] {
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2993[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3002 := z.EncBinary()
					_ = yym3002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[3] {
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2993[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3005 := z.EncBinary()
					_ = yym3005
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[4] {
					yym3007 := z.EncBinary()
					_ = yym3007
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2993[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3008 := z.EncBinary()
					_ = yym3008
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[5] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3010 := *x.SinceSeconds
						yym3011 := z.EncBinary()
						_ = yym3011
						if false {
						} else {
							r.EncodeInt(int64(yy3010))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2993[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3012 := *x.SinceSeconds
						yym3013 := z.EncBinary()
						_ = yym3013
						if false {
						} else {
							r.EncodeInt(int64(yy3012))
						}
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[6] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3015 := z.EncBinary()
						_ = yym3015
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3015 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3015 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2993[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3016 := z.EncBinary()
						_ = yym3016
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3016 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3016 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[7] {
					yym3018 := z.EncBinary()
					_ = yym3018
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2993[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3019 := z.EncBinary()
					_ = yym3019
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[8] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3021 := *x.TailLines
						yym3022 := z.EncBinary()
						_ = yym3022
						if false {
						} else {
							r.EncodeInt(int64(yy3021))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2993[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3023 := *x.TailLines
						yym3024 := z.EncBinary()
						_ = yym3024
						if false {
						} else {
							r.EncodeInt(int64(yy3023))
						}
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2993[9] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3026 := *x.LimitBytes
						yym3027 := z.EncBinary()
						_ = yym3027
						if false {
						} else {
							r.EncodeInt(int64(yy3026))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2993[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3028 := *x.LimitBytes
						yym3029 := z.EncBinary()
						_ = yym3029
						if false {
						} else {
							r.EncodeInt(int64(yy3028))
						}
					}
				}
			}
			if yyr2993 || yy2arr2993 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3030 := z.DecBinary()
	_ = yym3030
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3031 := r.ContainerType()
		if yyct3031 == codecSelferValueTypeMap1234 {
			yyl3031 := r.ReadMapStart()
			if yyl3031 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3031, d)
			}
		} else if yyct3031 == codecSelferValueTypeArray1234 {
			yyl3031 := r.ReadArrayStart()
			if yyl3031 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3031, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3032Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3032Slc
	var yyhl3032 bool = l >= 0
	for yyj3032 := 0; ; yyj3032++ {
		if yyhl3032 {
			if yyj3032 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3032Slc = r.DecodeBytes(yys3032Slc, true, true)
		yys3032 := string(yys3032Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3032 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3039 := z.DecBinary()
				_ = yym3039
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3041 := z.DecBinary()
				_ = yym3041
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3041 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3041 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3044 := z.DecBinary()
				_ = yym3044
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3046 := z.DecBinary()
				_ = yym3046
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3032)
		} // end switch yys3032
	} // end for yyj3032
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3047 int
	var yyb3047 bool
	var yyhl3047 bool = l >= 0
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3054 := z.DecBinary()
		_ = yym3054
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3056 := z.DecBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3056 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3056 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3059 := z.DecBinary()
		_ = yym3059
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3047++
	if yyhl3047 {
		yyb3047 = yyj3047 > l
	} else {
		yyb3047 = r.CheckBreak()
	}
	if yyb3047 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3061 := z.DecBinary()
		_ = yym3061
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3047++
		if yyhl3047 {
			yyb3047 = yyj3047 > l
		} else {
			yyb3047 = r.CheckBreak()
		}
		if yyb3047 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3047-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3062 := z.EncBinary()
		_ = yym3062
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3063 := !z.EncBinary()
			yy2arr3063 := z.EncBasicHandle().StructToArray
			var yyq3063 [7]bool
			_, _, _ = yysep3063, yyq3063, yy2arr3063
			const yyr3063 bool = false
			yyq3063[0] = x.Kind != ""
			yyq3063[1] = x.APIVersion != ""
			yyq3063[2] = x.Stdin != false
			yyq3063[3] = x.Stdout != false
			yyq3063[4] = x.Stderr != false
			yyq3063[5] = x.TTY != false
			yyq3063[6] = x.Container != ""
			var yynn3063 int
			if yyr3063 || yy2arr3063 {
				r.EncodeArrayStart(7)
			} else {
				yynn3063 = 0
				for _, b := range yyq3063 {
					if b {
						yynn3063++
					}
				}
				r.EncodeMapStart(yynn3063)
				yynn3063 = 0
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[0] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[1] {
					yym3068 := z.EncBinary()
					_ = yym3068
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3069 := z.EncBinary()
					_ = yym3069
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[2] {
					yym3071 := z.EncBinary()
					_ = yym3071
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3063[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3072 := z.EncBinary()
					_ = yym3072
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[3] {
					yym3074 := z.EncBinary()
					_ = yym3074
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3063[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3075 := z.EncBinary()
					_ = yym3075
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[4] {
					yym3077 := z.EncBinary()
					_ = yym3077
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3063[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3078 := z.EncBinary()
					_ = yym3078
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[5] {
					yym3080 := z.EncBinary()
					_ = yym3080
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3063[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3081 := z.EncBinary()
					_ = yym3081
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3063[6] {
					yym3083 := z.EncBinary()
					_ = yym3083
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3063[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3084 := z.EncBinary()
					_ = yym3084
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3063 || yy2arr3063 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3085 := z.DecBinary()
	_ = yym3085
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3086 := r.ContainerType()
		if yyct3086 == codecSelferValueTypeMap1234 {
			yyl3086 := r.ReadMapStart()
			if yyl3086 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3086, d)
			}
		} else if yyct3086 == codecSelferValueTypeArray1234 {
			yyl3086 := r.ReadArrayStart()
			if yyl3086 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3086, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3087Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3087Slc
	var yyhl3087 bool = l >= 0
	for yyj3087 := 0; ; yyj3087++ {
		if yyhl3087 {
			if yyj3087 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3087Slc = r.DecodeBytes(yys3087Slc, true, true)
		yys3087 := string(yys3087Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3087 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3087)
		} // end switch yys3087
	} // end for yyj3087
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3095 int
	var yyb3095 bool
	var yyhl3095 bool = l >= 0
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3095++
	if yyhl3095 {
		yyb3095 = yyj3095 > l
	} else {
		yyb3095 = r.CheckBreak()
	}
	if yyb3095 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3095++
		if yyhl3095 {
			yyb3095 = yyj3095 > l
		} else {
			yyb3095 = r.CheckBreak()
		}
		if yyb3095 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3095-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3103 := z.EncBinary()
		_ = yym3103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3104 := !z.EncBinary()
			yy2arr3104 := z.EncBasicHandle().StructToArray
			var yyq3104 [8]bool
			_, _, _ = yysep3104, yyq3104, yy2arr3104
			const yyr3104 bool = false
			yyq3104[0] = x.Kind != ""
			yyq3104[1] = x.APIVersion != ""
			yyq3104[2] = x.Stdin != false
			yyq3104[3] = x.Stdout != false
			yyq3104[4] = x.Stderr != false
			yyq3104[5] = x.TTY != false
			yyq3104[6] = x.Container != ""
			var yynn3104 int
			if yyr3104 || yy2arr3104 {
				r.EncodeArrayStart(8)
			} else {
				yynn3104 = 1
				for _, b := range yyq3104 {
					if b {
						yynn3104++
					}
				}
				r.EncodeMapStart(yynn3104)
				yynn3104 = 0
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[0] {
					yym3106 := z.EncBinary()
					_ = yym3106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3104[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[1] {
					yym3109 := z.EncBinary()
					_ = yym3109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3104[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[2] {
					yym3112 := z.EncBinary()
					_ = yym3112
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3104[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[3] {
					yym3115 := z.EncBinary()
					_ = yym3115
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3104[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[4] {
					yym3118 := z.EncBinary()
					_ = yym3118
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3104[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3119 := z.EncBinary()
					_ = yym3119
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[5] {
					yym3121 := z.EncBinary()
					_ = yym3121
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3104[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3122 := z.EncBinary()
					_ = yym3122
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3104[6] {
					yym3124 := z.EncBinary()
					_ = yym3124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3104[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3125 := z.EncBinary()
					_ = yym3125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3127 := z.EncBinary()
					_ = yym3127
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3128 := z.EncBinary()
					_ = yym3128
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3104 || yy2arr3104 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3129 := z.DecBinary()
	_ = yym3129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3130 := r.ContainerType()
		if yyct3130 == codecSelferValueTypeMap1234 {
			yyl3130 := r.ReadMapStart()
			if yyl3130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3130, d)
			}
		} else if yyct3130 == codecSelferValueTypeArray1234 {
			yyl3130 := r.ReadArrayStart()
			if yyl3130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3131Slc
	var yyhl3131 bool = l >= 0
	for yyj3131 := 0; ; yyj3131++ {
		if yyhl3131 {
			if yyj3131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3131Slc = r.DecodeBytes(yys3131Slc, true, true)
		yys3131 := string(yys3131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3131 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3139 := &x.Command
				yym3140 := z.DecBinary()
				_ = yym3140
				if false {
				} else {
					z.F.DecSliceStringX(yyv3139, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3131)
		} // end switch yys3131
	} // end for yyj3131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3141 int
	var yyb3141 bool
	var yyhl3141 bool = l >= 0
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3141++
	if yyhl3141 {
		yyb3141 = yyj3141 > l
	} else {
		yyb3141 = r.CheckBreak()
	}
	if yyb3141 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3149 := &x.Command
		yym3150 := z.DecBinary()
		_ = yym3150
		if false {
		} else {
			z.F.DecSliceStringX(yyv3149, false, d)
		}
	}
	for {
		yyj3141++
		if yyhl3141 {
			yyb3141 = yyj3141 > l
		} else {
			yyb3141 = r.CheckBreak()
		}
		if yyb3141 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3141-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3151 := z.EncBinary()
		_ = yym3151
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3152 := !z.EncBinary()
			yy2arr3152 := z.EncBasicHandle().StructToArray
			var yyq3152 [3]bool
			_, _, _ = yysep3152, yyq3152, yy2arr3152
			const yyr3152 bool = false
			yyq3152[0] = x.Kind != ""
			yyq3152[1] = x.APIVersion != ""
			yyq3152[2] = x.Path != ""
			var yynn3152 int
			if yyr3152 || yy2arr3152 {
				r.EncodeArrayStart(3)
			} else {
				yynn3152 = 0
				for _, b := range yyq3152 {
					if b {
						yynn3152++
					}
				}
				r.EncodeMapStart(yynn3152)
				yynn3152 = 0
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[0] {
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3152[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[1] {
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3152[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3152[2] {
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3152[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3152 || yy2arr3152 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3162 := z.DecBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3163 := r.ContainerType()
		if yyct3163 == codecSelferValueTypeMap1234 {
			yyl3163 := r.ReadMapStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3163, d)
			}
		} else if yyct3163 == codecSelferValueTypeArray1234 {
			yyl3163 := r.ReadArrayStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3164Slc
	var yyhl3164 bool = l >= 0
	for yyj3164 := 0; ; yyj3164++ {
		if yyhl3164 {
			if yyj3164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3164Slc = r.DecodeBytes(yys3164Slc, true, true)
		yys3164 := string(yys3164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3164 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3164)
		} // end switch yys3164
	} // end for yyj3164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3168 int
	var yyb3168 bool
	var yyhl3168 bool = l >= 0
	yyj3168++
	if yyhl3168 {
		yyb3168 = yyj3168 > l
	} else {
		yyb3168 = r.CheckBreak()
	}
	if yyb3168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3168++
	if yyhl3168 {
		yyb3168 = yyj3168 > l
	} else {
		yyb3168 = r.CheckBreak()
	}
	if yyb3168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3168++
	if yyhl3168 {
		yyb3168 = yyj3168 > l
	} else {
		yyb3168 = r.CheckBreak()
	}
	if yyb3168 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3168++
		if yyhl3168 {
			yyb3168 = yyj3168 > l
		} else {
			yyb3168 = r.CheckBreak()
		}
		if yyb3168 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3168-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3172 := z.EncBinary()
		_ = yym3172
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3173 := !z.EncBinary()
			yy2arr3173 := z.EncBasicHandle().StructToArray
			var yyq3173 [7]bool
			_, _, _ = yysep3173, yyq3173, yy2arr3173
			const yyr3173 bool = false
			yyq3173[0] = x.Kind != ""
			yyq3173[1] = x.Namespace != ""
			yyq3173[2] = x.Name != ""
			yyq3173[3] = x.UID != ""
			yyq3173[4] = x.APIVersion != ""
			yyq3173[5] = x.ResourceVersion != ""
			yyq3173[6] = x.FieldPath != ""
			var yynn3173 int
			if yyr3173 || yy2arr3173 {
				r.EncodeArrayStart(7)
			} else {
				yynn3173 = 0
				for _, b := range yyq3173 {
					if b {
						yynn3173++
					}
				}
				r.EncodeMapStart(yynn3173)
				yynn3173 = 0
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[0] {
					yym3175 := z.EncBinary()
					_ = yym3175
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[1] {
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3179 := z.EncBinary()
					_ = yym3179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[2] {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3182 := z.EncBinary()
					_ = yym3182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[3] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[4] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[5] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3173[6] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3173[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3173 || yy2arr3173 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3195 := z.DecBinary()
	_ = yym3195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3196 := r.ContainerType()
		if yyct3196 == codecSelferValueTypeMap1234 {
			yyl3196 := r.ReadMapStart()
			if yyl3196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3196, d)
			}
		} else if yyct3196 == codecSelferValueTypeArray1234 {
			yyl3196 := r.ReadArrayStart()
			if yyl3196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3197Slc
	var yyhl3197 bool = l >= 0
	for yyj3197 := 0; ; yyj3197++ {
		if yyhl3197 {
			if yyj3197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3197Slc = r.DecodeBytes(yys3197Slc, true, true)
		yys3197 := string(yys3197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3197 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3197)
		} // end switch yys3197
	} // end for yyj3197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3205 int
	var yyb3205 bool
	var yyhl3205 bool = l >= 0
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3205++
	if yyhl3205 {
		yyb3205 = yyj3205 > l
	} else {
		yyb3205 = r.CheckBreak()
	}
	if yyb3205 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3205++
		if yyhl3205 {
			yyb3205 = yyj3205 > l
		} else {
			yyb3205 = r.CheckBreak()
		}
		if yyb3205 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3205-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3213 := z.EncBinary()
		_ = yym3213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3214 := !z.EncBinary()
			yy2arr3214 := z.EncBasicHandle().StructToArray
			var yyq3214 [1]bool
			_, _, _ = yysep3214, yyq3214, yy2arr3214
			const yyr3214 bool = false
			yyq3214[0] = x.Name != ""
			var yynn3214 int
			if yyr3214 || yy2arr3214 {
				r.EncodeArrayStart(1)
			} else {
				yynn3214 = 0
				for _, b := range yyq3214 {
					if b {
						yynn3214++
					}
				}
				r.EncodeMapStart(yynn3214)
				yynn3214 = 0
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3214[0] {
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3214[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3218 := z.DecBinary()
	_ = yym3218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3219 := r.ContainerType()
		if yyct3219 == codecSelferValueTypeMap1234 {
			yyl3219 := r.ReadMapStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3219, d)
			}
		} else if yyct3219 == codecSelferValueTypeArray1234 {
			yyl3219 := r.ReadArrayStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3220Slc
	var yyhl3220 bool = l >= 0
	for yyj3220 := 0; ; yyj3220++ {
		if yyhl3220 {
			if yyj3220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3220Slc = r.DecodeBytes(yys3220Slc, true, true)
		yys3220 := string(yys3220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3220 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3220)
		} // end switch yys3220
	} // end for yyj3220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3222 int
	var yyb3222 bool
	var yyhl3222 bool = l >= 0
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3222++
		if yyhl3222 {
			yyb3222 = yyj3222 > l
		} else {
			yyb3222 = r.CheckBreak()
		}
		if yyb3222 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3222-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3224 := z.EncBinary()
		_ = yym3224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3225 := !z.EncBinary()
			yy2arr3225 := z.EncBasicHandle().StructToArray
			var yyq3225 [3]bool
			_, _, _ = yysep3225, yyq3225, yy2arr3225
			const yyr3225 bool = false
			yyq3225[0] = x.Kind != ""
			yyq3225[1] = x.APIVersion != ""
			yyq3225[2] = true
			var yynn3225 int
			if yyr3225 || yy2arr3225 {
				r.EncodeArrayStart(3)
			} else {
				yynn3225 = 0
				for _, b := range yyq3225 {
					if b {
						yynn3225++
					}
				}
				r.EncodeMapStart(yynn3225)
				yynn3225 = 0
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[0] {
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3228 := z.EncBinary()
					_ = yym3228
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[1] {
					yym3230 := z.EncBinary()
					_ = yym3230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3225[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3231 := z.EncBinary()
					_ = yym3231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3225[2] {
					yy3233 := &x.Reference
					yy3233.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3225[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3234 := &x.Reference
					yy3234.CodecEncodeSelf(e)
				}
			}
			if yyr3225 || yy2arr3225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3235 := z.DecBinary()
	_ = yym3235
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3236 := r.ContainerType()
		if yyct3236 == codecSelferValueTypeMap1234 {
			yyl3236 := r.ReadMapStart()
			if yyl3236 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3236, d)
			}
		} else if yyct3236 == codecSelferValueTypeArray1234 {
			yyl3236 := r.ReadArrayStart()
			if yyl3236 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3236, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3237Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3237Slc
	var yyhl3237 bool = l >= 0
	for yyj3237 := 0; ; yyj3237++ {
		if yyhl3237 {
			if yyj3237 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3237Slc = r.DecodeBytes(yys3237Slc, true, true)
		yys3237 := string(yys3237Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3237 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3240 := &x.Reference
				yyv3240.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3237)
		} // end switch yys3237
	} // end for yyj3237
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3241 int
	var yyb3241 bool
	var yyhl3241 bool = l >= 0
	yyj3241++
	if yyhl3241 {
		yyb3241 = yyj3241 > l
	} else {
		yyb3241 = r.CheckBreak()
	}
	if yyb3241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3241++
	if yyhl3241 {
		yyb3241 = yyj3241 > l
	} else {
		yyb3241 = r.CheckBreak()
	}
	if yyb3241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3241++
	if yyhl3241 {
		yyb3241 = yyj3241 > l
	} else {
		yyb3241 = r.CheckBreak()
	}
	if yyb3241 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3244 := &x.Reference
		yyv3244.CodecDecodeSelf(d)
	}
	for {
		yyj3241++
		if yyhl3241 {
			yyb3241 = yyj3241 > l
		} else {
			yyb3241 = r.CheckBreak()
		}
		if yyb3241 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3241-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3245 := z.EncBinary()
		_ = yym3245
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3246 := !z.EncBinary()
			yy2arr3246 := z.EncBasicHandle().StructToArray
			var yyq3246 [2]bool
			_, _, _ = yysep3246, yyq3246, yy2arr3246
			const yyr3246 bool = false
			yyq3246[0] = x.Component != ""
			yyq3246[1] = x.Host != ""
			var yynn3246 int
			if yyr3246 || yy2arr3246 {
				r.EncodeArrayStart(2)
			} else {
				yynn3246 = 0
				for _, b := range yyq3246 {
					if b {
						yynn3246++
					}
				}
				r.EncodeMapStart(yynn3246)
				yynn3246 = 0
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3246[0] {
					yym3248 := z.EncBinary()
					_ = yym3248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3246[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3246[1] {
					yym3251 := z.EncBinary()
					_ = yym3251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3246[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3252 := z.EncBinary()
					_ = yym3252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3246 || yy2arr3246 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3253 := z.DecBinary()
	_ = yym3253
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3254 := r.ContainerType()
		if yyct3254 == codecSelferValueTypeMap1234 {
			yyl3254 := r.ReadMapStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3254, d)
			}
		} else if yyct3254 == codecSelferValueTypeArray1234 {
			yyl3254 := r.ReadArrayStart()
			if yyl3254 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3254, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3255Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3255Slc
	var yyhl3255 bool = l >= 0
	for yyj3255 := 0; ; yyj3255++ {
		if yyhl3255 {
			if yyj3255 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3255Slc = r.DecodeBytes(yys3255Slc, true, true)
		yys3255 := string(yys3255Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3255 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3255)
		} // end switch yys3255
	} // end for yyj3255
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3258 int
	var yyb3258 bool
	var yyhl3258 bool = l >= 0
	yyj3258++
	if yyhl3258 {
		yyb3258 = yyj3258 > l
	} else {
		yyb3258 = r.CheckBreak()
	}
	if yyb3258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3258++
	if yyhl3258 {
		yyb3258 = yyj3258 > l
	} else {
		yyb3258 = r.CheckBreak()
	}
	if yyb3258 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3258++
		if yyhl3258 {
			yyb3258 = yyj3258 > l
		} else {
			yyb3258 = r.CheckBreak()
		}
		if yyb3258 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3258-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3261 := z.EncBinary()
		_ = yym3261
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3262 := !z.EncBinary()
			yy2arr3262 := z.EncBasicHandle().StructToArray
			var yyq3262 [11]bool
			_, _, _ = yysep3262, yyq3262, yy2arr3262
			const yyr3262 bool = false
			yyq3262[0] = x.Kind != ""
			yyq3262[1] = x.APIVersion != ""
			yyq3262[4] = x.Reason != ""
			yyq3262[5] = x.Message != ""
			yyq3262[6] = true
			yyq3262[7] = true
			yyq3262[8] = true
			yyq3262[9] = x.Count != 0
			yyq3262[10] = x.Type != ""
			var yynn3262 int
			if yyr3262 || yy2arr3262 {
				r.EncodeArrayStart(11)
			} else {
				yynn3262 = 2
				for _, b := range yyq3262 {
					if b {
						yynn3262++
					}
				}
				r.EncodeMapStart(yynn3262)
				yynn3262 = 0
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[0] {
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3265 := z.EncBinary()
					_ = yym3265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[1] {
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3268 := z.EncBinary()
					_ = yym3268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3270 := &x.ObjectMeta
				yy3270.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3271 := &x.ObjectMeta
				yy3271.CodecEncodeSelf(e)
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3273 := &x.InvolvedObject
				yy3273.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3274 := &x.InvolvedObject
				yy3274.CodecEncodeSelf(e)
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[4] {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[5] {
					yym3279 := z.EncBinary()
					_ = yym3279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[6] {
					yy3282 := &x.Source
					yy3282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3283 := &x.Source
					yy3283.CodecEncodeSelf(e)
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[7] {
					yy3285 := &x.FirstTimestamp
					yym3286 := z.EncBinary()
					_ = yym3286
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3285) {
					} else if yym3286 {
						z.EncBinaryMarshal(yy3285)
					} else if !yym3286 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3285)
					} else {
						z.EncFallback(yy3285)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3287 := &x.FirstTimestamp
					yym3288 := z.EncBinary()
					_ = yym3288
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3287) {
					} else if yym3288 {
						z.EncBinaryMarshal(yy3287)
					} else if !yym3288 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3287)
					} else {
						z.EncFallback(yy3287)
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[8] {
					yy3290 := &x.LastTimestamp
					yym3291 := z.EncBinary()
					_ = yym3291
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3290) {
					} else if yym3291 {
						z.EncBinaryMarshal(yy3290)
					} else if !yym3291 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3290)
					} else {
						z.EncFallback(yy3290)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3262[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3292 := &x.LastTimestamp
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3292) {
					} else if yym3293 {
						z.EncBinaryMarshal(yy3292)
					} else if !yym3293 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3292)
					} else {
						z.EncFallback(yy3292)
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[9] {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3262[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3262[10] {
					yym3298 := z.EncBinary()
					_ = yym3298
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3262[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3299 := z.EncBinary()
					_ = yym3299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3262 || yy2arr3262 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3300 := z.DecBinary()
	_ = yym3300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3301 := r.ContainerType()
		if yyct3301 == codecSelferValueTypeMap1234 {
			yyl3301 := r.ReadMapStart()
			if yyl3301 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3301, d)
			}
		} else if yyct3301 == codecSelferValueTypeArray1234 {
			yyl3301 := r.ReadArrayStart()
			if yyl3301 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3302Slc
	var yyhl3302 bool = l >= 0
	for yyj3302 := 0; ; yyj3302++ {
		if yyhl3302 {
			if yyj3302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3302Slc = r.DecodeBytes(yys3302Slc, true, true)
		yys3302 := string(yys3302Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3302 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3305 := &x.ObjectMeta
				yyv3305.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3306 := &x.InvolvedObject
				yyv3306.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3309 := &x.Source
				yyv3309.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3310 := &x.FirstTimestamp
				yym3311 := z.DecBinary()
				_ = yym3311
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3310) {
				} else if yym3311 {
					z.DecBinaryUnmarshal(yyv3310)
				} else if !yym3311 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3310)
				} else {
					z.DecFallback(yyv3310, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3312 := &x.LastTimestamp
				yym3313 := z.DecBinary()
				_ = yym3313
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3312) {
				} else if yym3313 {
					z.DecBinaryUnmarshal(yyv3312)
				} else if !yym3313 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3312)
				} else {
					z.DecFallback(yyv3312, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3302)
		} // end switch yys3302
	} // end for yyj3302
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3316 int
	var yyb3316 bool
	var yyhl3316 bool = l >= 0
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3319 := &x.ObjectMeta
		yyv3319.CodecDecodeSelf(d)
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3320 := &x.InvolvedObject
		yyv3320.CodecDecodeSelf(d)
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3323 := &x.Source
		yyv3323.CodecDecodeSelf(d)
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3324 := &x.FirstTimestamp
		yym3325 := z.DecBinary()
		_ = yym3325
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3324) {
		} else if yym3325 {
			z.DecBinaryUnmarshal(yyv3324)
		} else if !yym3325 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3324)
		} else {
			z.DecFallback(yyv3324, false)
		}
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3326 := &x.LastTimestamp
		yym3327 := z.DecBinary()
		_ = yym3327
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3326) {
		} else if yym3327 {
			z.DecBinaryUnmarshal(yyv3326)
		} else if !yym3327 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3326)
		} else {
			z.DecFallback(yyv3326, false)
		}
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3316++
	if yyhl3316 {
		yyb3316 = yyj3316 > l
	} else {
		yyb3316 = r.CheckBreak()
	}
	if yyb3316 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3316++
		if yyhl3316 {
			yyb3316 = yyj3316 > l
		} else {
			yyb3316 = r.CheckBreak()
		}
		if yyb3316 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3316-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3330 := z.EncBinary()
		_ = yym3330
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3331 := !z.EncBinary()
			yy2arr3331 := z.EncBasicHandle().StructToArray
			var yyq3331 [4]bool
			_, _, _ = yysep3331, yyq3331, yy2arr3331
			const yyr3331 bool = false
			yyq3331[0] = x.Kind != ""
			yyq3331[1] = x.APIVersion != ""
			yyq3331[2] = true
			var yynn3331 int
			if yyr3331 || yy2arr3331 {
				r.EncodeArrayStart(4)
			} else {
				yynn3331 = 1
				for _, b := range yyq3331 {
					if b {
						yynn3331++
					}
				}
				r.EncodeMapStart(yynn3331)
				yynn3331 = 0
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[0] {
					yym3333 := z.EncBinary()
					_ = yym3333
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3331[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3334 := z.EncBinary()
					_ = yym3334
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[1] {
					yym3336 := z.EncBinary()
					_ = yym3336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3331[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3337 := z.EncBinary()
					_ = yym3337
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3331[2] {
					yy3339 := &x.ListMeta
					yym3340 := z.EncBinary()
					_ = yym3340
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3339) {
					} else {
						z.EncFallback(yy3339)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3331[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3341 := &x.ListMeta
					yym3342 := z.EncBinary()
					_ = yym3342
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3341) {
					} else {
						z.EncFallback(yy3341)
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3344 := z.EncBinary()
					_ = yym3344
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3345 := z.EncBinary()
					_ = yym3345
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3331 || yy2arr3331 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3346 := z.DecBinary()
	_ = yym3346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3347 := r.ContainerType()
		if yyct3347 == codecSelferValueTypeMap1234 {
			yyl3347 := r.ReadMapStart()
			if yyl3347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3347, d)
			}
		} else if yyct3347 == codecSelferValueTypeArray1234 {
			yyl3347 := r.ReadArrayStart()
			if yyl3347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3348Slc
	var yyhl3348 bool = l >= 0
	for yyj3348 := 0; ; yyj3348++ {
		if yyhl3348 {
			if yyj3348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3348Slc = r.DecodeBytes(yys3348Slc, true, true)
		yys3348 := string(yys3348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3348 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3351 := &x.ListMeta
				yym3352 := z.DecBinary()
				_ = yym3352
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3351) {
				} else {
					z.DecFallback(yyv3351, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3353 := &x.Items
				yym3354 := z.DecBinary()
				_ = yym3354
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3353), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3348)
		} // end switch yys3348
	} // end for yyj3348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3355 int
	var yyb3355 bool
	var yyhl3355 bool = l >= 0
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3358 := &x.ListMeta
		yym3359 := z.DecBinary()
		_ = yym3359
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3358) {
		} else {
			z.DecFallback(yyv3358, false)
		}
	}
	yyj3355++
	if yyhl3355 {
		yyb3355 = yyj3355 > l
	} else {
		yyb3355 = r.CheckBreak()
	}
	if yyb3355 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3360 := &x.Items
		yym3361 := z.DecBinary()
		_ = yym3361
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3360), d)
		}
	}
	for {
		yyj3355++
		if yyhl3355 {
			yyb3355 = yyj3355 > l
		} else {
			yyb3355 = r.CheckBreak()
		}
		if yyb3355 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3355-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3362 := z.EncBinary()
		_ = yym3362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3363 := !z.EncBinary()
			yy2arr3363 := z.EncBasicHandle().StructToArray
			var yyq3363 [4]bool
			_, _, _ = yysep3363, yyq3363, yy2arr3363
			const yyr3363 bool = false
			yyq3363[0] = x.Kind != ""
			yyq3363[1] = x.APIVersion != ""
			yyq3363[2] = true
			var yynn3363 int
			if yyr3363 || yy2arr3363 {
				r.EncodeArrayStart(4)
			} else {
				yynn3363 = 1
				for _, b := range yyq3363 {
					if b {
						yynn3363++
					}
				}
				r.EncodeMapStart(yynn3363)
				yynn3363 = 0
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3363[0] {
					yym3365 := z.EncBinary()
					_ = yym3365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3366 := z.EncBinary()
					_ = yym3366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3363[1] {
					yym3368 := z.EncBinary()
					_ = yym3368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3363[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3363[2] {
					yy3371 := &x.ListMeta
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3371) {
					} else {
						z.EncFallback(yy3371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3363[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3373 := &x.ListMeta
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3373) {
					} else {
						z.EncFallback(yy3373)
					}
				}
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3376 := z.EncBinary()
					_ = yym3376
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3363 || yy2arr3363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3378 := z.DecBinary()
	_ = yym3378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3379 := r.ContainerType()
		if yyct3379 == codecSelferValueTypeMap1234 {
			yyl3379 := r.ReadMapStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3379, d)
			}
		} else if yyct3379 == codecSelferValueTypeArray1234 {
			yyl3379 := r.ReadArrayStart()
			if yyl3379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3380Slc
	var yyhl3380 bool = l >= 0
	for yyj3380 := 0; ; yyj3380++ {
		if yyhl3380 {
			if yyj3380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3380Slc = r.DecodeBytes(yys3380Slc, true, true)
		yys3380 := string(yys3380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3383 := &x.ListMeta
				yym3384 := z.DecBinary()
				_ = yym3384
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3383) {
				} else {
					z.DecFallback(yyv3383, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3385 := &x.Items
				yym3386 := z.DecBinary()
				_ = yym3386
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3385), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3380)
		} // end switch yys3380
	} // end for yyj3380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3387 int
	var yyb3387 bool
	var yyhl3387 bool = l >= 0
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3390 := &x.ListMeta
		yym3391 := z.DecBinary()
		_ = yym3391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3390) {
		} else {
			z.DecFallback(yyv3390, false)
		}
	}
	yyj3387++
	if yyhl3387 {
		yyb3387 = yyj3387 > l
	} else {
		yyb3387 = r.CheckBreak()
	}
	if yyb3387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3392 := &x.Items
		yym3393 := z.DecBinary()
		_ = yym3393
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3392), d)
		}
	}
	for {
		yyj3387++
		if yyhl3387 {
			yyb3387 = yyj3387 > l
		} else {
			yyb3387 = r.CheckBreak()
		}
		if yyb3387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3394 := z.EncBinary()
	_ = yym3394
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3395 := z.DecBinary()
	_ = yym3395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3396 := z.EncBinary()
		_ = yym3396
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3397 := !z.EncBinary()
			yy2arr3397 := z.EncBasicHandle().StructToArray
			var yyq3397 [6]bool
			_, _, _ = yysep3397, yyq3397, yy2arr3397
			const yyr3397 bool = false
			yyq3397[0] = x.Type != ""
			yyq3397[1] = len(x.Max) != 0
			yyq3397[2] = len(x.Min) != 0
			yyq3397[3] = len(x.Default) != 0
			yyq3397[4] = len(x.DefaultRequest) != 0
			yyq3397[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3397 int
			if yyr3397 || yy2arr3397 {
				r.EncodeArrayStart(6)
			} else {
				yynn3397 = 0
				for _, b := range yyq3397 {
					if b {
						yynn3397++
					}
				}
				r.EncodeMapStart(yynn3397)
				yynn3397 = 0
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3397[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3397[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3397[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3397[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3397[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3397[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3397[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3397 || yy2arr3397 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3404 := z.DecBinary()
	_ = yym3404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3405 := r.ContainerType()
		if yyct3405 == codecSelferValueTypeMap1234 {
			yyl3405 := r.ReadMapStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3405, d)
			}
		} else if yyct3405 == codecSelferValueTypeArray1234 {
			yyl3405 := r.ReadArrayStart()
			if yyl3405 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3405, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3406Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3406Slc
	var yyhl3406 bool = l >= 0
	for yyj3406 := 0; ; yyj3406++ {
		if yyhl3406 {
			if yyj3406 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3406Slc = r.DecodeBytes(yys3406Slc, true, true)
		yys3406 := string(yys3406Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3406 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3408 := &x.Max
				yyv3408.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3409 := &x.Min
				yyv3409.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3410 := &x.Default
				yyv3410.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3411 := &x.DefaultRequest
				yyv3411.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3412 := &x.MaxLimitRequestRatio
				yyv3412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3406)
		} // end switch yys3406
	} // end for yyj3406
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3413 int
	var yyb3413 bool
	var yyhl3413 bool = l >= 0
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3415 := &x.Max
		yyv3415.CodecDecodeSelf(d)
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3416 := &x.Min
		yyv3416.CodecDecodeSelf(d)
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3417 := &x.Default
		yyv3417.CodecDecodeSelf(d)
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3418 := &x.DefaultRequest
		yyv3418.CodecDecodeSelf(d)
	}
	yyj3413++
	if yyhl3413 {
		yyb3413 = yyj3413 > l
	} else {
		yyb3413 = r.CheckBreak()
	}
	if yyb3413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3419 := &x.MaxLimitRequestRatio
		yyv3419.CodecDecodeSelf(d)
	}
	for {
		yyj3413++
		if yyhl3413 {
			yyb3413 = yyj3413 > l
		} else {
			yyb3413 = r.CheckBreak()
		}
		if yyb3413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3420 := z.EncBinary()
		_ = yym3420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3421 := !z.EncBinary()
			yy2arr3421 := z.EncBasicHandle().StructToArray
			var yyq3421 [1]bool
			_, _, _ = yysep3421, yyq3421, yy2arr3421
			const yyr3421 bool = false
			var yynn3421 int
			if yyr3421 || yy2arr3421 {
				r.EncodeArrayStart(1)
			} else {
				yynn3421 = 1
				for _, b := range yyq3421 {
					if b {
						yynn3421++
					}
				}
				r.EncodeMapStart(yynn3421)
				yynn3421 = 0
			}
			if yyr3421 || yy2arr3421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3423 := z.EncBinary()
					_ = yym3423
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3424 := z.EncBinary()
					_ = yym3424
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3421 || yy2arr3421 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3425 := z.DecBinary()
	_ = yym3425
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3426 := r.ContainerType()
		if yyct3426 == codecSelferValueTypeMap1234 {
			yyl3426 := r.ReadMapStart()
			if yyl3426 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3426, d)
			}
		} else if yyct3426 == codecSelferValueTypeArray1234 {
			yyl3426 := r.ReadArrayStart()
			if yyl3426 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3426, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3427Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3427Slc
	var yyhl3427 bool = l >= 0
	for yyj3427 := 0; ; yyj3427++ {
		if yyhl3427 {
			if yyj3427 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3427Slc = r.DecodeBytes(yys3427Slc, true, true)
		yys3427 := string(yys3427Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3427 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3428 := &x.Limits
				yym3429 := z.DecBinary()
				_ = yym3429
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3428), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3427)
		} // end switch yys3427
	} // end for yyj3427
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3430 int
	var yyb3430 bool
	var yyhl3430 bool = l >= 0
	yyj3430++
	if yyhl3430 {
		yyb3430 = yyj3430 > l
	} else {
		yyb3430 = r.CheckBreak()
	}
	if yyb3430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3431 := &x.Limits
		yym3432 := z.DecBinary()
		_ = yym3432
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3431), d)
		}
	}
	for {
		yyj3430++
		if yyhl3430 {
			yyb3430 = yyj3430 > l
		} else {
			yyb3430 = r.CheckBreak()
		}
		if yyb3430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3433 := z.EncBinary()
		_ = yym3433
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3434 := !z.EncBinary()
			yy2arr3434 := z.EncBasicHandle().StructToArray
			var yyq3434 [4]bool
			_, _, _ = yysep3434, yyq3434, yy2arr3434
			const yyr3434 bool = false
			yyq3434[0] = x.Kind != ""
			yyq3434[1] = x.APIVersion != ""
			yyq3434[2] = true
			yyq3434[3] = true
			var yynn3434 int
			if yyr3434 || yy2arr3434 {
				r.EncodeArrayStart(4)
			} else {
				yynn3434 = 0
				for _, b := range yyq3434 {
					if b {
						yynn3434++
					}
				}
				r.EncodeMapStart(yynn3434)
				yynn3434 = 0
			}
			if yyr3434 || yy2arr3434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3434[0] {
					yym3436 := z.EncBinary()
					_ = yym3436
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3434[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3437 := z.EncBinary()
					_ = yym3437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3434 || yy2arr3434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3434[1] {
					yym3439 := z.EncBinary()
					_ = yym3439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3434[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3440 := z.EncBinary()
					_ = yym3440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3434 || yy2arr3434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3434[2] {
					yy3442 := &x.ObjectMeta
					yy3442.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3434[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3443 := &x.ObjectMeta
					yy3443.CodecEncodeSelf(e)
				}
			}
			if yyr3434 || yy2arr3434 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3434[3] {
					yy3445 := &x.Spec
					yy3445.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3434[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3446 := &x.Spec
					yy3446.CodecEncodeSelf(e)
				}
			}
			if yyr3434 || yy2arr3434 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3447 := z.DecBinary()
	_ = yym3447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3448 := r.ContainerType()
		if yyct3448 == codecSelferValueTypeMap1234 {
			yyl3448 := r.ReadMapStart()
			if yyl3448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3448, d)
			}
		} else if yyct3448 == codecSelferValueTypeArray1234 {
			yyl3448 := r.ReadArrayStart()
			if yyl3448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3449Slc
	var yyhl3449 bool = l >= 0
	for yyj3449 := 0; ; yyj3449++ {
		if yyhl3449 {
			if yyj3449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3449Slc = r.DecodeBytes(yys3449Slc, true, true)
		yys3449 := string(yys3449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3449 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3452 := &x.ObjectMeta
				yyv3452.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3453 := &x.Spec
				yyv3453.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3449)
		} // end switch yys3449
	} // end for yyj3449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3454 int
	var yyb3454 bool
	var yyhl3454 bool = l >= 0
	yyj3454++
	if yyhl3454 {
		yyb3454 = yyj3454 > l
	} else {
		yyb3454 = r.CheckBreak()
	}
	if yyb3454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3454++
	if yyhl3454 {
		yyb3454 = yyj3454 > l
	} else {
		yyb3454 = r.CheckBreak()
	}
	if yyb3454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3454++
	if yyhl3454 {
		yyb3454 = yyj3454 > l
	} else {
		yyb3454 = r.CheckBreak()
	}
	if yyb3454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3457 := &x.ObjectMeta
		yyv3457.CodecDecodeSelf(d)
	}
	yyj3454++
	if yyhl3454 {
		yyb3454 = yyj3454 > l
	} else {
		yyb3454 = r.CheckBreak()
	}
	if yyb3454 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3458 := &x.Spec
		yyv3458.CodecDecodeSelf(d)
	}
	for {
		yyj3454++
		if yyhl3454 {
			yyb3454 = yyj3454 > l
		} else {
			yyb3454 = r.CheckBreak()
		}
		if yyb3454 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3454-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3459 := z.EncBinary()
		_ = yym3459
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3460 := !z.EncBinary()
			yy2arr3460 := z.EncBasicHandle().StructToArray
			var yyq3460 [4]bool
			_, _, _ = yysep3460, yyq3460, yy2arr3460
			const yyr3460 bool = false
			yyq3460[0] = x.Kind != ""
			yyq3460[1] = x.APIVersion != ""
			yyq3460[2] = true
			var yynn3460 int
			if yyr3460 || yy2arr3460 {
				r.EncodeArrayStart(4)
			} else {
				yynn3460 = 1
				for _, b := range yyq3460 {
					if b {
						yynn3460++
					}
				}
				r.EncodeMapStart(yynn3460)
				yynn3460 = 0
			}
			if yyr3460 || yy2arr3460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3460[0] {
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3460[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3463 := z.EncBinary()
					_ = yym3463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3460 || yy2arr3460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3460[1] {
					yym3465 := z.EncBinary()
					_ = yym3465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3460[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3466 := z.EncBinary()
					_ = yym3466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3460 || yy2arr3460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3460[2] {
					yy3468 := &x.ListMeta
					yym3469 := z.EncBinary()
					_ = yym3469
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3468) {
					} else {
						z.EncFallback(yy3468)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3460[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3470 := &x.ListMeta
					yym3471 := z.EncBinary()
					_ = yym3471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3470) {
					} else {
						z.EncFallback(yy3470)
					}
				}
			}
			if yyr3460 || yy2arr3460 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3473 := z.EncBinary()
					_ = yym3473
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3460 || yy2arr3460 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3475 := z.DecBinary()
	_ = yym3475
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3476 := r.ContainerType()
		if yyct3476 == codecSelferValueTypeMap1234 {
			yyl3476 := r.ReadMapStart()
			if yyl3476 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3476, d)
			}
		} else if yyct3476 == codecSelferValueTypeArray1234 {
			yyl3476 := r.ReadArrayStart()
			if yyl3476 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3476, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3477Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3477Slc
	var yyhl3477 bool = l >= 0
	for yyj3477 := 0; ; yyj3477++ {
		if yyhl3477 {
			if yyj3477 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3477Slc = r.DecodeBytes(yys3477Slc, true, true)
		yys3477 := string(yys3477Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3477 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3480 := &x.ListMeta
				yym3481 := z.DecBinary()
				_ = yym3481
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3480) {
				} else {
					z.DecFallback(yyv3480, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3482 := &x.Items
				yym3483 := z.DecBinary()
				_ = yym3483
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3482), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3477)
		} // end switch yys3477
	} // end for yyj3477
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3484 int
	var yyb3484 bool
	var yyhl3484 bool = l >= 0
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3487 := &x.ListMeta
		yym3488 := z.DecBinary()
		_ = yym3488
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3487) {
		} else {
			z.DecFallback(yyv3487, false)
		}
	}
	yyj3484++
	if yyhl3484 {
		yyb3484 = yyj3484 > l
	} else {
		yyb3484 = r.CheckBreak()
	}
	if yyb3484 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3489 := &x.Items
		yym3490 := z.DecBinary()
		_ = yym3490
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3489), d)
		}
	}
	for {
		yyj3484++
		if yyhl3484 {
			yyb3484 = yyj3484 > l
		} else {
			yyb3484 = r.CheckBreak()
		}
		if yyb3484 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3484-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3491 := z.EncBinary()
		_ = yym3491
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3492 := !z.EncBinary()
			yy2arr3492 := z.EncBasicHandle().StructToArray
			var yyq3492 [1]bool
			_, _, _ = yysep3492, yyq3492, yy2arr3492
			const yyr3492 bool = false
			yyq3492[0] = len(x.Hard) != 0
			var yynn3492 int
			if yyr3492 || yy2arr3492 {
				r.EncodeArrayStart(1)
			} else {
				yynn3492 = 0
				for _, b := range yyq3492 {
					if b {
						yynn3492++
					}
				}
				r.EncodeMapStart(yynn3492)
				yynn3492 = 0
			}
			if yyr3492 || yy2arr3492 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3492[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3492[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3492 || yy2arr3492 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3494 := z.DecBinary()
	_ = yym3494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3495 := r.ContainerType()
		if yyct3495 == codecSelferValueTypeMap1234 {
			yyl3495 := r.ReadMapStart()
			if yyl3495 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3495, d)
			}
		} else if yyct3495 == codecSelferValueTypeArray1234 {
			yyl3495 := r.ReadArrayStart()
			if yyl3495 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3495, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3496Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3496Slc
	var yyhl3496 bool = l >= 0
	for yyj3496 := 0; ; yyj3496++ {
		if yyhl3496 {
			if yyj3496 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3496Slc = r.DecodeBytes(yys3496Slc, true, true)
		yys3496 := string(yys3496Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3496 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3497 := &x.Hard
				yyv3497.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3496)
		} // end switch yys3496
	} // end for yyj3496
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3498 int
	var yyb3498 bool
	var yyhl3498 bool = l >= 0
	yyj3498++
	if yyhl3498 {
		yyb3498 = yyj3498 > l
	} else {
		yyb3498 = r.CheckBreak()
	}
	if yyb3498 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3499 := &x.Hard
		yyv3499.CodecDecodeSelf(d)
	}
	for {
		yyj3498++
		if yyhl3498 {
			yyb3498 = yyj3498 > l
		} else {
			yyb3498 = r.CheckBreak()
		}
		if yyb3498 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3498-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3500 := z.EncBinary()
		_ = yym3500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3501 := !z.EncBinary()
			yy2arr3501 := z.EncBasicHandle().StructToArray
			var yyq3501 [2]bool
			_, _, _ = yysep3501, yyq3501, yy2arr3501
			const yyr3501 bool = false
			yyq3501[0] = len(x.Hard) != 0
			yyq3501[1] = len(x.Used) != 0
			var yynn3501 int
			if yyr3501 || yy2arr3501 {
				r.EncodeArrayStart(2)
			} else {
				yynn3501 = 0
				for _, b := range yyq3501 {
					if b {
						yynn3501++
					}
				}
				r.EncodeMapStart(yynn3501)
				yynn3501 = 0
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3501[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3501 || yy2arr3501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3504 := z.DecBinary()
	_ = yym3504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3505 := r.ContainerType()
		if yyct3505 == codecSelferValueTypeMap1234 {
			yyl3505 := r.ReadMapStart()
			if yyl3505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3505, d)
			}
		} else if yyct3505 == codecSelferValueTypeArray1234 {
			yyl3505 := r.ReadArrayStart()
			if yyl3505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3506Slc
	var yyhl3506 bool = l >= 0
	for yyj3506 := 0; ; yyj3506++ {
		if yyhl3506 {
			if yyj3506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3506Slc = r.DecodeBytes(yys3506Slc, true, true)
		yys3506 := string(yys3506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3506 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3507 := &x.Hard
				yyv3507.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3508 := &x.Used
				yyv3508.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3506)
		} // end switch yys3506
	} // end for yyj3506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3509 int
	var yyb3509 bool
	var yyhl3509 bool = l >= 0
	yyj3509++
	if yyhl3509 {
		yyb3509 = yyj3509 > l
	} else {
		yyb3509 = r.CheckBreak()
	}
	if yyb3509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3510 := &x.Hard
		yyv3510.CodecDecodeSelf(d)
	}
	yyj3509++
	if yyhl3509 {
		yyb3509 = yyj3509 > l
	} else {
		yyb3509 = r.CheckBreak()
	}
	if yyb3509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3511 := &x.Used
		yyv3511.CodecDecodeSelf(d)
	}
	for {
		yyj3509++
		if yyhl3509 {
			yyb3509 = yyj3509 > l
		} else {
			yyb3509 = r.CheckBreak()
		}
		if yyb3509 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3509-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3512 := z.EncBinary()
		_ = yym3512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3513 := !z.EncBinary()
			yy2arr3513 := z.EncBasicHandle().StructToArray
			var yyq3513 [5]bool
			_, _, _ = yysep3513, yyq3513, yy2arr3513
			const yyr3513 bool = false
			yyq3513[0] = x.Kind != ""
			yyq3513[1] = x.APIVersion != ""
			yyq3513[2] = true
			yyq3513[3] = true
			yyq3513[4] = true
			var yynn3513 int
			if yyr3513 || yy2arr3513 {
				r.EncodeArrayStart(5)
			} else {
				yynn3513 = 0
				for _, b := range yyq3513 {
					if b {
						yynn3513++
					}
				}
				r.EncodeMapStart(yynn3513)
				yynn3513 = 0
			}
			if yyr3513 || yy2arr3513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3513[0] {
					yym3515 := z.EncBinary()
					_ = yym3515
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3513[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3516 := z.EncBinary()
					_ = yym3516
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3513 || yy2arr3513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3513[1] {
					yym3518 := z.EncBinary()
					_ = yym3518
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3513[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3519 := z.EncBinary()
					_ = yym3519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3513 || yy2arr3513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3513[2] {
					yy3521 := &x.ObjectMeta
					yy3521.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3513[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3522 := &x.ObjectMeta
					yy3522.CodecEncodeSelf(e)
				}
			}
			if yyr3513 || yy2arr3513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3513[3] {
					yy3524 := &x.Spec
					yy3524.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3513[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3525 := &x.Spec
					yy3525.CodecEncodeSelf(e)
				}
			}
			if yyr3513 || yy2arr3513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3513[4] {
					yy3527 := &x.Status
					yy3527.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3513[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3528 := &x.Status
					yy3528.CodecEncodeSelf(e)
				}
			}
			if yyr3513 || yy2arr3513 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3529 := z.DecBinary()
	_ = yym3529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3530 := r.ContainerType()
		if yyct3530 == codecSelferValueTypeMap1234 {
			yyl3530 := r.ReadMapStart()
			if yyl3530 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3530, d)
			}
		} else if yyct3530 == codecSelferValueTypeArray1234 {
			yyl3530 := r.ReadArrayStart()
			if yyl3530 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3531Slc
	var yyhl3531 bool = l >= 0
	for yyj3531 := 0; ; yyj3531++ {
		if yyhl3531 {
			if yyj3531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3531Slc = r.DecodeBytes(yys3531Slc, true, true)
		yys3531 := string(yys3531Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3531 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3534 := &x.ObjectMeta
				yyv3534.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3535 := &x.Spec
				yyv3535.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3536 := &x.Status
				yyv3536.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3531)
		} // end switch yys3531
	} // end for yyj3531
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3537 int
	var yyb3537 bool
	var yyhl3537 bool = l >= 0
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3540 := &x.ObjectMeta
		yyv3540.CodecDecodeSelf(d)
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3541 := &x.Spec
		yyv3541.CodecDecodeSelf(d)
	}
	yyj3537++
	if yyhl3537 {
		yyb3537 = yyj3537 > l
	} else {
		yyb3537 = r.CheckBreak()
	}
	if yyb3537 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3542 := &x.Status
		yyv3542.CodecDecodeSelf(d)
	}
	for {
		yyj3537++
		if yyhl3537 {
			yyb3537 = yyj3537 > l
		} else {
			yyb3537 = r.CheckBreak()
		}
		if yyb3537 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3537-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3543 := z.EncBinary()
		_ = yym3543
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3544 := !z.EncBinary()
			yy2arr3544 := z.EncBasicHandle().StructToArray
			var yyq3544 [4]bool
			_, _, _ = yysep3544, yyq3544, yy2arr3544
			const yyr3544 bool = false
			yyq3544[0] = x.Kind != ""
			yyq3544[1] = x.APIVersion != ""
			yyq3544[2] = true
			var yynn3544 int
			if yyr3544 || yy2arr3544 {
				r.EncodeArrayStart(4)
			} else {
				yynn3544 = 1
				for _, b := range yyq3544 {
					if b {
						yynn3544++
					}
				}
				r.EncodeMapStart(yynn3544)
				yynn3544 = 0
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[0] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[1] {
					yym3549 := z.EncBinary()
					_ = yym3549
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3544[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3550 := z.EncBinary()
					_ = yym3550
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3544[2] {
					yy3552 := &x.ListMeta
					yym3553 := z.EncBinary()
					_ = yym3553
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3552) {
					} else {
						z.EncFallback(yy3552)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3544[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3554 := &x.ListMeta
					yym3555 := z.EncBinary()
					_ = yym3555
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3554) {
					} else {
						z.EncFallback(yy3554)
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3557 := z.EncBinary()
					_ = yym3557
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3544 || yy2arr3544 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3559 := z.DecBinary()
	_ = yym3559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3560 := r.ContainerType()
		if yyct3560 == codecSelferValueTypeMap1234 {
			yyl3560 := r.ReadMapStart()
			if yyl3560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3560, d)
			}
		} else if yyct3560 == codecSelferValueTypeArray1234 {
			yyl3560 := r.ReadArrayStart()
			if yyl3560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3561Slc
	var yyhl3561 bool = l >= 0
	for yyj3561 := 0; ; yyj3561++ {
		if yyhl3561 {
			if yyj3561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3561Slc = r.DecodeBytes(yys3561Slc, true, true)
		yys3561 := string(yys3561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3561 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3564 := &x.ListMeta
				yym3565 := z.DecBinary()
				_ = yym3565
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3564) {
				} else {
					z.DecFallback(yyv3564, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3566 := &x.Items
				yym3567 := z.DecBinary()
				_ = yym3567
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3566), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3561)
		} // end switch yys3561
	} // end for yyj3561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3568 int
	var yyb3568 bool
	var yyhl3568 bool = l >= 0
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3571 := &x.ListMeta
		yym3572 := z.DecBinary()
		_ = yym3572
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3571) {
		} else {
			z.DecFallback(yyv3571, false)
		}
	}
	yyj3568++
	if yyhl3568 {
		yyb3568 = yyj3568 > l
	} else {
		yyb3568 = r.CheckBreak()
	}
	if yyb3568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3573 := &x.Items
		yym3574 := z.DecBinary()
		_ = yym3574
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3573), d)
		}
	}
	for {
		yyj3568++
		if yyhl3568 {
			yyb3568 = yyj3568 > l
		} else {
			yyb3568 = r.CheckBreak()
		}
		if yyb3568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3575 := z.EncBinary()
		_ = yym3575
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3576 := !z.EncBinary()
			yy2arr3576 := z.EncBasicHandle().StructToArray
			var yyq3576 [5]bool
			_, _, _ = yysep3576, yyq3576, yy2arr3576
			const yyr3576 bool = false
			yyq3576[0] = x.Kind != ""
			yyq3576[1] = x.APIVersion != ""
			yyq3576[2] = true
			yyq3576[3] = len(x.Data) != 0
			yyq3576[4] = x.Type != ""
			var yynn3576 int
			if yyr3576 || yy2arr3576 {
				r.EncodeArrayStart(5)
			} else {
				yynn3576 = 0
				for _, b := range yyq3576 {
					if b {
						yynn3576++
					}
				}
				r.EncodeMapStart(yynn3576)
				yynn3576 = 0
			}
			if yyr3576 || yy2arr3576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3576[0] {
					yym3578 := z.EncBinary()
					_ = yym3578
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3576[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3579 := z.EncBinary()
					_ = yym3579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3576 || yy2arr3576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3576[1] {
					yym3581 := z.EncBinary()
					_ = yym3581
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3576[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3582 := z.EncBinary()
					_ = yym3582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3576 || yy2arr3576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3576[2] {
					yy3584 := &x.ObjectMeta
					yy3584.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3576[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3585 := &x.ObjectMeta
					yy3585.CodecEncodeSelf(e)
				}
			}
			if yyr3576 || yy2arr3576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3576[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3587 := z.EncBinary()
						_ = yym3587
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3576[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3588 := z.EncBinary()
						_ = yym3588
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3576 || yy2arr3576 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3576[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3576[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3576 || yy2arr3576 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3590 := z.DecBinary()
	_ = yym3590
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3591 := r.ContainerType()
		if yyct3591 == codecSelferValueTypeMap1234 {
			yyl3591 := r.ReadMapStart()
			if yyl3591 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3591, d)
			}
		} else if yyct3591 == codecSelferValueTypeArray1234 {
			yyl3591 := r.ReadArrayStart()
			if yyl3591 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3591, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3592Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3592Slc
	var yyhl3592 bool = l >= 0
	for yyj3592 := 0; ; yyj3592++ {
		if yyhl3592 {
			if yyj3592 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3592Slc = r.DecodeBytes(yys3592Slc, true, true)
		yys3592 := string(yys3592Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3592 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3595 := &x.ObjectMeta
				yyv3595.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3596 := &x.Data
				yym3597 := z.DecBinary()
				_ = yym3597
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3596), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3592)
		} // end switch yys3592
	} // end for yyj3592
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3599 int
	var yyb3599 bool
	var yyhl3599 bool = l >= 0
	yyj3599++
	if yyhl3599 {
		yyb3599 = yyj3599 > l
	} else {
		yyb3599 = r.CheckBreak()
	}
	if yyb3599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3599++
	if yyhl3599 {
		yyb3599 = yyj3599 > l
	} else {
		yyb3599 = r.CheckBreak()
	}
	if yyb3599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3599++
	if yyhl3599 {
		yyb3599 = yyj3599 > l
	} else {
		yyb3599 = r.CheckBreak()
	}
	if yyb3599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3602 := &x.ObjectMeta
		yyv3602.CodecDecodeSelf(d)
	}
	yyj3599++
	if yyhl3599 {
		yyb3599 = yyj3599 > l
	} else {
		yyb3599 = r.CheckBreak()
	}
	if yyb3599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3603 := &x.Data
		yym3604 := z.DecBinary()
		_ = yym3604
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3603), d)
		}
	}
	yyj3599++
	if yyhl3599 {
		yyb3599 = yyj3599 > l
	} else {
		yyb3599 = r.CheckBreak()
	}
	if yyb3599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3599++
		if yyhl3599 {
			yyb3599 = yyj3599 > l
		} else {
			yyb3599 = r.CheckBreak()
		}
		if yyb3599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3606 := z.EncBinary()
	_ = yym3606
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3607 := z.DecBinary()
	_ = yym3607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3608 := z.EncBinary()
		_ = yym3608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3609 := !z.EncBinary()
			yy2arr3609 := z.EncBasicHandle().StructToArray
			var yyq3609 [4]bool
			_, _, _ = yysep3609, yyq3609, yy2arr3609
			const yyr3609 bool = false
			yyq3609[0] = x.Kind != ""
			yyq3609[1] = x.APIVersion != ""
			yyq3609[2] = true
			var yynn3609 int
			if yyr3609 || yy2arr3609 {
				r.EncodeArrayStart(4)
			} else {
				yynn3609 = 1
				for _, b := range yyq3609 {
					if b {
						yynn3609++
					}
				}
				r.EncodeMapStart(yynn3609)
				yynn3609 = 0
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[0] {
					yym3611 := z.EncBinary()
					_ = yym3611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3612 := z.EncBinary()
					_ = yym3612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[1] {
					yym3614 := z.EncBinary()
					_ = yym3614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3615 := z.EncBinary()
					_ = yym3615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[2] {
					yy3617 := &x.ListMeta
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3617) {
					} else {
						z.EncFallback(yy3617)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3609[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3619 := &x.ListMeta
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3619) {
					} else {
						z.EncFallback(yy3619)
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3622 := z.EncBinary()
					_ = yym3622
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3624 := z.DecBinary()
	_ = yym3624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3625 := r.ContainerType()
		if yyct3625 == codecSelferValueTypeMap1234 {
			yyl3625 := r.ReadMapStart()
			if yyl3625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3625, d)
			}
		} else if yyct3625 == codecSelferValueTypeArray1234 {
			yyl3625 := r.ReadArrayStart()
			if yyl3625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3626Slc
	var yyhl3626 bool = l >= 0
	for yyj3626 := 0; ; yyj3626++ {
		if yyhl3626 {
			if yyj3626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3626Slc = r.DecodeBytes(yys3626Slc, true, true)
		yys3626 := string(yys3626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3626 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3629 := &x.ListMeta
				yym3630 := z.DecBinary()
				_ = yym3630
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3629) {
				} else {
					z.DecFallback(yyv3629, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3631 := &x.Items
				yym3632 := z.DecBinary()
				_ = yym3632
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3631), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3626)
		} // end switch yys3626
	} // end for yyj3626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3633 int
	var yyb3633 bool
	var yyhl3633 bool = l >= 0
	yyj3633++
	if yyhl3633 {
		yyb3633 = yyj3633 > l
	} else {
		yyb3633 = r.CheckBreak()
	}
	if yyb3633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3633++
	if yyhl3633 {
		yyb3633 = yyj3633 > l
	} else {
		yyb3633 = r.CheckBreak()
	}
	if yyb3633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3633++
	if yyhl3633 {
		yyb3633 = yyj3633 > l
	} else {
		yyb3633 = r.CheckBreak()
	}
	if yyb3633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3636 := &x.ListMeta
		yym3637 := z.DecBinary()
		_ = yym3637
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3636) {
		} else {
			z.DecFallback(yyv3636, false)
		}
	}
	yyj3633++
	if yyhl3633 {
		yyb3633 = yyj3633 > l
	} else {
		yyb3633 = r.CheckBreak()
	}
	if yyb3633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3638 := &x.Items
		yym3639 := z.DecBinary()
		_ = yym3639
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3638), d)
		}
	}
	for {
		yyj3633++
		if yyhl3633 {
			yyb3633 = yyj3633 > l
		} else {
			yyb3633 = r.CheckBreak()
		}
		if yyb3633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3640 := z.EncBinary()
		_ = yym3640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3641 := !z.EncBinary()
			yy2arr3641 := z.EncBasicHandle().StructToArray
			var yyq3641 [4]bool
			_, _, _ = yysep3641, yyq3641, yy2arr3641
			const yyr3641 bool = false
			yyq3641[0] = x.Kind != ""
			yyq3641[1] = x.APIVersion != ""
			yyq3641[2] = true
			yyq3641[3] = len(x.Data) != 0
			var yynn3641 int
			if yyr3641 || yy2arr3641 {
				r.EncodeArrayStart(4)
			} else {
				yynn3641 = 0
				for _, b := range yyq3641 {
					if b {
						yynn3641++
					}
				}
				r.EncodeMapStart(yynn3641)
				yynn3641 = 0
			}
			if yyr3641 || yy2arr3641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3641[0] {
					yym3643 := z.EncBinary()
					_ = yym3643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3641[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3644 := z.EncBinary()
					_ = yym3644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3641 || yy2arr3641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3641[1] {
					yym3646 := z.EncBinary()
					_ = yym3646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3641[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3641 || yy2arr3641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3641[2] {
					yy3649 := &x.ObjectMeta
					yy3649.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3641[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3650 := &x.ObjectMeta
					yy3650.CodecEncodeSelf(e)
				}
			}
			if yyr3641 || yy2arr3641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3641[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3652 := z.EncBinary()
						_ = yym3652
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3641[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3653 := z.EncBinary()
						_ = yym3653
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr3641 || yy2arr3641 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3654 := z.DecBinary()
	_ = yym3654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3655 := r.ContainerType()
		if yyct3655 == codecSelferValueTypeMap1234 {
			yyl3655 := r.ReadMapStart()
			if yyl3655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3655, d)
			}
		} else if yyct3655 == codecSelferValueTypeArray1234 {
			yyl3655 := r.ReadArrayStart()
			if yyl3655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3656Slc
	var yyhl3656 bool = l >= 0
	for yyj3656 := 0; ; yyj3656++ {
		if yyhl3656 {
			if yyj3656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3656Slc = r.DecodeBytes(yys3656Slc, true, true)
		yys3656 := string(yys3656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3656 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3659 := &x.ObjectMeta
				yyv3659.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3660 := &x.Data
				yym3661 := z.DecBinary()
				_ = yym3661
				if false {
				} else {
					z.F.DecMapStringStringX(yyv3660, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3656)
		} // end switch yys3656
	} // end for yyj3656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3662 int
	var yyb3662 bool
	var yyhl3662 bool = l >= 0
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3665 := &x.ObjectMeta
		yyv3665.CodecDecodeSelf(d)
	}
	yyj3662++
	if yyhl3662 {
		yyb3662 = yyj3662 > l
	} else {
		yyb3662 = r.CheckBreak()
	}
	if yyb3662 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3666 := &x.Data
		yym3667 := z.DecBinary()
		_ = yym3667
		if false {
		} else {
			z.F.DecMapStringStringX(yyv3666, false, d)
		}
	}
	for {
		yyj3662++
		if yyhl3662 {
			yyb3662 = yyj3662 > l
		} else {
			yyb3662 = r.CheckBreak()
		}
		if yyb3662 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3662-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3668 := z.EncBinary()
		_ = yym3668
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3669 := !z.EncBinary()
			yy2arr3669 := z.EncBasicHandle().StructToArray
			var yyq3669 [4]bool
			_, _, _ = yysep3669, yyq3669, yy2arr3669
			const yyr3669 bool = false
			yyq3669[0] = x.Kind != ""
			yyq3669[1] = x.APIVersion != ""
			yyq3669[2] = true
			yyq3669[3] = len(x.Items) != 0
			var yynn3669 int
			if yyr3669 || yy2arr3669 {
				r.EncodeArrayStart(4)
			} else {
				yynn3669 = 0
				for _, b := range yyq3669 {
					if b {
						yynn3669++
					}
				}
				r.EncodeMapStart(yynn3669)
				yynn3669 = 0
			}
			if yyr3669 || yy2arr3669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3669[0] {
					yym3671 := z.EncBinary()
					_ = yym3671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3669[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3672 := z.EncBinary()
					_ = yym3672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3669 || yy2arr3669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3669[1] {
					yym3674 := z.EncBinary()
					_ = yym3674
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3669[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3675 := z.EncBinary()
					_ = yym3675
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3669 || yy2arr3669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3669[2] {
					yy3677 := &x.ListMeta
					yym3678 := z.EncBinary()
					_ = yym3678
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3677) {
					} else {
						z.EncFallback(yy3677)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3669[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3679 := &x.ListMeta
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3679) {
					} else {
						z.EncFallback(yy3679)
					}
				}
			}
			if yyr3669 || yy2arr3669 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3669[3] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3682 := z.EncBinary()
						_ = yym3682
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3669[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3683 := z.EncBinary()
						_ = yym3683
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				}
			}
			if yyr3669 || yy2arr3669 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3684 := z.DecBinary()
	_ = yym3684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3685 := r.ContainerType()
		if yyct3685 == codecSelferValueTypeMap1234 {
			yyl3685 := r.ReadMapStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3685, d)
			}
		} else if yyct3685 == codecSelferValueTypeArray1234 {
			yyl3685 := r.ReadArrayStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3686Slc
	var yyhl3686 bool = l >= 0
	for yyj3686 := 0; ; yyj3686++ {
		if yyhl3686 {
			if yyj3686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3686Slc = r.DecodeBytes(yys3686Slc, true, true)
		yys3686 := string(yys3686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3686 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3689 := &x.ListMeta
				yym3690 := z.DecBinary()
				_ = yym3690
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3689) {
				} else {
					z.DecFallback(yyv3689, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3691 := &x.Items
				yym3692 := z.DecBinary()
				_ = yym3692
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv3691), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3686)
		} // end switch yys3686
	} // end for yyj3686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3693 int
	var yyb3693 bool
	var yyhl3693 bool = l >= 0
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3696 := &x.ListMeta
		yym3697 := z.DecBinary()
		_ = yym3697
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3696) {
		} else {
			z.DecFallback(yyv3696, false)
		}
	}
	yyj3693++
	if yyhl3693 {
		yyb3693 = yyj3693 > l
	} else {
		yyb3693 = r.CheckBreak()
	}
	if yyb3693 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3698 := &x.Items
		yym3699 := z.DecBinary()
		_ = yym3699
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv3698), d)
		}
	}
	for {
		yyj3693++
		if yyhl3693 {
			yyb3693 = yyj3693 > l
		} else {
			yyb3693 = r.CheckBreak()
		}
		if yyb3693 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3693-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3700 := z.EncBinary()
	_ = yym3700
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3701 := z.DecBinary()
	_ = yym3701
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3702 := z.EncBinary()
		_ = yym3702
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3703 := !z.EncBinary()
			yy2arr3703 := z.EncBasicHandle().StructToArray
			var yyq3703 [4]bool
			_, _, _ = yysep3703, yyq3703, yy2arr3703
			const yyr3703 bool = false
			yyq3703[2] = x.Message != ""
			yyq3703[3] = x.Error != ""
			var yynn3703 int
			if yyr3703 || yy2arr3703 {
				r.EncodeArrayStart(4)
			} else {
				yynn3703 = 2
				for _, b := range yyq3703 {
					if b {
						yynn3703++
					}
				}
				r.EncodeMapStart(yynn3703)
				yynn3703 = 0
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[2] {
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3703[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3708 := z.EncBinary()
					_ = yym3708
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3703[3] {
					yym3710 := z.EncBinary()
					_ = yym3710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3703[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3711 := z.EncBinary()
					_ = yym3711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3703 || yy2arr3703 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3712 := z.DecBinary()
	_ = yym3712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3713 := r.ContainerType()
		if yyct3713 == codecSelferValueTypeMap1234 {
			yyl3713 := r.ReadMapStart()
			if yyl3713 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3713, d)
			}
		} else if yyct3713 == codecSelferValueTypeArray1234 {
			yyl3713 := r.ReadArrayStart()
			if yyl3713 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3713, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3714Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3714Slc
	var yyhl3714 bool = l >= 0
	for yyj3714 := 0; ; yyj3714++ {
		if yyhl3714 {
			if yyj3714 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3714Slc = r.DecodeBytes(yys3714Slc, true, true)
		yys3714 := string(yys3714Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3714 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3714)
		} // end switch yys3714
	} // end for yyj3714
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3719 int
	var yyb3719 bool
	var yyhl3719 bool = l >= 0
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3719++
	if yyhl3719 {
		yyb3719 = yyj3719 > l
	} else {
		yyb3719 = r.CheckBreak()
	}
	if yyb3719 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3719++
		if yyhl3719 {
			yyb3719 = yyj3719 > l
		} else {
			yyb3719 = r.CheckBreak()
		}
		if yyb3719 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3719-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3724 := z.EncBinary()
		_ = yym3724
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3725 := !z.EncBinary()
			yy2arr3725 := z.EncBasicHandle().StructToArray
			var yyq3725 [4]bool
			_, _, _ = yysep3725, yyq3725, yy2arr3725
			const yyr3725 bool = false
			yyq3725[0] = x.Kind != ""
			yyq3725[1] = x.APIVersion != ""
			yyq3725[2] = true
			yyq3725[3] = len(x.Conditions) != 0
			var yynn3725 int
			if yyr3725 || yy2arr3725 {
				r.EncodeArrayStart(4)
			} else {
				yynn3725 = 0
				for _, b := range yyq3725 {
					if b {
						yynn3725++
					}
				}
				r.EncodeMapStart(yynn3725)
				yynn3725 = 0
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3725[0] {
					yym3727 := z.EncBinary()
					_ = yym3727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3725[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3728 := z.EncBinary()
					_ = yym3728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3725[1] {
					yym3730 := z.EncBinary()
					_ = yym3730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3725[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3731 := z.EncBinary()
					_ = yym3731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3725[2] {
					yy3733 := &x.ObjectMeta
					yy3733.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3725[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3734 := &x.ObjectMeta
					yy3734.CodecEncodeSelf(e)
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3725[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3736 := z.EncBinary()
						_ = yym3736
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3725[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3737 := z.EncBinary()
						_ = yym3737
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3725 || yy2arr3725 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3738 := z.DecBinary()
	_ = yym3738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3739 := r.ContainerType()
		if yyct3739 == codecSelferValueTypeMap1234 {
			yyl3739 := r.ReadMapStart()
			if yyl3739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3739, d)
			}
		} else if yyct3739 == codecSelferValueTypeArray1234 {
			yyl3739 := r.ReadArrayStart()
			if yyl3739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3740Slc
	var yyhl3740 bool = l >= 0
	for yyj3740 := 0; ; yyj3740++ {
		if yyhl3740 {
			if yyj3740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3740Slc = r.DecodeBytes(yys3740Slc, true, true)
		yys3740 := string(yys3740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3740 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3743 := &x.ObjectMeta
				yyv3743.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3744 := &x.Conditions
				yym3745 := z.DecBinary()
				_ = yym3745
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3744), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3740)
		} // end switch yys3740
	} // end for yyj3740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3746 int
	var yyb3746 bool
	var yyhl3746 bool = l >= 0
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3749 := &x.ObjectMeta
		yyv3749.CodecDecodeSelf(d)
	}
	yyj3746++
	if yyhl3746 {
		yyb3746 = yyj3746 > l
	} else {
		yyb3746 = r.CheckBreak()
	}
	if yyb3746 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3750 := &x.Conditions
		yym3751 := z.DecBinary()
		_ = yym3751
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3750), d)
		}
	}
	for {
		yyj3746++
		if yyhl3746 {
			yyb3746 = yyj3746 > l
		} else {
			yyb3746 = r.CheckBreak()
		}
		if yyb3746 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3746-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3752 := z.EncBinary()
		_ = yym3752
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3753 := !z.EncBinary()
			yy2arr3753 := z.EncBasicHandle().StructToArray
			var yyq3753 [4]bool
			_, _, _ = yysep3753, yyq3753, yy2arr3753
			const yyr3753 bool = false
			yyq3753[0] = x.Kind != ""
			yyq3753[1] = x.APIVersion != ""
			yyq3753[2] = true
			var yynn3753 int
			if yyr3753 || yy2arr3753 {
				r.EncodeArrayStart(4)
			} else {
				yynn3753 = 1
				for _, b := range yyq3753 {
					if b {
						yynn3753++
					}
				}
				r.EncodeMapStart(yynn3753)
				yynn3753 = 0
			}
			if yyr3753 || yy2arr3753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3753[0] {
					yym3755 := z.EncBinary()
					_ = yym3755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3753[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3753 || yy2arr3753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3753[1] {
					yym3758 := z.EncBinary()
					_ = yym3758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3753[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3753 || yy2arr3753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3753[2] {
					yy3761 := &x.ListMeta
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3761) {
					} else {
						z.EncFallback(yy3761)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3753[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3763 := &x.ListMeta
					yym3764 := z.EncBinary()
					_ = yym3764
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3763) {
					} else {
						z.EncFallback(yy3763)
					}
				}
			}
			if yyr3753 || yy2arr3753 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3767 := z.EncBinary()
					_ = yym3767
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3753 || yy2arr3753 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3768 := z.DecBinary()
	_ = yym3768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3769 := r.ContainerType()
		if yyct3769 == codecSelferValueTypeMap1234 {
			yyl3769 := r.ReadMapStart()
			if yyl3769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3769, d)
			}
		} else if yyct3769 == codecSelferValueTypeArray1234 {
			yyl3769 := r.ReadArrayStart()
			if yyl3769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3770Slc
	var yyhl3770 bool = l >= 0
	for yyj3770 := 0; ; yyj3770++ {
		if yyhl3770 {
			if yyj3770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3770Slc = r.DecodeBytes(yys3770Slc, true, true)
		yys3770 := string(yys3770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3770 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3773 := &x.ListMeta
				yym3774 := z.DecBinary()
				_ = yym3774
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3773) {
				} else {
					z.DecFallback(yyv3773, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3775 := &x.Items
				yym3776 := z.DecBinary()
				_ = yym3776
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3775), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3770)
		} // end switch yys3770
	} // end for yyj3770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3777 int
	var yyb3777 bool
	var yyhl3777 bool = l >= 0
	yyj3777++
	if yyhl3777 {
		yyb3777 = yyj3777 > l
	} else {
		yyb3777 = r.CheckBreak()
	}
	if yyb3777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3777++
	if yyhl3777 {
		yyb3777 = yyj3777 > l
	} else {
		yyb3777 = r.CheckBreak()
	}
	if yyb3777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3777++
	if yyhl3777 {
		yyb3777 = yyj3777 > l
	} else {
		yyb3777 = r.CheckBreak()
	}
	if yyb3777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3780 := &x.ListMeta
		yym3781 := z.DecBinary()
		_ = yym3781
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3780) {
		} else {
			z.DecFallback(yyv3780, false)
		}
	}
	yyj3777++
	if yyhl3777 {
		yyb3777 = yyj3777 > l
	} else {
		yyb3777 = r.CheckBreak()
	}
	if yyb3777 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3782 := &x.Items
		yym3783 := z.DecBinary()
		_ = yym3783
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3782), d)
		}
	}
	for {
		yyj3777++
		if yyhl3777 {
			yyb3777 = yyj3777 > l
		} else {
			yyb3777 = r.CheckBreak()
		}
		if yyb3777 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3777-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3784 := z.EncBinary()
		_ = yym3784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3785 := !z.EncBinary()
			yy2arr3785 := z.EncBasicHandle().StructToArray
			var yyq3785 [1]bool
			_, _, _ = yysep3785, yyq3785, yy2arr3785
			const yyr3785 bool = false
			yyq3785[0] = len(x.Items) != 0
			var yynn3785 int
			if yyr3785 || yy2arr3785 {
				r.EncodeArrayStart(1)
			} else {
				yynn3785 = 0
				for _, b := range yyq3785 {
					if b {
						yynn3785++
					}
				}
				r.EncodeMapStart(yynn3785)
				yynn3785 = 0
			}
			if yyr3785 || yy2arr3785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3785[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3787 := z.EncBinary()
						_ = yym3787
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3785[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3788 := z.EncBinary()
						_ = yym3788
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr3785 || yy2arr3785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3789 := z.DecBinary()
	_ = yym3789
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3790 := r.ContainerType()
		if yyct3790 == codecSelferValueTypeMap1234 {
			yyl3790 := r.ReadMapStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3790, d)
			}
		} else if yyct3790 == codecSelferValueTypeArray1234 {
			yyl3790 := r.ReadArrayStart()
			if yyl3790 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3790, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3791Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3791Slc
	var yyhl3791 bool = l >= 0
	for yyj3791 := 0; ; yyj3791++ {
		if yyhl3791 {
			if yyj3791 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3791Slc = r.DecodeBytes(yys3791Slc, true, true)
		yys3791 := string(yys3791Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3791 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3792 := &x.Items
				yym3793 := z.DecBinary()
				_ = yym3793
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3792), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3791)
		} // end switch yys3791
	} // end for yyj3791
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3794 int
	var yyb3794 bool
	var yyhl3794 bool = l >= 0
	yyj3794++
	if yyhl3794 {
		yyb3794 = yyj3794 > l
	} else {
		yyb3794 = r.CheckBreak()
	}
	if yyb3794 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3795 := &x.Items
		yym3796 := z.DecBinary()
		_ = yym3796
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3795), d)
		}
	}
	for {
		yyj3794++
		if yyhl3794 {
			yyb3794 = yyj3794 > l
		} else {
			yyb3794 = r.CheckBreak()
		}
		if yyb3794 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3794-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3797 := z.EncBinary()
		_ = yym3797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3798 := !z.EncBinary()
			yy2arr3798 := z.EncBasicHandle().StructToArray
			var yyq3798 [2]bool
			_, _, _ = yysep3798, yyq3798, yy2arr3798
			const yyr3798 bool = false
			var yynn3798 int
			if yyr3798 || yy2arr3798 {
				r.EncodeArrayStart(2)
			} else {
				yynn3798 = 2
				for _, b := range yyq3798 {
					if b {
						yynn3798++
					}
				}
				r.EncodeMapStart(yynn3798)
				yynn3798 = 0
			}
			if yyr3798 || yy2arr3798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3800 := z.EncBinary()
				_ = yym3800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3801 := z.EncBinary()
				_ = yym3801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3798 || yy2arr3798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3803 := &x.FieldRef
				yy3803.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3804 := &x.FieldRef
				yy3804.CodecEncodeSelf(e)
			}
			if yyr3798 || yy2arr3798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3805 := z.DecBinary()
	_ = yym3805
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3806 := r.ContainerType()
		if yyct3806 == codecSelferValueTypeMap1234 {
			yyl3806 := r.ReadMapStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3806, d)
			}
		} else if yyct3806 == codecSelferValueTypeArray1234 {
			yyl3806 := r.ReadArrayStart()
			if yyl3806 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3806, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3807Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3807Slc
	var yyhl3807 bool = l >= 0
	for yyj3807 := 0; ; yyj3807++ {
		if yyhl3807 {
			if yyj3807 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3807Slc = r.DecodeBytes(yys3807Slc, true, true)
		yys3807 := string(yys3807Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3807 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3809 := &x.FieldRef
				yyv3809.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3807)
		} // end switch yys3807
	} // end for yyj3807
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3810 int
	var yyb3810 bool
	var yyhl3810 bool = l >= 0
	yyj3810++
	if yyhl3810 {
		yyb3810 = yyj3810 > l
	} else {
		yyb3810 = r.CheckBreak()
	}
	if yyb3810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3810++
	if yyhl3810 {
		yyb3810 = yyj3810 > l
	} else {
		yyb3810 = r.CheckBreak()
	}
	if yyb3810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3812 := &x.FieldRef
		yyv3812.CodecDecodeSelf(d)
	}
	for {
		yyj3810++
		if yyhl3810 {
			yyb3810 = yyj3810 > l
		} else {
			yyb3810 = r.CheckBreak()
		}
		if yyb3810 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3810-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3813 := z.EncBinary()
		_ = yym3813
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3814 := !z.EncBinary()
			yy2arr3814 := z.EncBasicHandle().StructToArray
			var yyq3814 [5]bool
			_, _, _ = yysep3814, yyq3814, yy2arr3814
			const yyr3814 bool = false
			yyq3814[0] = x.Capabilities != nil
			yyq3814[1] = x.Privileged != nil
			yyq3814[2] = x.SELinuxOptions != nil
			yyq3814[3] = x.RunAsUser != nil
			yyq3814[4] = x.RunAsNonRoot != nil
			var yynn3814 int
			if yyr3814 || yy2arr3814 {
				r.EncodeArrayStart(5)
			} else {
				yynn3814 = 0
				for _, b := range yyq3814 {
					if b {
						yynn3814++
					}
				}
				r.EncodeMapStart(yynn3814)
				yynn3814 = 0
			}
			if yyr3814 || yy2arr3814 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3814[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3814[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3814 || yy2arr3814 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3814[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3817 := *x.Privileged
						yym3818 := z.EncBinary()
						_ = yym3818
						if false {
						} else {
							r.EncodeBool(bool(yy3817))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3814[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3819 := *x.Privileged
						yym3820 := z.EncBinary()
						_ = yym3820
						if false {
						} else {
							r.EncodeBool(bool(yy3819))
						}
					}
				}
			}
			if yyr3814 || yy2arr3814 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3814[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3814[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3814 || yy2arr3814 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3814[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3823 := *x.RunAsUser
						yym3824 := z.EncBinary()
						_ = yym3824
						if false {
						} else {
							r.EncodeInt(int64(yy3823))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3814[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3825 := *x.RunAsUser
						yym3826 := z.EncBinary()
						_ = yym3826
						if false {
						} else {
							r.EncodeInt(int64(yy3825))
						}
					}
				}
			}
			if yyr3814 || yy2arr3814 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3814[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3828 := *x.RunAsNonRoot
						yym3829 := z.EncBinary()
						_ = yym3829
						if false {
						} else {
							r.EncodeBool(bool(yy3828))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3814[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3830 := *x.RunAsNonRoot
						yym3831 := z.EncBinary()
						_ = yym3831
						if false {
						} else {
							r.EncodeBool(bool(yy3830))
						}
					}
				}
			}
			if yyr3814 || yy2arr3814 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3832 := z.DecBinary()
	_ = yym3832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3833 := r.ContainerType()
		if yyct3833 == codecSelferValueTypeMap1234 {
			yyl3833 := r.ReadMapStart()
			if yyl3833 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3833, d)
			}
		} else if yyct3833 == codecSelferValueTypeArray1234 {
			yyl3833 := r.ReadArrayStart()
			if yyl3833 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3834Slc
	var yyhl3834 bool = l >= 0
	for yyj3834 := 0; ; yyj3834++ {
		if yyhl3834 {
			if yyj3834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3834Slc = r.DecodeBytes(yys3834Slc, true, true)
		yys3834 := string(yys3834Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3834 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3837 := z.DecBinary()
				_ = yym3837
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3840 := z.DecBinary()
				_ = yym3840
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3842 := z.DecBinary()
				_ = yym3842
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3834)
		} // end switch yys3834
	} // end for yyj3834
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3843 int
	var yyb3843 bool
	var yyhl3843 bool = l >= 0
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3846 := z.DecBinary()
		_ = yym3846
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3849 := z.DecBinary()
		_ = yym3849
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3851 := z.DecBinary()
		_ = yym3851
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3843++
		if yyhl3843 {
			yyb3843 = yyj3843 > l
		} else {
			yyb3843 = r.CheckBreak()
		}
		if yyb3843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3852 := z.EncBinary()
		_ = yym3852
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3853 := !z.EncBinary()
			yy2arr3853 := z.EncBasicHandle().StructToArray
			var yyq3853 [4]bool
			_, _, _ = yysep3853, yyq3853, yy2arr3853
			const yyr3853 bool = false
			yyq3853[0] = x.User != ""
			yyq3853[1] = x.Role != ""
			yyq3853[2] = x.Type != ""
			yyq3853[3] = x.Level != ""
			var yynn3853 int
			if yyr3853 || yy2arr3853 {
				r.EncodeArrayStart(4)
			} else {
				yynn3853 = 0
				for _, b := range yyq3853 {
					if b {
						yynn3853++
					}
				}
				r.EncodeMapStart(yynn3853)
				yynn3853 = 0
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[0] {
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3856 := z.EncBinary()
					_ = yym3856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[1] {
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3859 := z.EncBinary()
					_ = yym3859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[2] {
					yym3861 := z.EncBinary()
					_ = yym3861
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3862 := z.EncBinary()
					_ = yym3862
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3853[3] {
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3853[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3865 := z.EncBinary()
					_ = yym3865
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3853 || yy2arr3853 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3866 := z.DecBinary()
	_ = yym3866
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3867 := r.ContainerType()
		if yyct3867 == codecSelferValueTypeMap1234 {
			yyl3867 := r.ReadMapStart()
			if yyl3867 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3867, d)
			}
		} else if yyct3867 == codecSelferValueTypeArray1234 {
			yyl3867 := r.ReadArrayStart()
			if yyl3867 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3867, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3868Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3868Slc
	var yyhl3868 bool = l >= 0
	for yyj3868 := 0; ; yyj3868++ {
		if yyhl3868 {
			if yyj3868 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3868Slc = r.DecodeBytes(yys3868Slc, true, true)
		yys3868 := string(yys3868Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3868 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3868)
		} // end switch yys3868
	} // end for yyj3868
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3873 int
	var yyb3873 bool
	var yyhl3873 bool = l >= 0
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3873++
	if yyhl3873 {
		yyb3873 = yyj3873 > l
	} else {
		yyb3873 = r.CheckBreak()
	}
	if yyb3873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3873++
		if yyhl3873 {
			yyb3873 = yyj3873 > l
		} else {
			yyb3873 = r.CheckBreak()
		}
		if yyb3873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3878 := z.EncBinary()
		_ = yym3878
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3879 := !z.EncBinary()
			yy2arr3879 := z.EncBasicHandle().StructToArray
			var yyq3879 [5]bool
			_, _, _ = yysep3879, yyq3879, yy2arr3879
			const yyr3879 bool = false
			yyq3879[0] = x.Kind != ""
			yyq3879[1] = x.APIVersion != ""
			yyq3879[2] = true
			var yynn3879 int
			if yyr3879 || yy2arr3879 {
				r.EncodeArrayStart(5)
			} else {
				yynn3879 = 2
				for _, b := range yyq3879 {
					if b {
						yynn3879++
					}
				}
				r.EncodeMapStart(yynn3879)
				yynn3879 = 0
			}
			if yyr3879 || yy2arr3879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3879[0] {
					yym3881 := z.EncBinary()
					_ = yym3881
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3879[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3882 := z.EncBinary()
					_ = yym3882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3879 || yy2arr3879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3879[1] {
					yym3884 := z.EncBinary()
					_ = yym3884
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3879[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3885 := z.EncBinary()
					_ = yym3885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3879 || yy2arr3879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3879[2] {
					yy3887 := &x.ObjectMeta
					yy3887.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3879[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3888 := &x.ObjectMeta
					yy3888.CodecEncodeSelf(e)
				}
			}
			if yyr3879 || yy2arr3879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3890 := z.EncBinary()
				_ = yym3890
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3891 := z.EncBinary()
				_ = yym3891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3879 || yy2arr3879 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3893 := z.EncBinary()
					_ = yym3893
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3879 || yy2arr3879 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3895 := z.DecBinary()
	_ = yym3895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3896 := r.ContainerType()
		if yyct3896 == codecSelferValueTypeMap1234 {
			yyl3896 := r.ReadMapStart()
			if yyl3896 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3896, d)
			}
		} else if yyct3896 == codecSelferValueTypeArray1234 {
			yyl3896 := r.ReadArrayStart()
			if yyl3896 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3897Slc
	var yyhl3897 bool = l >= 0
	for yyj3897 := 0; ; yyj3897++ {
		if yyhl3897 {
			if yyj3897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3897Slc = r.DecodeBytes(yys3897Slc, true, true)
		yys3897 := string(yys3897Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3897 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3900 := &x.ObjectMeta
				yyv3900.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3902 := &x.Data
				yym3903 := z.DecBinary()
				_ = yym3903
				if false {
				} else {
					*yyv3902 = r.DecodeBytes(*(*[]byte)(yyv3902), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3897)
		} // end switch yys3897
	} // end for yyj3897
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3904 int
	var yyb3904 bool
	var yyhl3904 bool = l >= 0
	yyj3904++
	if yyhl3904 {
		yyb3904 = yyj3904 > l
	} else {
		yyb3904 = r.CheckBreak()
	}
	if yyb3904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3904++
	if yyhl3904 {
		yyb3904 = yyj3904 > l
	} else {
		yyb3904 = r.CheckBreak()
	}
	if yyb3904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3904++
	if yyhl3904 {
		yyb3904 = yyj3904 > l
	} else {
		yyb3904 = r.CheckBreak()
	}
	if yyb3904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3907 := &x.ObjectMeta
		yyv3907.CodecDecodeSelf(d)
	}
	yyj3904++
	if yyhl3904 {
		yyb3904 = yyj3904 > l
	} else {
		yyb3904 = r.CheckBreak()
	}
	if yyb3904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3904++
	if yyhl3904 {
		yyb3904 = yyj3904 > l
	} else {
		yyb3904 = r.CheckBreak()
	}
	if yyb3904 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3909 := &x.Data
		yym3910 := z.DecBinary()
		_ = yym3910
		if false {
		} else {
			*yyv3909 = r.DecodeBytes(*(*[]byte)(yyv3909), false, false)
		}
	}
	for {
		yyj3904++
		if yyhl3904 {
			yyb3904 = yyj3904 > l
		} else {
			yyb3904 = r.CheckBreak()
		}
		if yyb3904 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3904-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3911 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3911.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3912 := *v
	yyh3912, yyl3912 := z.DecSliceHelperStart()
	var yyc3912 bool
	if yyl3912 == 0 {
		if yyv3912 == nil {
			yyv3912 = []PersistentVolumeAccessMode{}
			yyc3912 = true
		} else if len(yyv3912) != 0 {
			yyv3912 = yyv3912[:0]
			yyc3912 = true
		}
	} else if yyl3912 > 0 {
		var yyrr3912, yyrl3912 int
		var yyrt3912 bool
		if yyl3912 > cap(yyv3912) {

			yyrl3912, yyrt3912 = z.DecInferLen(yyl3912, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3912 {
				if yyrl3912 <= cap(yyv3912) {
					yyv3912 = yyv3912[:yyrl3912]
				} else {
					yyv3912 = make([]PersistentVolumeAccessMode, yyrl3912)
				}
			} else {
				yyv3912 = make([]PersistentVolumeAccessMode, yyrl3912)
			}
			yyc3912 = true
			yyrr3912 = len(yyv3912)
		} else if yyl3912 != len(yyv3912) {
			yyv3912 = yyv3912[:yyl3912]
			yyc3912 = true
		}
		yyj3912 := 0
		for ; yyj3912 < yyrr3912; yyj3912++ {
			yyh3912.ElemContainerState(yyj3912)
			if r.TryDecodeAsNil() {
				yyv3912[yyj3912] = ""
			} else {
				yyv3912[yyj3912] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3912 {
			for ; yyj3912 < yyl3912; yyj3912++ {
				yyv3912 = append(yyv3912, "")
				yyh3912.ElemContainerState(yyj3912)
				if r.TryDecodeAsNil() {
					yyv3912[yyj3912] = ""
				} else {
					yyv3912[yyj3912] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3912 := 0
		for ; !r.CheckBreak(); yyj3912++ {

			if yyj3912 >= len(yyv3912) {
				yyv3912 = append(yyv3912, "") // var yyz3912 PersistentVolumeAccessMode
				yyc3912 = true
			}
			yyh3912.ElemContainerState(yyj3912)
			if yyj3912 < len(yyv3912) {
				if r.TryDecodeAsNil() {
					yyv3912[yyj3912] = ""
				} else {
					yyv3912[yyj3912] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3912 < len(yyv3912) {
			yyv3912 = yyv3912[:yyj3912]
			yyc3912 = true
		} else if yyj3912 == 0 && yyv3912 == nil {
			yyv3912 = []PersistentVolumeAccessMode{}
			yyc3912 = true
		}
	}
	yyh3912.End()
	if yyc3912 {
		*v = yyv3912
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeCondition(v []PersistentVolumeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3916 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3917 := &yyv3916
		yy3917.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeCondition(v *[]PersistentVolumeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3918 := *v
	yyh3918, yyl3918 := z.DecSliceHelperStart()
	var yyc3918 bool
	if yyl3918 == 0 {
		if yyv3918 == nil {
			yyv3918 = []PersistentVolumeCondition{}
			yyc3918 = true
		} else if len(yyv3918) != 0 {
			yyv3918 = yyv3918[:0]
			yyc3918 = true
		}
	} else if yyl3918 > 0 {
		var yyrr3918, yyrl3918 int
		var yyrt3918 bool
		if yyl3918 > cap(yyv3918) {

			yyrg3918 := len(yyv3918) > 0
			yyv23918 := yyv3918
			yyrl3918, yyrt3918 = z.DecInferLen(yyl3918, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3918 {
				if yyrl3918 <= cap(yyv3918) {
					yyv3918 = yyv3918[:yyrl3918]
				} else {
					yyv3918 = make([]PersistentVolumeCondition, yyrl3918)
				}
			} else {
				yyv3918 = make([]PersistentVolumeCondition, yyrl3918)
			}
			yyc3918 = true
			yyrr3918 = len(yyv3918)
			if yyrg3918 {
				copy(yyv3918, yyv23918)
			}
		} else if yyl3918 != len(yyv3918) {
			yyv3918 = yyv3918[:yyl3918]
			yyc3918 = true
		}
		yyj3918 := 0
		for ; yyj3918 < yyrr3918; yyj3918++ {
			yyh3918.ElemContainerState(yyj3918)
			if r.TryDecodeAsNil() {
				yyv3918[yyj3918] = PersistentVolumeCondition{}
			} else {
				yyv3919 := &yyv3918[yyj3918]
				yyv3919.CodecDecodeSelf(d)
			}

		}
		if yyrt3918 {
			for ; yyj3918 < yyl3918; yyj3918++ {
				yyv3918 = append(yyv3918, PersistentVolumeCondition{})
				yyh3918.ElemContainerState(yyj3918)
				if r.TryDecodeAsNil() {
					yyv3918[yyj3918] = PersistentVolumeCondition{}
				} else {
					yyv3920 := &yyv3918[yyj3918]
					yyv3920.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3918 := 0
		for ; !r.CheckBreak(); yyj3918++ {

			if yyj3918 >= len(yyv3918) {
				yyv3918 = append(yyv3918, PersistentVolumeCondition{}) // var yyz3918 PersistentVolumeCondition
				yyc3918 = true
			}
			yyh3918.ElemContainerState(yyj3918)
			if yyj3918 < len(yyv3918) {
				if r.TryDecodeAsNil() {
					yyv3918[yyj3918] = PersistentVolumeCondition{}
				} else {
					yyv3921 := &yyv3918[yyj3918]
					yyv3921.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3918 < len(yyv3918) {
			yyv3918 = yyv3918[:yyj3918]
			yyc3918 = true
		} else if yyj3918 == 0 && yyv3918 == nil {
			yyv3918 = []PersistentVolumeCondition{}
			yyc3918 = true
		}
	}
	yyh3918.End()
	if yyc3918 {
		*v = yyv3918
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3922 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3923 := &yyv3922
		yy3923.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3924 := *v
	yyh3924, yyl3924 := z.DecSliceHelperStart()
	var yyc3924 bool
	if yyl3924 == 0 {
		if yyv3924 == nil {
			yyv3924 = []PersistentVolume{}
			yyc3924 = true
		} else if len(yyv3924) != 0 {
			yyv3924 = yyv3924[:0]
			yyc3924 = true
		}
	} else if yyl3924 > 0 {
		var yyrr3924, yyrl3924 int
		var yyrt3924 bool
		if yyl3924 > cap(yyv3924) {

			yyrg3924 := len(yyv3924) > 0
			yyv23924 := yyv3924
			yyrl3924, yyrt3924 = z.DecInferLen(yyl3924, z.DecBasicHandle().MaxInitLen, 416)
			if yyrt3924 {
				if yyrl3924 <= cap(yyv3924) {
					yyv3924 = yyv3924[:yyrl3924]
				} else {
					yyv3924 = make([]PersistentVolume, yyrl3924)
				}
			} else {
				yyv3924 = make([]PersistentVolume, yyrl3924)
			}
			yyc3924 = true
			yyrr3924 = len(yyv3924)
			if yyrg3924 {
				copy(yyv3924, yyv23924)
			}
		} else if yyl3924 != len(yyv3924) {
			yyv3924 = yyv3924[:yyl3924]
			yyc3924 = true
		}
		yyj3924 := 0
		for ; yyj3924 < yyrr3924; yyj3924++ {
			yyh3924.ElemContainerState(yyj3924)
			if r.TryDecodeAsNil() {
				yyv3924[yyj3924] = PersistentVolume{}
			} else {
				yyv3925 := &yyv3924[yyj3924]
				yyv3925.CodecDecodeSelf(d)
			}

		}
		if yyrt3924 {
			for ; yyj3924 < yyl3924; yyj3924++ {
				yyv3924 = append(yyv3924, PersistentVolume{})
				yyh3924.ElemContainerState(yyj3924)
				if r.TryDecodeAsNil() {
					yyv3924[yyj3924] = PersistentVolume{}
				} else {
					yyv3926 := &yyv3924[yyj3924]
					yyv3926.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3924 := 0
		for ; !r.CheckBreak(); yyj3924++ {

			if yyj3924 >= len(yyv3924) {
				yyv3924 = append(yyv3924, PersistentVolume{}) // var yyz3924 PersistentVolume
				yyc3924 = true
			}
			yyh3924.ElemContainerState(yyj3924)
			if yyj3924 < len(yyv3924) {
				if r.TryDecodeAsNil() {
					yyv3924[yyj3924] = PersistentVolume{}
				} else {
					yyv3927 := &yyv3924[yyj3924]
					yyv3927.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3924 < len(yyv3924) {
			yyv3924 = yyv3924[:yyj3924]
			yyc3924 = true
		} else if yyj3924 == 0 && yyv3924 == nil {
			yyv3924 = []PersistentVolume{}
			yyc3924 = true
		}
	}
	yyh3924.End()
	if yyc3924 {
		*v = yyv3924
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3928 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3929 := &yyv3928
		yy3929.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3930 := *v
	yyh3930, yyl3930 := z.DecSliceHelperStart()
	var yyc3930 bool
	if yyl3930 == 0 {
		if yyv3930 == nil {
			yyv3930 = []PersistentVolumeClaim{}
			yyc3930 = true
		} else if len(yyv3930) != 0 {
			yyv3930 = yyv3930[:0]
			yyc3930 = true
		}
	} else if yyl3930 > 0 {
		var yyrr3930, yyrl3930 int
		var yyrt3930 bool
		if yyl3930 > cap(yyv3930) {

			yyrg3930 := len(yyv3930) > 0
			yyv23930 := yyv3930
			yyrl3930, yyrt3930 = z.DecInferLen(yyl3930, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt3930 {
				if yyrl3930 <= cap(yyv3930) {
					yyv3930 = yyv3930[:yyrl3930]
				} else {
					yyv3930 = make([]PersistentVolumeClaim, yyrl3930)
				}
			} else {
				yyv3930 = make([]PersistentVolumeClaim, yyrl3930)
			}
			yyc3930 = true
			yyrr3930 = len(yyv3930)
			if yyrg3930 {
				copy(yyv3930, yyv23930)
			}
		} else if yyl3930 != len(yyv3930) {
			yyv3930 = yyv3930[:yyl3930]
			yyc3930 = true
		}
		yyj3930 := 0
		for ; yyj3930 < yyrr3930; yyj3930++ {
			yyh3930.ElemContainerState(yyj3930)
			if r.TryDecodeAsNil() {
				yyv3930[yyj3930] = PersistentVolumeClaim{}
			} else {
				yyv3931 := &yyv3930[yyj3930]
				yyv3931.CodecDecodeSelf(d)
			}

		}
		if yyrt3930 {
			for ; yyj3930 < yyl3930; yyj3930++ {
				yyv3930 = append(yyv3930, PersistentVolumeClaim{})
				yyh3930.ElemContainerState(yyj3930)
				if r.TryDecodeAsNil() {
					yyv3930[yyj3930] = PersistentVolumeClaim{}
				} else {
					yyv3932 := &yyv3930[yyj3930]
					yyv3932.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3930 := 0
		for ; !r.CheckBreak(); yyj3930++ {

			if yyj3930 >= len(yyv3930) {
				yyv3930 = append(yyv3930, PersistentVolumeClaim{}) // var yyz3930 PersistentVolumeClaim
				yyc3930 = true
			}
			yyh3930.ElemContainerState(yyj3930)
			if yyj3930 < len(yyv3930) {
				if r.TryDecodeAsNil() {
					yyv3930[yyj3930] = PersistentVolumeClaim{}
				} else {
					yyv3933 := &yyv3930[yyj3930]
					yyv3933.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3930 < len(yyv3930) {
			yyv3930 = yyv3930[:yyj3930]
			yyc3930 = true
		} else if yyj3930 == 0 && yyv3930 == nil {
			yyv3930 = []PersistentVolumeClaim{}
			yyc3930 = true
		}
	}
	yyh3930.End()
	if yyc3930 {
		*v = yyv3930
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaimCondition(v []PersistentVolumeClaimCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3934 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3935 := &yyv3934
		yy3935.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaimCondition(v *[]PersistentVolumeClaimCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3936 := *v
	yyh3936, yyl3936 := z.DecSliceHelperStart()
	var yyc3936 bool
	if yyl3936 == 0 {
		if yyv3936 == nil {
			yyv3936 = []PersistentVolumeClaimCondition{}
			yyc3936 = true
		} else if len(yyv3936) != 0 {
			yyv3936 = yyv3936[:0]
			yyc3936 = true
		}
	} else if yyl3936 > 0 {
		var yyrr3936, yyrl3936 int
		var yyrt3936 bool
		if yyl3936 > cap(yyv3936) {

			yyrg3936 := len(yyv3936) > 0
			yyv23936 := yyv3936
			yyrl3936, yyrt3936 = z.DecInferLen(yyl3936, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3936 {
				if yyrl3936 <= cap(yyv3936) {
					yyv3936 = yyv3936[:yyrl3936]
				} else {
					yyv3936 = make([]PersistentVolumeClaimCondition, yyrl3936)
				}
			} else {
				yyv3936 = make([]PersistentVolumeClaimCondition, yyrl3936)
			}
			yyc3936 = true
			yyrr3936 = len(yyv3936)
			if yyrg3936 {
				copy(yyv3936, yyv23936)
			}
		} else if yyl3936 != len(yyv3936) {
			yyv3936 = yyv3936[:yyl3936]
			yyc3936 = true
		}
		yyj3936 := 0
		for ; yyj3936 < yyrr3936; yyj3936++ {
			yyh3936.ElemContainerState(yyj3936)
			if r.TryDecodeAsNil() {
				yyv3936[yyj3936] = PersistentVolumeClaimCondition{}
			} else {
				yyv3937 := &yyv3936[yyj3936]
				yyv3937.CodecDecodeSelf(d)
			}

		}
		if yyrt3936 {
			for ; yyj3936 < yyl3936; yyj3936++ {
				yyv3936 = append(yyv3936, PersistentVolumeClaimCondition{})
				yyh3936.ElemContainerState(yyj3936)
				if r.TryDecodeAsNil() {
					yyv3936[yyj3936] = PersistentVolumeClaimCondition{}
				} else {
					yyv3938 := &yyv3936[yyj3936]
					yyv3938.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3936 := 0
		for ; !r.CheckBreak(); yyj3936++ {

			if yyj3936 >= len(yyv3936) {
				yyv3936 = append(yyv3936, PersistentVolumeClaimCondition{}) // var yyz3936 PersistentVolumeClaimCondition
				yyc3936 = true
			}
			yyh3936.ElemContainerState(yyj3936)
			if yyj3936 < len(yyv3936) {
				if r.TryDecodeAsNil() {
					yyv3936[yyj3936] = PersistentVolumeClaimCondition{}
				} else {
					yyv3939 := &yyv3936[yyj3936]
					yyv3939.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3936 < len(yyv3936) {
			yyv3936 = yyv3936[:yyj3936]
			yyc3936 = true
		} else if yyj3936 == 0 && yyv3936 == nil {
			yyv3936 = []PersistentVolumeClaimCondition{}
			yyc3936 = true
		}
	}
	yyh3936.End()
	if yyc3936 {
		*v = yyv3936
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3940 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3941 := &yyv3940
		yy3941.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3942 := *v
	yyh3942, yyl3942 := z.DecSliceHelperStart()
	var yyc3942 bool
	if yyl3942 == 0 {
		if yyv3942 == nil {
			yyv3942 = []HTTPHeader{}
			yyc3942 = true
		} else if len(yyv3942) != 0 {
			yyv3942 = yyv3942[:0]
			yyc3942 = true
		}
	} else if yyl3942 > 0 {
		var yyrr3942, yyrl3942 int
		var yyrt3942 bool
		if yyl3942 > cap(yyv3942) {

			yyrg3942 := len(yyv3942) > 0
			yyv23942 := yyv3942
			yyrl3942, yyrt3942 = z.DecInferLen(yyl3942, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3942 {
				if yyrl3942 <= cap(yyv3942) {
					yyv3942 = yyv3942[:yyrl3942]
				} else {
					yyv3942 = make([]HTTPHeader, yyrl3942)
				}
			} else {
				yyv3942 = make([]HTTPHeader, yyrl3942)
			}
			yyc3942 = true
			yyrr3942 = len(yyv3942)
			if yyrg3942 {
				copy(yyv3942, yyv23942)
			}
		} else if yyl3942 != len(yyv3942) {
			yyv3942 = yyv3942[:yyl3942]
			yyc3942 = true
		}
		yyj3942 := 0
		for ; yyj3942 < yyrr3942; yyj3942++ {
			yyh3942.ElemContainerState(yyj3942)
			if r.TryDecodeAsNil() {
				yyv3942[yyj3942] = HTTPHeader{}
			} else {
				yyv3943 := &yyv3942[yyj3942]
				yyv3943.CodecDecodeSelf(d)
			}

		}
		if yyrt3942 {
			for ; yyj3942 < yyl3942; yyj3942++ {
				yyv3942 = append(yyv3942, HTTPHeader{})
				yyh3942.ElemContainerState(yyj3942)
				if r.TryDecodeAsNil() {
					yyv3942[yyj3942] = HTTPHeader{}
				} else {
					yyv3944 := &yyv3942[yyj3942]
					yyv3944.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3942 := 0
		for ; !r.CheckBreak(); yyj3942++ {

			if yyj3942 >= len(yyv3942) {
				yyv3942 = append(yyv3942, HTTPHeader{}) // var yyz3942 HTTPHeader
				yyc3942 = true
			}
			yyh3942.ElemContainerState(yyj3942)
			if yyj3942 < len(yyv3942) {
				if r.TryDecodeAsNil() {
					yyv3942[yyj3942] = HTTPHeader{}
				} else {
					yyv3945 := &yyv3942[yyj3942]
					yyv3945.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3942 < len(yyv3942) {
			yyv3942 = yyv3942[:yyj3942]
			yyc3942 = true
		} else if yyj3942 == 0 && yyv3942 == nil {
			yyv3942 = []HTTPHeader{}
			yyc3942 = true
		}
	}
	yyh3942.End()
	if yyc3942 {
		*v = yyv3942
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3946 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3946.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3947 := *v
	yyh3947, yyl3947 := z.DecSliceHelperStart()
	var yyc3947 bool
	if yyl3947 == 0 {
		if yyv3947 == nil {
			yyv3947 = []Capability{}
			yyc3947 = true
		} else if len(yyv3947) != 0 {
			yyv3947 = yyv3947[:0]
			yyc3947 = true
		}
	} else if yyl3947 > 0 {
		var yyrr3947, yyrl3947 int
		var yyrt3947 bool
		if yyl3947 > cap(yyv3947) {

			yyrl3947, yyrt3947 = z.DecInferLen(yyl3947, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3947 {
				if yyrl3947 <= cap(yyv3947) {
					yyv3947 = yyv3947[:yyrl3947]
				} else {
					yyv3947 = make([]Capability, yyrl3947)
				}
			} else {
				yyv3947 = make([]Capability, yyrl3947)
			}
			yyc3947 = true
			yyrr3947 = len(yyv3947)
		} else if yyl3947 != len(yyv3947) {
			yyv3947 = yyv3947[:yyl3947]
			yyc3947 = true
		}
		yyj3947 := 0
		for ; yyj3947 < yyrr3947; yyj3947++ {
			yyh3947.ElemContainerState(yyj3947)
			if r.TryDecodeAsNil() {
				yyv3947[yyj3947] = ""
			} else {
				yyv3947[yyj3947] = Capability(r.DecodeString())
			}

		}
		if yyrt3947 {
			for ; yyj3947 < yyl3947; yyj3947++ {
				yyv3947 = append(yyv3947, "")
				yyh3947.ElemContainerState(yyj3947)
				if r.TryDecodeAsNil() {
					yyv3947[yyj3947] = ""
				} else {
					yyv3947[yyj3947] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3947 := 0
		for ; !r.CheckBreak(); yyj3947++ {

			if yyj3947 >= len(yyv3947) {
				yyv3947 = append(yyv3947, "") // var yyz3947 Capability
				yyc3947 = true
			}
			yyh3947.ElemContainerState(yyj3947)
			if yyj3947 < len(yyv3947) {
				if r.TryDecodeAsNil() {
					yyv3947[yyj3947] = ""
				} else {
					yyv3947[yyj3947] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3947 < len(yyv3947) {
			yyv3947 = yyv3947[:yyj3947]
			yyc3947 = true
		} else if yyj3947 == 0 && yyv3947 == nil {
			yyv3947 = []Capability{}
			yyc3947 = true
		}
	}
	yyh3947.End()
	if yyc3947 {
		*v = yyv3947
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3951 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3952 := &yyv3951
		yy3952.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3953 := *v
	yyh3953, yyl3953 := z.DecSliceHelperStart()
	var yyc3953 bool
	if yyl3953 == 0 {
		if yyv3953 == nil {
			yyv3953 = []ContainerPort{}
			yyc3953 = true
		} else if len(yyv3953) != 0 {
			yyv3953 = yyv3953[:0]
			yyc3953 = true
		}
	} else if yyl3953 > 0 {
		var yyrr3953, yyrl3953 int
		var yyrt3953 bool
		if yyl3953 > cap(yyv3953) {

			yyrg3953 := len(yyv3953) > 0
			yyv23953 := yyv3953
			yyrl3953, yyrt3953 = z.DecInferLen(yyl3953, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3953 {
				if yyrl3953 <= cap(yyv3953) {
					yyv3953 = yyv3953[:yyrl3953]
				} else {
					yyv3953 = make([]ContainerPort, yyrl3953)
				}
			} else {
				yyv3953 = make([]ContainerPort, yyrl3953)
			}
			yyc3953 = true
			yyrr3953 = len(yyv3953)
			if yyrg3953 {
				copy(yyv3953, yyv23953)
			}
		} else if yyl3953 != len(yyv3953) {
			yyv3953 = yyv3953[:yyl3953]
			yyc3953 = true
		}
		yyj3953 := 0
		for ; yyj3953 < yyrr3953; yyj3953++ {
			yyh3953.ElemContainerState(yyj3953)
			if r.TryDecodeAsNil() {
				yyv3953[yyj3953] = ContainerPort{}
			} else {
				yyv3954 := &yyv3953[yyj3953]
				yyv3954.CodecDecodeSelf(d)
			}

		}
		if yyrt3953 {
			for ; yyj3953 < yyl3953; yyj3953++ {
				yyv3953 = append(yyv3953, ContainerPort{})
				yyh3953.ElemContainerState(yyj3953)
				if r.TryDecodeAsNil() {
					yyv3953[yyj3953] = ContainerPort{}
				} else {
					yyv3955 := &yyv3953[yyj3953]
					yyv3955.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3953 := 0
		for ; !r.CheckBreak(); yyj3953++ {

			if yyj3953 >= len(yyv3953) {
				yyv3953 = append(yyv3953, ContainerPort{}) // var yyz3953 ContainerPort
				yyc3953 = true
			}
			yyh3953.ElemContainerState(yyj3953)
			if yyj3953 < len(yyv3953) {
				if r.TryDecodeAsNil() {
					yyv3953[yyj3953] = ContainerPort{}
				} else {
					yyv3956 := &yyv3953[yyj3953]
					yyv3956.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3953 < len(yyv3953) {
			yyv3953 = yyv3953[:yyj3953]
			yyc3953 = true
		} else if yyj3953 == 0 && yyv3953 == nil {
			yyv3953 = []ContainerPort{}
			yyc3953 = true
		}
	}
	yyh3953.End()
	if yyc3953 {
		*v = yyv3953
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3957 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3958 := &yyv3957
		yy3958.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3959 := *v
	yyh3959, yyl3959 := z.DecSliceHelperStart()
	var yyc3959 bool
	if yyl3959 == 0 {
		if yyv3959 == nil {
			yyv3959 = []EnvVar{}
			yyc3959 = true
		} else if len(yyv3959) != 0 {
			yyv3959 = yyv3959[:0]
			yyc3959 = true
		}
	} else if yyl3959 > 0 {
		var yyrr3959, yyrl3959 int
		var yyrt3959 bool
		if yyl3959 > cap(yyv3959) {

			yyrg3959 := len(yyv3959) > 0
			yyv23959 := yyv3959
			yyrl3959, yyrt3959 = z.DecInferLen(yyl3959, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3959 {
				if yyrl3959 <= cap(yyv3959) {
					yyv3959 = yyv3959[:yyrl3959]
				} else {
					yyv3959 = make([]EnvVar, yyrl3959)
				}
			} else {
				yyv3959 = make([]EnvVar, yyrl3959)
			}
			yyc3959 = true
			yyrr3959 = len(yyv3959)
			if yyrg3959 {
				copy(yyv3959, yyv23959)
			}
		} else if yyl3959 != len(yyv3959) {
			yyv3959 = yyv3959[:yyl3959]
			yyc3959 = true
		}
		yyj3959 := 0
		for ; yyj3959 < yyrr3959; yyj3959++ {
			yyh3959.ElemContainerState(yyj3959)
			if r.TryDecodeAsNil() {
				yyv3959[yyj3959] = EnvVar{}
			} else {
				yyv3960 := &yyv3959[yyj3959]
				yyv3960.CodecDecodeSelf(d)
			}

		}
		if yyrt3959 {
			for ; yyj3959 < yyl3959; yyj3959++ {
				yyv3959 = append(yyv3959, EnvVar{})
				yyh3959.ElemContainerState(yyj3959)
				if r.TryDecodeAsNil() {
					yyv3959[yyj3959] = EnvVar{}
				} else {
					yyv3961 := &yyv3959[yyj3959]
					yyv3961.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3959 := 0
		for ; !r.CheckBreak(); yyj3959++ {

			if yyj3959 >= len(yyv3959) {
				yyv3959 = append(yyv3959, EnvVar{}) // var yyz3959 EnvVar
				yyc3959 = true
			}
			yyh3959.ElemContainerState(yyj3959)
			if yyj3959 < len(yyv3959) {
				if r.TryDecodeAsNil() {
					yyv3959[yyj3959] = EnvVar{}
				} else {
					yyv3962 := &yyv3959[yyj3959]
					yyv3962.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3959 < len(yyv3959) {
			yyv3959 = yyv3959[:yyj3959]
			yyc3959 = true
		} else if yyj3959 == 0 && yyv3959 == nil {
			yyv3959 = []EnvVar{}
			yyc3959 = true
		}
	}
	yyh3959.End()
	if yyc3959 {
		*v = yyv3959
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3963 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3964 := &yyv3963
		yy3964.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3965 := *v
	yyh3965, yyl3965 := z.DecSliceHelperStart()
	var yyc3965 bool
	if yyl3965 == 0 {
		if yyv3965 == nil {
			yyv3965 = []VolumeMount{}
			yyc3965 = true
		} else if len(yyv3965) != 0 {
			yyv3965 = yyv3965[:0]
			yyc3965 = true
		}
	} else if yyl3965 > 0 {
		var yyrr3965, yyrl3965 int
		var yyrt3965 bool
		if yyl3965 > cap(yyv3965) {

			yyrg3965 := len(yyv3965) > 0
			yyv23965 := yyv3965
			yyrl3965, yyrt3965 = z.DecInferLen(yyl3965, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3965 {
				if yyrl3965 <= cap(yyv3965) {
					yyv3965 = yyv3965[:yyrl3965]
				} else {
					yyv3965 = make([]VolumeMount, yyrl3965)
				}
			} else {
				yyv3965 = make([]VolumeMount, yyrl3965)
			}
			yyc3965 = true
			yyrr3965 = len(yyv3965)
			if yyrg3965 {
				copy(yyv3965, yyv23965)
			}
		} else if yyl3965 != len(yyv3965) {
			yyv3965 = yyv3965[:yyl3965]
			yyc3965 = true
		}
		yyj3965 := 0
		for ; yyj3965 < yyrr3965; yyj3965++ {
			yyh3965.ElemContainerState(yyj3965)
			if r.TryDecodeAsNil() {
				yyv3965[yyj3965] = VolumeMount{}
			} else {
				yyv3966 := &yyv3965[yyj3965]
				yyv3966.CodecDecodeSelf(d)
			}

		}
		if yyrt3965 {
			for ; yyj3965 < yyl3965; yyj3965++ {
				yyv3965 = append(yyv3965, VolumeMount{})
				yyh3965.ElemContainerState(yyj3965)
				if r.TryDecodeAsNil() {
					yyv3965[yyj3965] = VolumeMount{}
				} else {
					yyv3967 := &yyv3965[yyj3965]
					yyv3967.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3965 := 0
		for ; !r.CheckBreak(); yyj3965++ {

			if yyj3965 >= len(yyv3965) {
				yyv3965 = append(yyv3965, VolumeMount{}) // var yyz3965 VolumeMount
				yyc3965 = true
			}
			yyh3965.ElemContainerState(yyj3965)
			if yyj3965 < len(yyv3965) {
				if r.TryDecodeAsNil() {
					yyv3965[yyj3965] = VolumeMount{}
				} else {
					yyv3968 := &yyv3965[yyj3965]
					yyv3968.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3965 < len(yyv3965) {
			yyv3965 = yyv3965[:yyj3965]
			yyc3965 = true
		} else if yyj3965 == 0 && yyv3965 == nil {
			yyv3965 = []VolumeMount{}
			yyc3965 = true
		}
	}
	yyh3965.End()
	if yyc3965 {
		*v = yyv3965
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3969 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3970 := &yyv3969
		yy3970.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3971 := *v
	yyh3971, yyl3971 := z.DecSliceHelperStart()
	var yyc3971 bool
	if yyl3971 == 0 {
		if yyv3971 == nil {
			yyv3971 = []NodeSelectorTerm{}
			yyc3971 = true
		} else if len(yyv3971) != 0 {
			yyv3971 = yyv3971[:0]
			yyc3971 = true
		}
	} else if yyl3971 > 0 {
		var yyrr3971, yyrl3971 int
		var yyrt3971 bool
		if yyl3971 > cap(yyv3971) {

			yyrg3971 := len(yyv3971) > 0
			yyv23971 := yyv3971
			yyrl3971, yyrt3971 = z.DecInferLen(yyl3971, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3971 {
				if yyrl3971 <= cap(yyv3971) {
					yyv3971 = yyv3971[:yyrl3971]
				} else {
					yyv3971 = make([]NodeSelectorTerm, yyrl3971)
				}
			} else {
				yyv3971 = make([]NodeSelectorTerm, yyrl3971)
			}
			yyc3971 = true
			yyrr3971 = len(yyv3971)
			if yyrg3971 {
				copy(yyv3971, yyv23971)
			}
		} else if yyl3971 != len(yyv3971) {
			yyv3971 = yyv3971[:yyl3971]
			yyc3971 = true
		}
		yyj3971 := 0
		for ; yyj3971 < yyrr3971; yyj3971++ {
			yyh3971.ElemContainerState(yyj3971)
			if r.TryDecodeAsNil() {
				yyv3971[yyj3971] = NodeSelectorTerm{}
			} else {
				yyv3972 := &yyv3971[yyj3971]
				yyv3972.CodecDecodeSelf(d)
			}

		}
		if yyrt3971 {
			for ; yyj3971 < yyl3971; yyj3971++ {
				yyv3971 = append(yyv3971, NodeSelectorTerm{})
				yyh3971.ElemContainerState(yyj3971)
				if r.TryDecodeAsNil() {
					yyv3971[yyj3971] = NodeSelectorTerm{}
				} else {
					yyv3973 := &yyv3971[yyj3971]
					yyv3973.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3971 := 0
		for ; !r.CheckBreak(); yyj3971++ {

			if yyj3971 >= len(yyv3971) {
				yyv3971 = append(yyv3971, NodeSelectorTerm{}) // var yyz3971 NodeSelectorTerm
				yyc3971 = true
			}
			yyh3971.ElemContainerState(yyj3971)
			if yyj3971 < len(yyv3971) {
				if r.TryDecodeAsNil() {
					yyv3971[yyj3971] = NodeSelectorTerm{}
				} else {
					yyv3974 := &yyv3971[yyj3971]
					yyv3974.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3971 < len(yyv3971) {
			yyv3971 = yyv3971[:yyj3971]
			yyc3971 = true
		} else if yyj3971 == 0 && yyv3971 == nil {
			yyv3971 = []NodeSelectorTerm{}
			yyc3971 = true
		}
	}
	yyh3971.End()
	if yyc3971 {
		*v = yyv3971
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3975 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3976 := &yyv3975
		yy3976.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3977 := *v
	yyh3977, yyl3977 := z.DecSliceHelperStart()
	var yyc3977 bool
	if yyl3977 == 0 {
		if yyv3977 == nil {
			yyv3977 = []NodeSelectorRequirement{}
			yyc3977 = true
		} else if len(yyv3977) != 0 {
			yyv3977 = yyv3977[:0]
			yyc3977 = true
		}
	} else if yyl3977 > 0 {
		var yyrr3977, yyrl3977 int
		var yyrt3977 bool
		if yyl3977 > cap(yyv3977) {

			yyrg3977 := len(yyv3977) > 0
			yyv23977 := yyv3977
			yyrl3977, yyrt3977 = z.DecInferLen(yyl3977, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3977 {
				if yyrl3977 <= cap(yyv3977) {
					yyv3977 = yyv3977[:yyrl3977]
				} else {
					yyv3977 = make([]NodeSelectorRequirement, yyrl3977)
				}
			} else {
				yyv3977 = make([]NodeSelectorRequirement, yyrl3977)
			}
			yyc3977 = true
			yyrr3977 = len(yyv3977)
			if yyrg3977 {
				copy(yyv3977, yyv23977)
			}
		} else if yyl3977 != len(yyv3977) {
			yyv3977 = yyv3977[:yyl3977]
			yyc3977 = true
		}
		yyj3977 := 0
		for ; yyj3977 < yyrr3977; yyj3977++ {
			yyh3977.ElemContainerState(yyj3977)
			if r.TryDecodeAsNil() {
				yyv3977[yyj3977] = NodeSelectorRequirement{}
			} else {
				yyv3978 := &yyv3977[yyj3977]
				yyv3978.CodecDecodeSelf(d)
			}

		}
		if yyrt3977 {
			for ; yyj3977 < yyl3977; yyj3977++ {
				yyv3977 = append(yyv3977, NodeSelectorRequirement{})
				yyh3977.ElemContainerState(yyj3977)
				if r.TryDecodeAsNil() {
					yyv3977[yyj3977] = NodeSelectorRequirement{}
				} else {
					yyv3979 := &yyv3977[yyj3977]
					yyv3979.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3977 := 0
		for ; !r.CheckBreak(); yyj3977++ {

			if yyj3977 >= len(yyv3977) {
				yyv3977 = append(yyv3977, NodeSelectorRequirement{}) // var yyz3977 NodeSelectorRequirement
				yyc3977 = true
			}
			yyh3977.ElemContainerState(yyj3977)
			if yyj3977 < len(yyv3977) {
				if r.TryDecodeAsNil() {
					yyv3977[yyj3977] = NodeSelectorRequirement{}
				} else {
					yyv3980 := &yyv3977[yyj3977]
					yyv3980.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3977 < len(yyv3977) {
			yyv3977 = yyv3977[:yyj3977]
			yyc3977 = true
		} else if yyj3977 == 0 && yyv3977 == nil {
			yyv3977 = []NodeSelectorRequirement{}
			yyc3977 = true
		}
	}
	yyh3977.End()
	if yyc3977 {
		*v = yyv3977
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3981 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3982 := &yyv3981
		yy3982.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3983 := *v
	yyh3983, yyl3983 := z.DecSliceHelperStart()
	var yyc3983 bool
	if yyl3983 == 0 {
		if yyv3983 == nil {
			yyv3983 = []PreferredSchedulingTerm{}
			yyc3983 = true
		} else if len(yyv3983) != 0 {
			yyv3983 = yyv3983[:0]
			yyc3983 = true
		}
	} else if yyl3983 > 0 {
		var yyrr3983, yyrl3983 int
		var yyrt3983 bool
		if yyl3983 > cap(yyv3983) {

			yyrg3983 := len(yyv3983) > 0
			yyv23983 := yyv3983
			yyrl3983, yyrt3983 = z.DecInferLen(yyl3983, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3983 {
				if yyrl3983 <= cap(yyv3983) {
					yyv3983 = yyv3983[:yyrl3983]
				} else {
					yyv3983 = make([]PreferredSchedulingTerm, yyrl3983)
				}
			} else {
				yyv3983 = make([]PreferredSchedulingTerm, yyrl3983)
			}
			yyc3983 = true
			yyrr3983 = len(yyv3983)
			if yyrg3983 {
				copy(yyv3983, yyv23983)
			}
		} else if yyl3983 != len(yyv3983) {
			yyv3983 = yyv3983[:yyl3983]
			yyc3983 = true
		}
		yyj3983 := 0
		for ; yyj3983 < yyrr3983; yyj3983++ {
			yyh3983.ElemContainerState(yyj3983)
			if r.TryDecodeAsNil() {
				yyv3983[yyj3983] = PreferredSchedulingTerm{}
			} else {
				yyv3984 := &yyv3983[yyj3983]
				yyv3984.CodecDecodeSelf(d)
			}

		}
		if yyrt3983 {
			for ; yyj3983 < yyl3983; yyj3983++ {
				yyv3983 = append(yyv3983, PreferredSchedulingTerm{})
				yyh3983.ElemContainerState(yyj3983)
				if r.TryDecodeAsNil() {
					yyv3983[yyj3983] = PreferredSchedulingTerm{}
				} else {
					yyv3985 := &yyv3983[yyj3983]
					yyv3985.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3983 := 0
		for ; !r.CheckBreak(); yyj3983++ {

			if yyj3983 >= len(yyv3983) {
				yyv3983 = append(yyv3983, PreferredSchedulingTerm{}) // var yyz3983 PreferredSchedulingTerm
				yyc3983 = true
			}
			yyh3983.ElemContainerState(yyj3983)
			if yyj3983 < len(yyv3983) {
				if r.TryDecodeAsNil() {
					yyv3983[yyj3983] = PreferredSchedulingTerm{}
				} else {
					yyv3986 := &yyv3983[yyj3983]
					yyv3986.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3983 < len(yyv3983) {
			yyv3983 = yyv3983[:yyj3983]
			yyc3983 = true
		} else if yyj3983 == 0 && yyv3983 == nil {
			yyv3983 = []PreferredSchedulingTerm{}
			yyc3983 = true
		}
	}
	yyh3983.End()
	if yyc3983 {
		*v = yyv3983
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3987 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3988 := &yyv3987
		yy3988.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3989 := *v
	yyh3989, yyl3989 := z.DecSliceHelperStart()
	var yyc3989 bool
	if yyl3989 == 0 {
		if yyv3989 == nil {
			yyv3989 = []Volume{}
			yyc3989 = true
		} else if len(yyv3989) != 0 {
			yyv3989 = yyv3989[:0]
			yyc3989 = true
		}
	} else if yyl3989 > 0 {
		var yyrr3989, yyrl3989 int
		var yyrt3989 bool
		if yyl3989 > cap(yyv3989) {

			yyrg3989 := len(yyv3989) > 0
			yyv23989 := yyv3989
			yyrl3989, yyrt3989 = z.DecInferLen(yyl3989, z.DecBasicHandle().MaxInitLen, 152)
			if yyrt3989 {
				if yyrl3989 <= cap(yyv3989) {
					yyv3989 = yyv3989[:yyrl3989]
				} else {
					yyv3989 = make([]Volume, yyrl3989)
				}
			} else {
				yyv3989 = make([]Volume, yyrl3989)
			}
			yyc3989 = true
			yyrr3989 = len(yyv3989)
			if yyrg3989 {
				copy(yyv3989, yyv23989)
			}
		} else if yyl3989 != len(yyv3989) {
			yyv3989 = yyv3989[:yyl3989]
			yyc3989 = true
		}
		yyj3989 := 0
		for ; yyj3989 < yyrr3989; yyj3989++ {
			yyh3989.ElemContainerState(yyj3989)
			if r.TryDecodeAsNil() {
				yyv3989[yyj3989] = Volume{}
			} else {
				yyv3990 := &yyv3989[yyj3989]
				yyv3990.CodecDecodeSelf(d)
			}

		}
		if yyrt3989 {
			for ; yyj3989 < yyl3989; yyj3989++ {
				yyv3989 = append(yyv3989, Volume{})
				yyh3989.ElemContainerState(yyj3989)
				if r.TryDecodeAsNil() {
					yyv3989[yyj3989] = Volume{}
				} else {
					yyv3991 := &yyv3989[yyj3989]
					yyv3991.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3989 := 0
		for ; !r.CheckBreak(); yyj3989++ {

			if yyj3989 >= len(yyv3989) {
				yyv3989 = append(yyv3989, Volume{}) // var yyz3989 Volume
				yyc3989 = true
			}
			yyh3989.ElemContainerState(yyj3989)
			if yyj3989 < len(yyv3989) {
				if r.TryDecodeAsNil() {
					yyv3989[yyj3989] = Volume{}
				} else {
					yyv3992 := &yyv3989[yyj3989]
					yyv3992.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3989 < len(yyv3989) {
			yyv3989 = yyv3989[:yyj3989]
			yyc3989 = true
		} else if yyj3989 == 0 && yyv3989 == nil {
			yyv3989 = []Volume{}
			yyc3989 = true
		}
	}
	yyh3989.End()
	if yyc3989 {
		*v = yyv3989
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3993 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3994 := &yyv3993
		yy3994.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3995 := *v
	yyh3995, yyl3995 := z.DecSliceHelperStart()
	var yyc3995 bool
	if yyl3995 == 0 {
		if yyv3995 == nil {
			yyv3995 = []Container{}
			yyc3995 = true
		} else if len(yyv3995) != 0 {
			yyv3995 = yyv3995[:0]
			yyc3995 = true
		}
	} else if yyl3995 > 0 {
		var yyrr3995, yyrl3995 int
		var yyrt3995 bool
		if yyl3995 > cap(yyv3995) {

			yyrg3995 := len(yyv3995) > 0
			yyv23995 := yyv3995
			yyrl3995, yyrt3995 = z.DecInferLen(yyl3995, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3995 {
				if yyrl3995 <= cap(yyv3995) {
					yyv3995 = yyv3995[:yyrl3995]
				} else {
					yyv3995 = make([]Container, yyrl3995)
				}
			} else {
				yyv3995 = make([]Container, yyrl3995)
			}
			yyc3995 = true
			yyrr3995 = len(yyv3995)
			if yyrg3995 {
				copy(yyv3995, yyv23995)
			}
		} else if yyl3995 != len(yyv3995) {
			yyv3995 = yyv3995[:yyl3995]
			yyc3995 = true
		}
		yyj3995 := 0
		for ; yyj3995 < yyrr3995; yyj3995++ {
			yyh3995.ElemContainerState(yyj3995)
			if r.TryDecodeAsNil() {
				yyv3995[yyj3995] = Container{}
			} else {
				yyv3996 := &yyv3995[yyj3995]
				yyv3996.CodecDecodeSelf(d)
			}

		}
		if yyrt3995 {
			for ; yyj3995 < yyl3995; yyj3995++ {
				yyv3995 = append(yyv3995, Container{})
				yyh3995.ElemContainerState(yyj3995)
				if r.TryDecodeAsNil() {
					yyv3995[yyj3995] = Container{}
				} else {
					yyv3997 := &yyv3995[yyj3995]
					yyv3997.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3995 := 0
		for ; !r.CheckBreak(); yyj3995++ {

			if yyj3995 >= len(yyv3995) {
				yyv3995 = append(yyv3995, Container{}) // var yyz3995 Container
				yyc3995 = true
			}
			yyh3995.ElemContainerState(yyj3995)
			if yyj3995 < len(yyv3995) {
				if r.TryDecodeAsNil() {
					yyv3995[yyj3995] = Container{}
				} else {
					yyv3998 := &yyv3995[yyj3995]
					yyv3998.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3995 < len(yyv3995) {
			yyv3995 = yyv3995[:yyj3995]
			yyc3995 = true
		} else if yyj3995 == 0 && yyv3995 == nil {
			yyv3995 = []Container{}
			yyc3995 = true
		}
	}
	yyh3995.End()
	if yyc3995 {
		*v = yyv3995
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3999 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4000 := &yyv3999
		yy4000.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4001 := *v
	yyh4001, yyl4001 := z.DecSliceHelperStart()
	var yyc4001 bool
	if yyl4001 == 0 {
		if yyv4001 == nil {
			yyv4001 = []LocalObjectReference{}
			yyc4001 = true
		} else if len(yyv4001) != 0 {
			yyv4001 = yyv4001[:0]
			yyc4001 = true
		}
	} else if yyl4001 > 0 {
		var yyrr4001, yyrl4001 int
		var yyrt4001 bool
		if yyl4001 > cap(yyv4001) {

			yyrg4001 := len(yyv4001) > 0
			yyv24001 := yyv4001
			yyrl4001, yyrt4001 = z.DecInferLen(yyl4001, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4001 {
				if yyrl4001 <= cap(yyv4001) {
					yyv4001 = yyv4001[:yyrl4001]
				} else {
					yyv4001 = make([]LocalObjectReference, yyrl4001)
				}
			} else {
				yyv4001 = make([]LocalObjectReference, yyrl4001)
			}
			yyc4001 = true
			yyrr4001 = len(yyv4001)
			if yyrg4001 {
				copy(yyv4001, yyv24001)
			}
		} else if yyl4001 != len(yyv4001) {
			yyv4001 = yyv4001[:yyl4001]
			yyc4001 = true
		}
		yyj4001 := 0
		for ; yyj4001 < yyrr4001; yyj4001++ {
			yyh4001.ElemContainerState(yyj4001)
			if r.TryDecodeAsNil() {
				yyv4001[yyj4001] = LocalObjectReference{}
			} else {
				yyv4002 := &yyv4001[yyj4001]
				yyv4002.CodecDecodeSelf(d)
			}

		}
		if yyrt4001 {
			for ; yyj4001 < yyl4001; yyj4001++ {
				yyv4001 = append(yyv4001, LocalObjectReference{})
				yyh4001.ElemContainerState(yyj4001)
				if r.TryDecodeAsNil() {
					yyv4001[yyj4001] = LocalObjectReference{}
				} else {
					yyv4003 := &yyv4001[yyj4001]
					yyv4003.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4001 := 0
		for ; !r.CheckBreak(); yyj4001++ {

			if yyj4001 >= len(yyv4001) {
				yyv4001 = append(yyv4001, LocalObjectReference{}) // var yyz4001 LocalObjectReference
				yyc4001 = true
			}
			yyh4001.ElemContainerState(yyj4001)
			if yyj4001 < len(yyv4001) {
				if r.TryDecodeAsNil() {
					yyv4001[yyj4001] = LocalObjectReference{}
				} else {
					yyv4004 := &yyv4001[yyj4001]
					yyv4004.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4001 < len(yyv4001) {
			yyv4001 = yyv4001[:yyj4001]
			yyc4001 = true
		} else if yyj4001 == 0 && yyv4001 == nil {
			yyv4001 = []LocalObjectReference{}
			yyc4001 = true
		}
	}
	yyh4001.End()
	if yyc4001 {
		*v = yyv4001
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4005 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4006 := &yyv4005
		yy4006.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4007 := *v
	yyh4007, yyl4007 := z.DecSliceHelperStart()
	var yyc4007 bool
	if yyl4007 == 0 {
		if yyv4007 == nil {
			yyv4007 = []PodCondition{}
			yyc4007 = true
		} else if len(yyv4007) != 0 {
			yyv4007 = yyv4007[:0]
			yyc4007 = true
		}
	} else if yyl4007 > 0 {
		var yyrr4007, yyrl4007 int
		var yyrt4007 bool
		if yyl4007 > cap(yyv4007) {

			yyrg4007 := len(yyv4007) > 0
			yyv24007 := yyv4007
			yyrl4007, yyrt4007 = z.DecInferLen(yyl4007, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4007 {
				if yyrl4007 <= cap(yyv4007) {
					yyv4007 = yyv4007[:yyrl4007]
				} else {
					yyv4007 = make([]PodCondition, yyrl4007)
				}
			} else {
				yyv4007 = make([]PodCondition, yyrl4007)
			}
			yyc4007 = true
			yyrr4007 = len(yyv4007)
			if yyrg4007 {
				copy(yyv4007, yyv24007)
			}
		} else if yyl4007 != len(yyv4007) {
			yyv4007 = yyv4007[:yyl4007]
			yyc4007 = true
		}
		yyj4007 := 0
		for ; yyj4007 < yyrr4007; yyj4007++ {
			yyh4007.ElemContainerState(yyj4007)
			if r.TryDecodeAsNil() {
				yyv4007[yyj4007] = PodCondition{}
			} else {
				yyv4008 := &yyv4007[yyj4007]
				yyv4008.CodecDecodeSelf(d)
			}

		}
		if yyrt4007 {
			for ; yyj4007 < yyl4007; yyj4007++ {
				yyv4007 = append(yyv4007, PodCondition{})
				yyh4007.ElemContainerState(yyj4007)
				if r.TryDecodeAsNil() {
					yyv4007[yyj4007] = PodCondition{}
				} else {
					yyv4009 := &yyv4007[yyj4007]
					yyv4009.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4007 := 0
		for ; !r.CheckBreak(); yyj4007++ {

			if yyj4007 >= len(yyv4007) {
				yyv4007 = append(yyv4007, PodCondition{}) // var yyz4007 PodCondition
				yyc4007 = true
			}
			yyh4007.ElemContainerState(yyj4007)
			if yyj4007 < len(yyv4007) {
				if r.TryDecodeAsNil() {
					yyv4007[yyj4007] = PodCondition{}
				} else {
					yyv4010 := &yyv4007[yyj4007]
					yyv4010.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4007 < len(yyv4007) {
			yyv4007 = yyv4007[:yyj4007]
			yyc4007 = true
		} else if yyj4007 == 0 && yyv4007 == nil {
			yyv4007 = []PodCondition{}
			yyc4007 = true
		}
	}
	yyh4007.End()
	if yyc4007 {
		*v = yyv4007
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4011 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4012 := &yyv4011
		yy4012.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4013 := *v
	yyh4013, yyl4013 := z.DecSliceHelperStart()
	var yyc4013 bool
	if yyl4013 == 0 {
		if yyv4013 == nil {
			yyv4013 = []ContainerStatus{}
			yyc4013 = true
		} else if len(yyv4013) != 0 {
			yyv4013 = yyv4013[:0]
			yyc4013 = true
		}
	} else if yyl4013 > 0 {
		var yyrr4013, yyrl4013 int
		var yyrt4013 bool
		if yyl4013 > cap(yyv4013) {

			yyrg4013 := len(yyv4013) > 0
			yyv24013 := yyv4013
			yyrl4013, yyrt4013 = z.DecInferLen(yyl4013, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4013 {
				if yyrl4013 <= cap(yyv4013) {
					yyv4013 = yyv4013[:yyrl4013]
				} else {
					yyv4013 = make([]ContainerStatus, yyrl4013)
				}
			} else {
				yyv4013 = make([]ContainerStatus, yyrl4013)
			}
			yyc4013 = true
			yyrr4013 = len(yyv4013)
			if yyrg4013 {
				copy(yyv4013, yyv24013)
			}
		} else if yyl4013 != len(yyv4013) {
			yyv4013 = yyv4013[:yyl4013]
			yyc4013 = true
		}
		yyj4013 := 0
		for ; yyj4013 < yyrr4013; yyj4013++ {
			yyh4013.ElemContainerState(yyj4013)
			if r.TryDecodeAsNil() {
				yyv4013[yyj4013] = ContainerStatus{}
			} else {
				yyv4014 := &yyv4013[yyj4013]
				yyv4014.CodecDecodeSelf(d)
			}

		}
		if yyrt4013 {
			for ; yyj4013 < yyl4013; yyj4013++ {
				yyv4013 = append(yyv4013, ContainerStatus{})
				yyh4013.ElemContainerState(yyj4013)
				if r.TryDecodeAsNil() {
					yyv4013[yyj4013] = ContainerStatus{}
				} else {
					yyv4015 := &yyv4013[yyj4013]
					yyv4015.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4013 := 0
		for ; !r.CheckBreak(); yyj4013++ {

			if yyj4013 >= len(yyv4013) {
				yyv4013 = append(yyv4013, ContainerStatus{}) // var yyz4013 ContainerStatus
				yyc4013 = true
			}
			yyh4013.ElemContainerState(yyj4013)
			if yyj4013 < len(yyv4013) {
				if r.TryDecodeAsNil() {
					yyv4013[yyj4013] = ContainerStatus{}
				} else {
					yyv4016 := &yyv4013[yyj4013]
					yyv4016.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4013 < len(yyv4013) {
			yyv4013 = yyv4013[:yyj4013]
			yyc4013 = true
		} else if yyj4013 == 0 && yyv4013 == nil {
			yyv4013 = []ContainerStatus{}
			yyc4013 = true
		}
	}
	yyh4013.End()
	if yyc4013 {
		*v = yyv4013
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4017 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4018 := &yyv4017
		yy4018.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4019 := *v
	yyh4019, yyl4019 := z.DecSliceHelperStart()
	var yyc4019 bool
	if yyl4019 == 0 {
		if yyv4019 == nil {
			yyv4019 = []Pod{}
			yyc4019 = true
		} else if len(yyv4019) != 0 {
			yyv4019 = yyv4019[:0]
			yyc4019 = true
		}
	} else if yyl4019 > 0 {
		var yyrr4019, yyrl4019 int
		var yyrt4019 bool
		if yyl4019 > cap(yyv4019) {

			yyrg4019 := len(yyv4019) > 0
			yyv24019 := yyv4019
			yyrl4019, yyrt4019 = z.DecInferLen(yyl4019, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt4019 {
				if yyrl4019 <= cap(yyv4019) {
					yyv4019 = yyv4019[:yyrl4019]
				} else {
					yyv4019 = make([]Pod, yyrl4019)
				}
			} else {
				yyv4019 = make([]Pod, yyrl4019)
			}
			yyc4019 = true
			yyrr4019 = len(yyv4019)
			if yyrg4019 {
				copy(yyv4019, yyv24019)
			}
		} else if yyl4019 != len(yyv4019) {
			yyv4019 = yyv4019[:yyl4019]
			yyc4019 = true
		}
		yyj4019 := 0
		for ; yyj4019 < yyrr4019; yyj4019++ {
			yyh4019.ElemContainerState(yyj4019)
			if r.TryDecodeAsNil() {
				yyv4019[yyj4019] = Pod{}
			} else {
				yyv4020 := &yyv4019[yyj4019]
				yyv4020.CodecDecodeSelf(d)
			}

		}
		if yyrt4019 {
			for ; yyj4019 < yyl4019; yyj4019++ {
				yyv4019 = append(yyv4019, Pod{})
				yyh4019.ElemContainerState(yyj4019)
				if r.TryDecodeAsNil() {
					yyv4019[yyj4019] = Pod{}
				} else {
					yyv4021 := &yyv4019[yyj4019]
					yyv4021.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4019 := 0
		for ; !r.CheckBreak(); yyj4019++ {

			if yyj4019 >= len(yyv4019) {
				yyv4019 = append(yyv4019, Pod{}) // var yyz4019 Pod
				yyc4019 = true
			}
			yyh4019.ElemContainerState(yyj4019)
			if yyj4019 < len(yyv4019) {
				if r.TryDecodeAsNil() {
					yyv4019[yyj4019] = Pod{}
				} else {
					yyv4022 := &yyv4019[yyj4019]
					yyv4022.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4019 < len(yyv4019) {
			yyv4019 = yyv4019[:yyj4019]
			yyc4019 = true
		} else if yyj4019 == 0 && yyv4019 == nil {
			yyv4019 = []Pod{}
			yyc4019 = true
		}
	}
	yyh4019.End()
	if yyc4019 {
		*v = yyv4019
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4023 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4024 := &yyv4023
		yy4024.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4025 := *v
	yyh4025, yyl4025 := z.DecSliceHelperStart()
	var yyc4025 bool
	if yyl4025 == 0 {
		if yyv4025 == nil {
			yyv4025 = []PodTemplate{}
			yyc4025 = true
		} else if len(yyv4025) != 0 {
			yyv4025 = yyv4025[:0]
			yyc4025 = true
		}
	} else if yyl4025 > 0 {
		var yyrr4025, yyrl4025 int
		var yyrt4025 bool
		if yyl4025 > cap(yyv4025) {

			yyrg4025 := len(yyv4025) > 0
			yyv24025 := yyv4025
			yyrl4025, yyrt4025 = z.DecInferLen(yyl4025, z.DecBasicHandle().MaxInitLen, 544)
			if yyrt4025 {
				if yyrl4025 <= cap(yyv4025) {
					yyv4025 = yyv4025[:yyrl4025]
				} else {
					yyv4025 = make([]PodTemplate, yyrl4025)
				}
			} else {
				yyv4025 = make([]PodTemplate, yyrl4025)
			}
			yyc4025 = true
			yyrr4025 = len(yyv4025)
			if yyrg4025 {
				copy(yyv4025, yyv24025)
			}
		} else if yyl4025 != len(yyv4025) {
			yyv4025 = yyv4025[:yyl4025]
			yyc4025 = true
		}
		yyj4025 := 0
		for ; yyj4025 < yyrr4025; yyj4025++ {
			yyh4025.ElemContainerState(yyj4025)
			if r.TryDecodeAsNil() {
				yyv4025[yyj4025] = PodTemplate{}
			} else {
				yyv4026 := &yyv4025[yyj4025]
				yyv4026.CodecDecodeSelf(d)
			}

		}
		if yyrt4025 {
			for ; yyj4025 < yyl4025; yyj4025++ {
				yyv4025 = append(yyv4025, PodTemplate{})
				yyh4025.ElemContainerState(yyj4025)
				if r.TryDecodeAsNil() {
					yyv4025[yyj4025] = PodTemplate{}
				} else {
					yyv4027 := &yyv4025[yyj4025]
					yyv4027.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4025 := 0
		for ; !r.CheckBreak(); yyj4025++ {

			if yyj4025 >= len(yyv4025) {
				yyv4025 = append(yyv4025, PodTemplate{}) // var yyz4025 PodTemplate
				yyc4025 = true
			}
			yyh4025.ElemContainerState(yyj4025)
			if yyj4025 < len(yyv4025) {
				if r.TryDecodeAsNil() {
					yyv4025[yyj4025] = PodTemplate{}
				} else {
					yyv4028 := &yyv4025[yyj4025]
					yyv4028.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4025 < len(yyv4025) {
			yyv4025 = yyv4025[:yyj4025]
			yyc4025 = true
		} else if yyj4025 == 0 && yyv4025 == nil {
			yyv4025 = []PodTemplate{}
			yyc4025 = true
		}
	}
	yyh4025.End()
	if yyc4025 {
		*v = yyv4025
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4029 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4030 := &yyv4029
		yy4030.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4031 := *v
	yyh4031, yyl4031 := z.DecSliceHelperStart()
	var yyc4031 bool
	if yyl4031 == 0 {
		if yyv4031 == nil {
			yyv4031 = []ReplicationController{}
			yyc4031 = true
		} else if len(yyv4031) != 0 {
			yyv4031 = yyv4031[:0]
			yyc4031 = true
		}
	} else if yyl4031 > 0 {
		var yyrr4031, yyrl4031 int
		var yyrt4031 bool
		if yyl4031 > cap(yyv4031) {

			yyrg4031 := len(yyv4031) > 0
			yyv24031 := yyv4031
			yyrl4031, yyrt4031 = z.DecInferLen(yyl4031, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4031 {
				if yyrl4031 <= cap(yyv4031) {
					yyv4031 = yyv4031[:yyrl4031]
				} else {
					yyv4031 = make([]ReplicationController, yyrl4031)
				}
			} else {
				yyv4031 = make([]ReplicationController, yyrl4031)
			}
			yyc4031 = true
			yyrr4031 = len(yyv4031)
			if yyrg4031 {
				copy(yyv4031, yyv24031)
			}
		} else if yyl4031 != len(yyv4031) {
			yyv4031 = yyv4031[:yyl4031]
			yyc4031 = true
		}
		yyj4031 := 0
		for ; yyj4031 < yyrr4031; yyj4031++ {
			yyh4031.ElemContainerState(yyj4031)
			if r.TryDecodeAsNil() {
				yyv4031[yyj4031] = ReplicationController{}
			} else {
				yyv4032 := &yyv4031[yyj4031]
				yyv4032.CodecDecodeSelf(d)
			}

		}
		if yyrt4031 {
			for ; yyj4031 < yyl4031; yyj4031++ {
				yyv4031 = append(yyv4031, ReplicationController{})
				yyh4031.ElemContainerState(yyj4031)
				if r.TryDecodeAsNil() {
					yyv4031[yyj4031] = ReplicationController{}
				} else {
					yyv4033 := &yyv4031[yyj4031]
					yyv4033.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4031 := 0
		for ; !r.CheckBreak(); yyj4031++ {

			if yyj4031 >= len(yyv4031) {
				yyv4031 = append(yyv4031, ReplicationController{}) // var yyz4031 ReplicationController
				yyc4031 = true
			}
			yyh4031.ElemContainerState(yyj4031)
			if yyj4031 < len(yyv4031) {
				if r.TryDecodeAsNil() {
					yyv4031[yyj4031] = ReplicationController{}
				} else {
					yyv4034 := &yyv4031[yyj4031]
					yyv4034.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4031 < len(yyv4031) {
			yyv4031 = yyv4031[:yyj4031]
			yyc4031 = true
		} else if yyj4031 == 0 && yyv4031 == nil {
			yyv4031 = []ReplicationController{}
			yyc4031 = true
		}
	}
	yyh4031.End()
	if yyc4031 {
		*v = yyv4031
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4035 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4036 := &yyv4035
		yy4036.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4037 := *v
	yyh4037, yyl4037 := z.DecSliceHelperStart()
	var yyc4037 bool
	if yyl4037 == 0 {
		if yyv4037 == nil {
			yyv4037 = []LoadBalancerIngress{}
			yyc4037 = true
		} else if len(yyv4037) != 0 {
			yyv4037 = yyv4037[:0]
			yyc4037 = true
		}
	} else if yyl4037 > 0 {
		var yyrr4037, yyrl4037 int
		var yyrt4037 bool
		if yyl4037 > cap(yyv4037) {

			yyrg4037 := len(yyv4037) > 0
			yyv24037 := yyv4037
			yyrl4037, yyrt4037 = z.DecInferLen(yyl4037, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4037 {
				if yyrl4037 <= cap(yyv4037) {
					yyv4037 = yyv4037[:yyrl4037]
				} else {
					yyv4037 = make([]LoadBalancerIngress, yyrl4037)
				}
			} else {
				yyv4037 = make([]LoadBalancerIngress, yyrl4037)
			}
			yyc4037 = true
			yyrr4037 = len(yyv4037)
			if yyrg4037 {
				copy(yyv4037, yyv24037)
			}
		} else if yyl4037 != len(yyv4037) {
			yyv4037 = yyv4037[:yyl4037]
			yyc4037 = true
		}
		yyj4037 := 0
		for ; yyj4037 < yyrr4037; yyj4037++ {
			yyh4037.ElemContainerState(yyj4037)
			if r.TryDecodeAsNil() {
				yyv4037[yyj4037] = LoadBalancerIngress{}
			} else {
				yyv4038 := &yyv4037[yyj4037]
				yyv4038.CodecDecodeSelf(d)
			}

		}
		if yyrt4037 {
			for ; yyj4037 < yyl4037; yyj4037++ {
				yyv4037 = append(yyv4037, LoadBalancerIngress{})
				yyh4037.ElemContainerState(yyj4037)
				if r.TryDecodeAsNil() {
					yyv4037[yyj4037] = LoadBalancerIngress{}
				} else {
					yyv4039 := &yyv4037[yyj4037]
					yyv4039.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4037 := 0
		for ; !r.CheckBreak(); yyj4037++ {

			if yyj4037 >= len(yyv4037) {
				yyv4037 = append(yyv4037, LoadBalancerIngress{}) // var yyz4037 LoadBalancerIngress
				yyc4037 = true
			}
			yyh4037.ElemContainerState(yyj4037)
			if yyj4037 < len(yyv4037) {
				if r.TryDecodeAsNil() {
					yyv4037[yyj4037] = LoadBalancerIngress{}
				} else {
					yyv4040 := &yyv4037[yyj4037]
					yyv4040.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4037 < len(yyv4037) {
			yyv4037 = yyv4037[:yyj4037]
			yyc4037 = true
		} else if yyj4037 == 0 && yyv4037 == nil {
			yyv4037 = []LoadBalancerIngress{}
			yyc4037 = true
		}
	}
	yyh4037.End()
	if yyc4037 {
		*v = yyv4037
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4041 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4042 := &yyv4041
		yy4042.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4043 := *v
	yyh4043, yyl4043 := z.DecSliceHelperStart()
	var yyc4043 bool
	if yyl4043 == 0 {
		if yyv4043 == nil {
			yyv4043 = []ServicePort{}
			yyc4043 = true
		} else if len(yyv4043) != 0 {
			yyv4043 = yyv4043[:0]
			yyc4043 = true
		}
	} else if yyl4043 > 0 {
		var yyrr4043, yyrl4043 int
		var yyrt4043 bool
		if yyl4043 > cap(yyv4043) {

			yyrg4043 := len(yyv4043) > 0
			yyv24043 := yyv4043
			yyrl4043, yyrt4043 = z.DecInferLen(yyl4043, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4043 {
				if yyrl4043 <= cap(yyv4043) {
					yyv4043 = yyv4043[:yyrl4043]
				} else {
					yyv4043 = make([]ServicePort, yyrl4043)
				}
			} else {
				yyv4043 = make([]ServicePort, yyrl4043)
			}
			yyc4043 = true
			yyrr4043 = len(yyv4043)
			if yyrg4043 {
				copy(yyv4043, yyv24043)
			}
		} else if yyl4043 != len(yyv4043) {
			yyv4043 = yyv4043[:yyl4043]
			yyc4043 = true
		}
		yyj4043 := 0
		for ; yyj4043 < yyrr4043; yyj4043++ {
			yyh4043.ElemContainerState(yyj4043)
			if r.TryDecodeAsNil() {
				yyv4043[yyj4043] = ServicePort{}
			} else {
				yyv4044 := &yyv4043[yyj4043]
				yyv4044.CodecDecodeSelf(d)
			}

		}
		if yyrt4043 {
			for ; yyj4043 < yyl4043; yyj4043++ {
				yyv4043 = append(yyv4043, ServicePort{})
				yyh4043.ElemContainerState(yyj4043)
				if r.TryDecodeAsNil() {
					yyv4043[yyj4043] = ServicePort{}
				} else {
					yyv4045 := &yyv4043[yyj4043]
					yyv4045.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4043 := 0
		for ; !r.CheckBreak(); yyj4043++ {

			if yyj4043 >= len(yyv4043) {
				yyv4043 = append(yyv4043, ServicePort{}) // var yyz4043 ServicePort
				yyc4043 = true
			}
			yyh4043.ElemContainerState(yyj4043)
			if yyj4043 < len(yyv4043) {
				if r.TryDecodeAsNil() {
					yyv4043[yyj4043] = ServicePort{}
				} else {
					yyv4046 := &yyv4043[yyj4043]
					yyv4046.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4043 < len(yyv4043) {
			yyv4043 = yyv4043[:yyj4043]
			yyc4043 = true
		} else if yyj4043 == 0 && yyv4043 == nil {
			yyv4043 = []ServicePort{}
			yyc4043 = true
		}
	}
	yyh4043.End()
	if yyc4043 {
		*v = yyv4043
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4047 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4048 := &yyv4047
		yy4048.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4049 := *v
	yyh4049, yyl4049 := z.DecSliceHelperStart()
	var yyc4049 bool
	if yyl4049 == 0 {
		if yyv4049 == nil {
			yyv4049 = []Service{}
			yyc4049 = true
		} else if len(yyv4049) != 0 {
			yyv4049 = yyv4049[:0]
			yyc4049 = true
		}
	} else if yyl4049 > 0 {
		var yyrr4049, yyrl4049 int
		var yyrt4049 bool
		if yyl4049 > cap(yyv4049) {

			yyrg4049 := len(yyv4049) > 0
			yyv24049 := yyv4049
			yyrl4049, yyrt4049 = z.DecInferLen(yyl4049, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt4049 {
				if yyrl4049 <= cap(yyv4049) {
					yyv4049 = yyv4049[:yyrl4049]
				} else {
					yyv4049 = make([]Service, yyrl4049)
				}
			} else {
				yyv4049 = make([]Service, yyrl4049)
			}
			yyc4049 = true
			yyrr4049 = len(yyv4049)
			if yyrg4049 {
				copy(yyv4049, yyv24049)
			}
		} else if yyl4049 != len(yyv4049) {
			yyv4049 = yyv4049[:yyl4049]
			yyc4049 = true
		}
		yyj4049 := 0
		for ; yyj4049 < yyrr4049; yyj4049++ {
			yyh4049.ElemContainerState(yyj4049)
			if r.TryDecodeAsNil() {
				yyv4049[yyj4049] = Service{}
			} else {
				yyv4050 := &yyv4049[yyj4049]
				yyv4050.CodecDecodeSelf(d)
			}

		}
		if yyrt4049 {
			for ; yyj4049 < yyl4049; yyj4049++ {
				yyv4049 = append(yyv4049, Service{})
				yyh4049.ElemContainerState(yyj4049)
				if r.TryDecodeAsNil() {
					yyv4049[yyj4049] = Service{}
				} else {
					yyv4051 := &yyv4049[yyj4049]
					yyv4051.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4049 := 0
		for ; !r.CheckBreak(); yyj4049++ {

			if yyj4049 >= len(yyv4049) {
				yyv4049 = append(yyv4049, Service{}) // var yyz4049 Service
				yyc4049 = true
			}
			yyh4049.ElemContainerState(yyj4049)
			if yyj4049 < len(yyv4049) {
				if r.TryDecodeAsNil() {
					yyv4049[yyj4049] = Service{}
				} else {
					yyv4052 := &yyv4049[yyj4049]
					yyv4052.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4049 < len(yyv4049) {
			yyv4049 = yyv4049[:yyj4049]
			yyc4049 = true
		} else if yyj4049 == 0 && yyv4049 == nil {
			yyv4049 = []Service{}
			yyc4049 = true
		}
	}
	yyh4049.End()
	if yyc4049 {
		*v = yyv4049
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4053 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4054 := &yyv4053
		yy4054.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4055 := *v
	yyh4055, yyl4055 := z.DecSliceHelperStart()
	var yyc4055 bool
	if yyl4055 == 0 {
		if yyv4055 == nil {
			yyv4055 = []ObjectReference{}
			yyc4055 = true
		} else if len(yyv4055) != 0 {
			yyv4055 = yyv4055[:0]
			yyc4055 = true
		}
	} else if yyl4055 > 0 {
		var yyrr4055, yyrl4055 int
		var yyrt4055 bool
		if yyl4055 > cap(yyv4055) {

			yyrg4055 := len(yyv4055) > 0
			yyv24055 := yyv4055
			yyrl4055, yyrt4055 = z.DecInferLen(yyl4055, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4055 {
				if yyrl4055 <= cap(yyv4055) {
					yyv4055 = yyv4055[:yyrl4055]
				} else {
					yyv4055 = make([]ObjectReference, yyrl4055)
				}
			} else {
				yyv4055 = make([]ObjectReference, yyrl4055)
			}
			yyc4055 = true
			yyrr4055 = len(yyv4055)
			if yyrg4055 {
				copy(yyv4055, yyv24055)
			}
		} else if yyl4055 != len(yyv4055) {
			yyv4055 = yyv4055[:yyl4055]
			yyc4055 = true
		}
		yyj4055 := 0
		for ; yyj4055 < yyrr4055; yyj4055++ {
			yyh4055.ElemContainerState(yyj4055)
			if r.TryDecodeAsNil() {
				yyv4055[yyj4055] = ObjectReference{}
			} else {
				yyv4056 := &yyv4055[yyj4055]
				yyv4056.CodecDecodeSelf(d)
			}

		}
		if yyrt4055 {
			for ; yyj4055 < yyl4055; yyj4055++ {
				yyv4055 = append(yyv4055, ObjectReference{})
				yyh4055.ElemContainerState(yyj4055)
				if r.TryDecodeAsNil() {
					yyv4055[yyj4055] = ObjectReference{}
				} else {
					yyv4057 := &yyv4055[yyj4055]
					yyv4057.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4055 := 0
		for ; !r.CheckBreak(); yyj4055++ {

			if yyj4055 >= len(yyv4055) {
				yyv4055 = append(yyv4055, ObjectReference{}) // var yyz4055 ObjectReference
				yyc4055 = true
			}
			yyh4055.ElemContainerState(yyj4055)
			if yyj4055 < len(yyv4055) {
				if r.TryDecodeAsNil() {
					yyv4055[yyj4055] = ObjectReference{}
				} else {
					yyv4058 := &yyv4055[yyj4055]
					yyv4058.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4055 < len(yyv4055) {
			yyv4055 = yyv4055[:yyj4055]
			yyc4055 = true
		} else if yyj4055 == 0 && yyv4055 == nil {
			yyv4055 = []ObjectReference{}
			yyc4055 = true
		}
	}
	yyh4055.End()
	if yyc4055 {
		*v = yyv4055
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4059 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4060 := &yyv4059
		yy4060.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4061 := *v
	yyh4061, yyl4061 := z.DecSliceHelperStart()
	var yyc4061 bool
	if yyl4061 == 0 {
		if yyv4061 == nil {
			yyv4061 = []ServiceAccount{}
			yyc4061 = true
		} else if len(yyv4061) != 0 {
			yyv4061 = yyv4061[:0]
			yyc4061 = true
		}
	} else if yyl4061 > 0 {
		var yyrr4061, yyrl4061 int
		var yyrt4061 bool
		if yyl4061 > cap(yyv4061) {

			yyrg4061 := len(yyv4061) > 0
			yyv24061 := yyv4061
			yyrl4061, yyrt4061 = z.DecInferLen(yyl4061, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt4061 {
				if yyrl4061 <= cap(yyv4061) {
					yyv4061 = yyv4061[:yyrl4061]
				} else {
					yyv4061 = make([]ServiceAccount, yyrl4061)
				}
			} else {
				yyv4061 = make([]ServiceAccount, yyrl4061)
			}
			yyc4061 = true
			yyrr4061 = len(yyv4061)
			if yyrg4061 {
				copy(yyv4061, yyv24061)
			}
		} else if yyl4061 != len(yyv4061) {
			yyv4061 = yyv4061[:yyl4061]
			yyc4061 = true
		}
		yyj4061 := 0
		for ; yyj4061 < yyrr4061; yyj4061++ {
			yyh4061.ElemContainerState(yyj4061)
			if r.TryDecodeAsNil() {
				yyv4061[yyj4061] = ServiceAccount{}
			} else {
				yyv4062 := &yyv4061[yyj4061]
				yyv4062.CodecDecodeSelf(d)
			}

		}
		if yyrt4061 {
			for ; yyj4061 < yyl4061; yyj4061++ {
				yyv4061 = append(yyv4061, ServiceAccount{})
				yyh4061.ElemContainerState(yyj4061)
				if r.TryDecodeAsNil() {
					yyv4061[yyj4061] = ServiceAccount{}
				} else {
					yyv4063 := &yyv4061[yyj4061]
					yyv4063.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4061 := 0
		for ; !r.CheckBreak(); yyj4061++ {

			if yyj4061 >= len(yyv4061) {
				yyv4061 = append(yyv4061, ServiceAccount{}) // var yyz4061 ServiceAccount
				yyc4061 = true
			}
			yyh4061.ElemContainerState(yyj4061)
			if yyj4061 < len(yyv4061) {
				if r.TryDecodeAsNil() {
					yyv4061[yyj4061] = ServiceAccount{}
				} else {
					yyv4064 := &yyv4061[yyj4061]
					yyv4064.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4061 < len(yyv4061) {
			yyv4061 = yyv4061[:yyj4061]
			yyc4061 = true
		} else if yyj4061 == 0 && yyv4061 == nil {
			yyv4061 = []ServiceAccount{}
			yyc4061 = true
		}
	}
	yyh4061.End()
	if yyc4061 {
		*v = yyv4061
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4065 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4066 := &yyv4065
		yy4066.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4067 := *v
	yyh4067, yyl4067 := z.DecSliceHelperStart()
	var yyc4067 bool
	if yyl4067 == 0 {
		if yyv4067 == nil {
			yyv4067 = []EndpointSubset{}
			yyc4067 = true
		} else if len(yyv4067) != 0 {
			yyv4067 = yyv4067[:0]
			yyc4067 = true
		}
	} else if yyl4067 > 0 {
		var yyrr4067, yyrl4067 int
		var yyrt4067 bool
		if yyl4067 > cap(yyv4067) {

			yyrg4067 := len(yyv4067) > 0
			yyv24067 := yyv4067
			yyrl4067, yyrt4067 = z.DecInferLen(yyl4067, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4067 {
				if yyrl4067 <= cap(yyv4067) {
					yyv4067 = yyv4067[:yyrl4067]
				} else {
					yyv4067 = make([]EndpointSubset, yyrl4067)
				}
			} else {
				yyv4067 = make([]EndpointSubset, yyrl4067)
			}
			yyc4067 = true
			yyrr4067 = len(yyv4067)
			if yyrg4067 {
				copy(yyv4067, yyv24067)
			}
		} else if yyl4067 != len(yyv4067) {
			yyv4067 = yyv4067[:yyl4067]
			yyc4067 = true
		}
		yyj4067 := 0
		for ; yyj4067 < yyrr4067; yyj4067++ {
			yyh4067.ElemContainerState(yyj4067)
			if r.TryDecodeAsNil() {
				yyv4067[yyj4067] = EndpointSubset{}
			} else {
				yyv4068 := &yyv4067[yyj4067]
				yyv4068.CodecDecodeSelf(d)
			}

		}
		if yyrt4067 {
			for ; yyj4067 < yyl4067; yyj4067++ {
				yyv4067 = append(yyv4067, EndpointSubset{})
				yyh4067.ElemContainerState(yyj4067)
				if r.TryDecodeAsNil() {
					yyv4067[yyj4067] = EndpointSubset{}
				} else {
					yyv4069 := &yyv4067[yyj4067]
					yyv4069.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4067 := 0
		for ; !r.CheckBreak(); yyj4067++ {

			if yyj4067 >= len(yyv4067) {
				yyv4067 = append(yyv4067, EndpointSubset{}) // var yyz4067 EndpointSubset
				yyc4067 = true
			}
			yyh4067.ElemContainerState(yyj4067)
			if yyj4067 < len(yyv4067) {
				if r.TryDecodeAsNil() {
					yyv4067[yyj4067] = EndpointSubset{}
				} else {
					yyv4070 := &yyv4067[yyj4067]
					yyv4070.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4067 < len(yyv4067) {
			yyv4067 = yyv4067[:yyj4067]
			yyc4067 = true
		} else if yyj4067 == 0 && yyv4067 == nil {
			yyv4067 = []EndpointSubset{}
			yyc4067 = true
		}
	}
	yyh4067.End()
	if yyc4067 {
		*v = yyv4067
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4071 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4072 := &yyv4071
		yy4072.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4073 := *v
	yyh4073, yyl4073 := z.DecSliceHelperStart()
	var yyc4073 bool
	if yyl4073 == 0 {
		if yyv4073 == nil {
			yyv4073 = []EndpointAddress{}
			yyc4073 = true
		} else if len(yyv4073) != 0 {
			yyv4073 = yyv4073[:0]
			yyc4073 = true
		}
	} else if yyl4073 > 0 {
		var yyrr4073, yyrl4073 int
		var yyrt4073 bool
		if yyl4073 > cap(yyv4073) {

			yyrg4073 := len(yyv4073) > 0
			yyv24073 := yyv4073
			yyrl4073, yyrt4073 = z.DecInferLen(yyl4073, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4073 {
				if yyrl4073 <= cap(yyv4073) {
					yyv4073 = yyv4073[:yyrl4073]
				} else {
					yyv4073 = make([]EndpointAddress, yyrl4073)
				}
			} else {
				yyv4073 = make([]EndpointAddress, yyrl4073)
			}
			yyc4073 = true
			yyrr4073 = len(yyv4073)
			if yyrg4073 {
				copy(yyv4073, yyv24073)
			}
		} else if yyl4073 != len(yyv4073) {
			yyv4073 = yyv4073[:yyl4073]
			yyc4073 = true
		}
		yyj4073 := 0
		for ; yyj4073 < yyrr4073; yyj4073++ {
			yyh4073.ElemContainerState(yyj4073)
			if r.TryDecodeAsNil() {
				yyv4073[yyj4073] = EndpointAddress{}
			} else {
				yyv4074 := &yyv4073[yyj4073]
				yyv4074.CodecDecodeSelf(d)
			}

		}
		if yyrt4073 {
			for ; yyj4073 < yyl4073; yyj4073++ {
				yyv4073 = append(yyv4073, EndpointAddress{})
				yyh4073.ElemContainerState(yyj4073)
				if r.TryDecodeAsNil() {
					yyv4073[yyj4073] = EndpointAddress{}
				} else {
					yyv4075 := &yyv4073[yyj4073]
					yyv4075.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4073 := 0
		for ; !r.CheckBreak(); yyj4073++ {

			if yyj4073 >= len(yyv4073) {
				yyv4073 = append(yyv4073, EndpointAddress{}) // var yyz4073 EndpointAddress
				yyc4073 = true
			}
			yyh4073.ElemContainerState(yyj4073)
			if yyj4073 < len(yyv4073) {
				if r.TryDecodeAsNil() {
					yyv4073[yyj4073] = EndpointAddress{}
				} else {
					yyv4076 := &yyv4073[yyj4073]
					yyv4076.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4073 < len(yyv4073) {
			yyv4073 = yyv4073[:yyj4073]
			yyc4073 = true
		} else if yyj4073 == 0 && yyv4073 == nil {
			yyv4073 = []EndpointAddress{}
			yyc4073 = true
		}
	}
	yyh4073.End()
	if yyc4073 {
		*v = yyv4073
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4077 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4078 := &yyv4077
		yy4078.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4079 := *v
	yyh4079, yyl4079 := z.DecSliceHelperStart()
	var yyc4079 bool
	if yyl4079 == 0 {
		if yyv4079 == nil {
			yyv4079 = []EndpointPort{}
			yyc4079 = true
		} else if len(yyv4079) != 0 {
			yyv4079 = yyv4079[:0]
			yyc4079 = true
		}
	} else if yyl4079 > 0 {
		var yyrr4079, yyrl4079 int
		var yyrt4079 bool
		if yyl4079 > cap(yyv4079) {

			yyrg4079 := len(yyv4079) > 0
			yyv24079 := yyv4079
			yyrl4079, yyrt4079 = z.DecInferLen(yyl4079, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4079 {
				if yyrl4079 <= cap(yyv4079) {
					yyv4079 = yyv4079[:yyrl4079]
				} else {
					yyv4079 = make([]EndpointPort, yyrl4079)
				}
			} else {
				yyv4079 = make([]EndpointPort, yyrl4079)
			}
			yyc4079 = true
			yyrr4079 = len(yyv4079)
			if yyrg4079 {
				copy(yyv4079, yyv24079)
			}
		} else if yyl4079 != len(yyv4079) {
			yyv4079 = yyv4079[:yyl4079]
			yyc4079 = true
		}
		yyj4079 := 0
		for ; yyj4079 < yyrr4079; yyj4079++ {
			yyh4079.ElemContainerState(yyj4079)
			if r.TryDecodeAsNil() {
				yyv4079[yyj4079] = EndpointPort{}
			} else {
				yyv4080 := &yyv4079[yyj4079]
				yyv4080.CodecDecodeSelf(d)
			}

		}
		if yyrt4079 {
			for ; yyj4079 < yyl4079; yyj4079++ {
				yyv4079 = append(yyv4079, EndpointPort{})
				yyh4079.ElemContainerState(yyj4079)
				if r.TryDecodeAsNil() {
					yyv4079[yyj4079] = EndpointPort{}
				} else {
					yyv4081 := &yyv4079[yyj4079]
					yyv4081.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4079 := 0
		for ; !r.CheckBreak(); yyj4079++ {

			if yyj4079 >= len(yyv4079) {
				yyv4079 = append(yyv4079, EndpointPort{}) // var yyz4079 EndpointPort
				yyc4079 = true
			}
			yyh4079.ElemContainerState(yyj4079)
			if yyj4079 < len(yyv4079) {
				if r.TryDecodeAsNil() {
					yyv4079[yyj4079] = EndpointPort{}
				} else {
					yyv4082 := &yyv4079[yyj4079]
					yyv4082.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4079 < len(yyv4079) {
			yyv4079 = yyv4079[:yyj4079]
			yyc4079 = true
		} else if yyj4079 == 0 && yyv4079 == nil {
			yyv4079 = []EndpointPort{}
			yyc4079 = true
		}
	}
	yyh4079.End()
	if yyc4079 {
		*v = yyv4079
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4083 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4084 := &yyv4083
		yy4084.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4085 := *v
	yyh4085, yyl4085 := z.DecSliceHelperStart()
	var yyc4085 bool
	if yyl4085 == 0 {
		if yyv4085 == nil {
			yyv4085 = []Endpoints{}
			yyc4085 = true
		} else if len(yyv4085) != 0 {
			yyv4085 = yyv4085[:0]
			yyc4085 = true
		}
	} else if yyl4085 > 0 {
		var yyrr4085, yyrl4085 int
		var yyrt4085 bool
		if yyl4085 > cap(yyv4085) {

			yyrg4085 := len(yyv4085) > 0
			yyv24085 := yyv4085
			yyrl4085, yyrt4085 = z.DecInferLen(yyl4085, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4085 {
				if yyrl4085 <= cap(yyv4085) {
					yyv4085 = yyv4085[:yyrl4085]
				} else {
					yyv4085 = make([]Endpoints, yyrl4085)
				}
			} else {
				yyv4085 = make([]Endpoints, yyrl4085)
			}
			yyc4085 = true
			yyrr4085 = len(yyv4085)
			if yyrg4085 {
				copy(yyv4085, yyv24085)
			}
		} else if yyl4085 != len(yyv4085) {
			yyv4085 = yyv4085[:yyl4085]
			yyc4085 = true
		}
		yyj4085 := 0
		for ; yyj4085 < yyrr4085; yyj4085++ {
			yyh4085.ElemContainerState(yyj4085)
			if r.TryDecodeAsNil() {
				yyv4085[yyj4085] = Endpoints{}
			} else {
				yyv4086 := &yyv4085[yyj4085]
				yyv4086.CodecDecodeSelf(d)
			}

		}
		if yyrt4085 {
			for ; yyj4085 < yyl4085; yyj4085++ {
				yyv4085 = append(yyv4085, Endpoints{})
				yyh4085.ElemContainerState(yyj4085)
				if r.TryDecodeAsNil() {
					yyv4085[yyj4085] = Endpoints{}
				} else {
					yyv4087 := &yyv4085[yyj4085]
					yyv4087.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4085 := 0
		for ; !r.CheckBreak(); yyj4085++ {

			if yyj4085 >= len(yyv4085) {
				yyv4085 = append(yyv4085, Endpoints{}) // var yyz4085 Endpoints
				yyc4085 = true
			}
			yyh4085.ElemContainerState(yyj4085)
			if yyj4085 < len(yyv4085) {
				if r.TryDecodeAsNil() {
					yyv4085[yyj4085] = Endpoints{}
				} else {
					yyv4088 := &yyv4085[yyj4085]
					yyv4088.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4085 < len(yyv4085) {
			yyv4085 = yyv4085[:yyj4085]
			yyc4085 = true
		} else if yyj4085 == 0 && yyv4085 == nil {
			yyv4085 = []Endpoints{}
			yyc4085 = true
		}
	}
	yyh4085.End()
	if yyc4085 {
		*v = yyv4085
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4089 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4090 := &yyv4089
		yy4090.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4091 := *v
	yyh4091, yyl4091 := z.DecSliceHelperStart()
	var yyc4091 bool
	if yyl4091 == 0 {
		if yyv4091 == nil {
			yyv4091 = []NodeCondition{}
			yyc4091 = true
		} else if len(yyv4091) != 0 {
			yyv4091 = yyv4091[:0]
			yyc4091 = true
		}
	} else if yyl4091 > 0 {
		var yyrr4091, yyrl4091 int
		var yyrt4091 bool
		if yyl4091 > cap(yyv4091) {

			yyrg4091 := len(yyv4091) > 0
			yyv24091 := yyv4091
			yyrl4091, yyrt4091 = z.DecInferLen(yyl4091, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4091 {
				if yyrl4091 <= cap(yyv4091) {
					yyv4091 = yyv4091[:yyrl4091]
				} else {
					yyv4091 = make([]NodeCondition, yyrl4091)
				}
			} else {
				yyv4091 = make([]NodeCondition, yyrl4091)
			}
			yyc4091 = true
			yyrr4091 = len(yyv4091)
			if yyrg4091 {
				copy(yyv4091, yyv24091)
			}
		} else if yyl4091 != len(yyv4091) {
			yyv4091 = yyv4091[:yyl4091]
			yyc4091 = true
		}
		yyj4091 := 0
		for ; yyj4091 < yyrr4091; yyj4091++ {
			yyh4091.ElemContainerState(yyj4091)
			if r.TryDecodeAsNil() {
				yyv4091[yyj4091] = NodeCondition{}
			} else {
				yyv4092 := &yyv4091[yyj4091]
				yyv4092.CodecDecodeSelf(d)
			}

		}
		if yyrt4091 {
			for ; yyj4091 < yyl4091; yyj4091++ {
				yyv4091 = append(yyv4091, NodeCondition{})
				yyh4091.ElemContainerState(yyj4091)
				if r.TryDecodeAsNil() {
					yyv4091[yyj4091] = NodeCondition{}
				} else {
					yyv4093 := &yyv4091[yyj4091]
					yyv4093.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4091 := 0
		for ; !r.CheckBreak(); yyj4091++ {

			if yyj4091 >= len(yyv4091) {
				yyv4091 = append(yyv4091, NodeCondition{}) // var yyz4091 NodeCondition
				yyc4091 = true
			}
			yyh4091.ElemContainerState(yyj4091)
			if yyj4091 < len(yyv4091) {
				if r.TryDecodeAsNil() {
					yyv4091[yyj4091] = NodeCondition{}
				} else {
					yyv4094 := &yyv4091[yyj4091]
					yyv4094.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4091 < len(yyv4091) {
			yyv4091 = yyv4091[:yyj4091]
			yyc4091 = true
		} else if yyj4091 == 0 && yyv4091 == nil {
			yyv4091 = []NodeCondition{}
			yyc4091 = true
		}
	}
	yyh4091.End()
	if yyc4091 {
		*v = yyv4091
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4095 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4096 := &yyv4095
		yy4096.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4097 := *v
	yyh4097, yyl4097 := z.DecSliceHelperStart()
	var yyc4097 bool
	if yyl4097 == 0 {
		if yyv4097 == nil {
			yyv4097 = []NodeAddress{}
			yyc4097 = true
		} else if len(yyv4097) != 0 {
			yyv4097 = yyv4097[:0]
			yyc4097 = true
		}
	} else if yyl4097 > 0 {
		var yyrr4097, yyrl4097 int
		var yyrt4097 bool
		if yyl4097 > cap(yyv4097) {

			yyrg4097 := len(yyv4097) > 0
			yyv24097 := yyv4097
			yyrl4097, yyrt4097 = z.DecInferLen(yyl4097, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4097 {
				if yyrl4097 <= cap(yyv4097) {
					yyv4097 = yyv4097[:yyrl4097]
				} else {
					yyv4097 = make([]NodeAddress, yyrl4097)
				}
			} else {
				yyv4097 = make([]NodeAddress, yyrl4097)
			}
			yyc4097 = true
			yyrr4097 = len(yyv4097)
			if yyrg4097 {
				copy(yyv4097, yyv24097)
			}
		} else if yyl4097 != len(yyv4097) {
			yyv4097 = yyv4097[:yyl4097]
			yyc4097 = true
		}
		yyj4097 := 0
		for ; yyj4097 < yyrr4097; yyj4097++ {
			yyh4097.ElemContainerState(yyj4097)
			if r.TryDecodeAsNil() {
				yyv4097[yyj4097] = NodeAddress{}
			} else {
				yyv4098 := &yyv4097[yyj4097]
				yyv4098.CodecDecodeSelf(d)
			}

		}
		if yyrt4097 {
			for ; yyj4097 < yyl4097; yyj4097++ {
				yyv4097 = append(yyv4097, NodeAddress{})
				yyh4097.ElemContainerState(yyj4097)
				if r.TryDecodeAsNil() {
					yyv4097[yyj4097] = NodeAddress{}
				} else {
					yyv4099 := &yyv4097[yyj4097]
					yyv4099.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4097 := 0
		for ; !r.CheckBreak(); yyj4097++ {

			if yyj4097 >= len(yyv4097) {
				yyv4097 = append(yyv4097, NodeAddress{}) // var yyz4097 NodeAddress
				yyc4097 = true
			}
			yyh4097.ElemContainerState(yyj4097)
			if yyj4097 < len(yyv4097) {
				if r.TryDecodeAsNil() {
					yyv4097[yyj4097] = NodeAddress{}
				} else {
					yyv4100 := &yyv4097[yyj4097]
					yyv4100.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4097 < len(yyv4097) {
			yyv4097 = yyv4097[:yyj4097]
			yyc4097 = true
		} else if yyj4097 == 0 && yyv4097 == nil {
			yyv4097 = []NodeAddress{}
			yyc4097 = true
		}
	}
	yyh4097.End()
	if yyc4097 {
		*v = yyv4097
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4101 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4102 := &yyv4101
		yy4102.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4103 := *v
	yyh4103, yyl4103 := z.DecSliceHelperStart()
	var yyc4103 bool
	if yyl4103 == 0 {
		if yyv4103 == nil {
			yyv4103 = []ContainerImage{}
			yyc4103 = true
		} else if len(yyv4103) != 0 {
			yyv4103 = yyv4103[:0]
			yyc4103 = true
		}
	} else if yyl4103 > 0 {
		var yyrr4103, yyrl4103 int
		var yyrt4103 bool
		if yyl4103 > cap(yyv4103) {

			yyrg4103 := len(yyv4103) > 0
			yyv24103 := yyv4103
			yyrl4103, yyrt4103 = z.DecInferLen(yyl4103, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4103 {
				if yyrl4103 <= cap(yyv4103) {
					yyv4103 = yyv4103[:yyrl4103]
				} else {
					yyv4103 = make([]ContainerImage, yyrl4103)
				}
			} else {
				yyv4103 = make([]ContainerImage, yyrl4103)
			}
			yyc4103 = true
			yyrr4103 = len(yyv4103)
			if yyrg4103 {
				copy(yyv4103, yyv24103)
			}
		} else if yyl4103 != len(yyv4103) {
			yyv4103 = yyv4103[:yyl4103]
			yyc4103 = true
		}
		yyj4103 := 0
		for ; yyj4103 < yyrr4103; yyj4103++ {
			yyh4103.ElemContainerState(yyj4103)
			if r.TryDecodeAsNil() {
				yyv4103[yyj4103] = ContainerImage{}
			} else {
				yyv4104 := &yyv4103[yyj4103]
				yyv4104.CodecDecodeSelf(d)
			}

		}
		if yyrt4103 {
			for ; yyj4103 < yyl4103; yyj4103++ {
				yyv4103 = append(yyv4103, ContainerImage{})
				yyh4103.ElemContainerState(yyj4103)
				if r.TryDecodeAsNil() {
					yyv4103[yyj4103] = ContainerImage{}
				} else {
					yyv4105 := &yyv4103[yyj4103]
					yyv4105.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4103 := 0
		for ; !r.CheckBreak(); yyj4103++ {

			if yyj4103 >= len(yyv4103) {
				yyv4103 = append(yyv4103, ContainerImage{}) // var yyz4103 ContainerImage
				yyc4103 = true
			}
			yyh4103.ElemContainerState(yyj4103)
			if yyj4103 < len(yyv4103) {
				if r.TryDecodeAsNil() {
					yyv4103[yyj4103] = ContainerImage{}
				} else {
					yyv4106 := &yyv4103[yyj4103]
					yyv4106.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4103 < len(yyv4103) {
			yyv4103 = yyv4103[:yyj4103]
			yyc4103 = true
		} else if yyj4103 == 0 && yyv4103 == nil {
			yyv4103 = []ContainerImage{}
			yyc4103 = true
		}
	}
	yyh4103.End()
	if yyc4103 {
		*v = yyv4103
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4107, yyv4107 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4107.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4108 := &yyv4107
		yym4109 := z.EncBinary()
		_ = yym4109
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4108) {
		} else if !yym4109 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4108)
		} else {
			z.EncFallback(yy4108)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4110 := *v
	yyl4110 := r.ReadMapStart()
	yybh4110 := z.DecBasicHandle()
	if yyv4110 == nil {
		yyrl4110, _ := z.DecInferLen(yyl4110, yybh4110.MaxInitLen, 40)
		yyv4110 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4110)
		*v = yyv4110
	}
	var yymk4110 ResourceName
	var yymv4110 pkg3_resource.Quantity
	var yymg4110 bool
	if yybh4110.MapValueReset {
		yymg4110 = true
	}
	if yyl4110 > 0 {
		for yyj4110 := 0; yyj4110 < yyl4110; yyj4110++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4110 = ""
			} else {
				yymk4110 = ResourceName(r.DecodeString())
			}

			if yymg4110 {
				yymv4110 = yyv4110[yymk4110]
			} else {
				yymv4110 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4110 = pkg3_resource.Quantity{}
			} else {
				yyv4112 := &yymv4110
				yym4113 := z.DecBinary()
				_ = yym4113
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4112) {
				} else if !yym4113 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4112)
				} else {
					z.DecFallback(yyv4112, false)
				}
			}

			if yyv4110 != nil {
				yyv4110[yymk4110] = yymv4110
			}
		}
	} else if yyl4110 < 0 {
		for yyj4110 := 0; !r.CheckBreak(); yyj4110++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4110 = ""
			} else {
				yymk4110 = ResourceName(r.DecodeString())
			}

			if yymg4110 {
				yymv4110 = yyv4110[yymk4110]
			} else {
				yymv4110 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4110 = pkg3_resource.Quantity{}
			} else {
				yyv4115 := &yymv4110
				yym4116 := z.DecBinary()
				_ = yym4116
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4115) {
				} else if !yym4116 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4115)
				} else {
					z.DecFallback(yyv4115, false)
				}
			}

			if yyv4110 != nil {
				yyv4110[yymk4110] = yymv4110
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4117 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4118 := &yyv4117
		yy4118.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4119 := *v
	yyh4119, yyl4119 := z.DecSliceHelperStart()
	var yyc4119 bool
	if yyl4119 == 0 {
		if yyv4119 == nil {
			yyv4119 = []Node{}
			yyc4119 = true
		} else if len(yyv4119) != 0 {
			yyv4119 = yyv4119[:0]
			yyc4119 = true
		}
	} else if yyl4119 > 0 {
		var yyrr4119, yyrl4119 int
		var yyrt4119 bool
		if yyl4119 > cap(yyv4119) {

			yyrg4119 := len(yyv4119) > 0
			yyv24119 := yyv4119
			yyrl4119, yyrt4119 = z.DecInferLen(yyl4119, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4119 {
				if yyrl4119 <= cap(yyv4119) {
					yyv4119 = yyv4119[:yyrl4119]
				} else {
					yyv4119 = make([]Node, yyrl4119)
				}
			} else {
				yyv4119 = make([]Node, yyrl4119)
			}
			yyc4119 = true
			yyrr4119 = len(yyv4119)
			if yyrg4119 {
				copy(yyv4119, yyv24119)
			}
		} else if yyl4119 != len(yyv4119) {
			yyv4119 = yyv4119[:yyl4119]
			yyc4119 = true
		}
		yyj4119 := 0
		for ; yyj4119 < yyrr4119; yyj4119++ {
			yyh4119.ElemContainerState(yyj4119)
			if r.TryDecodeAsNil() {
				yyv4119[yyj4119] = Node{}
			} else {
				yyv4120 := &yyv4119[yyj4119]
				yyv4120.CodecDecodeSelf(d)
			}

		}
		if yyrt4119 {
			for ; yyj4119 < yyl4119; yyj4119++ {
				yyv4119 = append(yyv4119, Node{})
				yyh4119.ElemContainerState(yyj4119)
				if r.TryDecodeAsNil() {
					yyv4119[yyj4119] = Node{}
				} else {
					yyv4121 := &yyv4119[yyj4119]
					yyv4121.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4119 := 0
		for ; !r.CheckBreak(); yyj4119++ {

			if yyj4119 >= len(yyv4119) {
				yyv4119 = append(yyv4119, Node{}) // var yyz4119 Node
				yyc4119 = true
			}
			yyh4119.ElemContainerState(yyj4119)
			if yyj4119 < len(yyv4119) {
				if r.TryDecodeAsNil() {
					yyv4119[yyj4119] = Node{}
				} else {
					yyv4122 := &yyv4119[yyj4119]
					yyv4122.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4119 < len(yyv4119) {
			yyv4119 = yyv4119[:yyj4119]
			yyc4119 = true
		} else if yyj4119 == 0 && yyv4119 == nil {
			yyv4119 = []Node{}
			yyc4119 = true
		}
	}
	yyh4119.End()
	if yyc4119 {
		*v = yyv4119
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4123 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4123.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4124 := *v
	yyh4124, yyl4124 := z.DecSliceHelperStart()
	var yyc4124 bool
	if yyl4124 == 0 {
		if yyv4124 == nil {
			yyv4124 = []FinalizerName{}
			yyc4124 = true
		} else if len(yyv4124) != 0 {
			yyv4124 = yyv4124[:0]
			yyc4124 = true
		}
	} else if yyl4124 > 0 {
		var yyrr4124, yyrl4124 int
		var yyrt4124 bool
		if yyl4124 > cap(yyv4124) {

			yyrl4124, yyrt4124 = z.DecInferLen(yyl4124, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4124 {
				if yyrl4124 <= cap(yyv4124) {
					yyv4124 = yyv4124[:yyrl4124]
				} else {
					yyv4124 = make([]FinalizerName, yyrl4124)
				}
			} else {
				yyv4124 = make([]FinalizerName, yyrl4124)
			}
			yyc4124 = true
			yyrr4124 = len(yyv4124)
		} else if yyl4124 != len(yyv4124) {
			yyv4124 = yyv4124[:yyl4124]
			yyc4124 = true
		}
		yyj4124 := 0
		for ; yyj4124 < yyrr4124; yyj4124++ {
			yyh4124.ElemContainerState(yyj4124)
			if r.TryDecodeAsNil() {
				yyv4124[yyj4124] = ""
			} else {
				yyv4124[yyj4124] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4124 {
			for ; yyj4124 < yyl4124; yyj4124++ {
				yyv4124 = append(yyv4124, "")
				yyh4124.ElemContainerState(yyj4124)
				if r.TryDecodeAsNil() {
					yyv4124[yyj4124] = ""
				} else {
					yyv4124[yyj4124] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4124 := 0
		for ; !r.CheckBreak(); yyj4124++ {

			if yyj4124 >= len(yyv4124) {
				yyv4124 = append(yyv4124, "") // var yyz4124 FinalizerName
				yyc4124 = true
			}
			yyh4124.ElemContainerState(yyj4124)
			if yyj4124 < len(yyv4124) {
				if r.TryDecodeAsNil() {
					yyv4124[yyj4124] = ""
				} else {
					yyv4124[yyj4124] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4124 < len(yyv4124) {
			yyv4124 = yyv4124[:yyj4124]
			yyc4124 = true
		} else if yyj4124 == 0 && yyv4124 == nil {
			yyv4124 = []FinalizerName{}
			yyc4124 = true
		}
	}
	yyh4124.End()
	if yyc4124 {
		*v = yyv4124
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4128 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4129 := &yyv4128
		yy4129.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4130 := *v
	yyh4130, yyl4130 := z.DecSliceHelperStart()
	var yyc4130 bool
	if yyl4130 == 0 {
		if yyv4130 == nil {
			yyv4130 = []Namespace{}
			yyc4130 = true
		} else if len(yyv4130) != 0 {
			yyv4130 = yyv4130[:0]
			yyc4130 = true
		}
	} else if yyl4130 > 0 {
		var yyrr4130, yyrl4130 int
		var yyrt4130 bool
		if yyl4130 > cap(yyv4130) {

			yyrg4130 := len(yyv4130) > 0
			yyv24130 := yyv4130
			yyrl4130, yyrt4130 = z.DecInferLen(yyl4130, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4130 {
				if yyrl4130 <= cap(yyv4130) {
					yyv4130 = yyv4130[:yyrl4130]
				} else {
					yyv4130 = make([]Namespace, yyrl4130)
				}
			} else {
				yyv4130 = make([]Namespace, yyrl4130)
			}
			yyc4130 = true
			yyrr4130 = len(yyv4130)
			if yyrg4130 {
				copy(yyv4130, yyv24130)
			}
		} else if yyl4130 != len(yyv4130) {
			yyv4130 = yyv4130[:yyl4130]
			yyc4130 = true
		}
		yyj4130 := 0
		for ; yyj4130 < yyrr4130; yyj4130++ {
			yyh4130.ElemContainerState(yyj4130)
			if r.TryDecodeAsNil() {
				yyv4130[yyj4130] = Namespace{}
			} else {
				yyv4131 := &yyv4130[yyj4130]
				yyv4131.CodecDecodeSelf(d)
			}

		}
		if yyrt4130 {
			for ; yyj4130 < yyl4130; yyj4130++ {
				yyv4130 = append(yyv4130, Namespace{})
				yyh4130.ElemContainerState(yyj4130)
				if r.TryDecodeAsNil() {
					yyv4130[yyj4130] = Namespace{}
				} else {
					yyv4132 := &yyv4130[yyj4130]
					yyv4132.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4130 := 0
		for ; !r.CheckBreak(); yyj4130++ {

			if yyj4130 >= len(yyv4130) {
				yyv4130 = append(yyv4130, Namespace{}) // var yyz4130 Namespace
				yyc4130 = true
			}
			yyh4130.ElemContainerState(yyj4130)
			if yyj4130 < len(yyv4130) {
				if r.TryDecodeAsNil() {
					yyv4130[yyj4130] = Namespace{}
				} else {
					yyv4133 := &yyv4130[yyj4130]
					yyv4133.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4130 < len(yyv4130) {
			yyv4130 = yyv4130[:yyj4130]
			yyc4130 = true
		} else if yyj4130 == 0 && yyv4130 == nil {
			yyv4130 = []Namespace{}
			yyc4130 = true
		}
	}
	yyh4130.End()
	if yyc4130 {
		*v = yyv4130
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4134 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4135 := &yyv4134
		yy4135.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4136 := *v
	yyh4136, yyl4136 := z.DecSliceHelperStart()
	var yyc4136 bool
	if yyl4136 == 0 {
		if yyv4136 == nil {
			yyv4136 = []Event{}
			yyc4136 = true
		} else if len(yyv4136) != 0 {
			yyv4136 = yyv4136[:0]
			yyc4136 = true
		}
	} else if yyl4136 > 0 {
		var yyrr4136, yyrl4136 int
		var yyrt4136 bool
		if yyl4136 > cap(yyv4136) {

			yyrg4136 := len(yyv4136) > 0
			yyv24136 := yyv4136
			yyrl4136, yyrt4136 = z.DecInferLen(yyl4136, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4136 {
				if yyrl4136 <= cap(yyv4136) {
					yyv4136 = yyv4136[:yyrl4136]
				} else {
					yyv4136 = make([]Event, yyrl4136)
				}
			} else {
				yyv4136 = make([]Event, yyrl4136)
			}
			yyc4136 = true
			yyrr4136 = len(yyv4136)
			if yyrg4136 {
				copy(yyv4136, yyv24136)
			}
		} else if yyl4136 != len(yyv4136) {
			yyv4136 = yyv4136[:yyl4136]
			yyc4136 = true
		}
		yyj4136 := 0
		for ; yyj4136 < yyrr4136; yyj4136++ {
			yyh4136.ElemContainerState(yyj4136)
			if r.TryDecodeAsNil() {
				yyv4136[yyj4136] = Event{}
			} else {
				yyv4137 := &yyv4136[yyj4136]
				yyv4137.CodecDecodeSelf(d)
			}

		}
		if yyrt4136 {
			for ; yyj4136 < yyl4136; yyj4136++ {
				yyv4136 = append(yyv4136, Event{})
				yyh4136.ElemContainerState(yyj4136)
				if r.TryDecodeAsNil() {
					yyv4136[yyj4136] = Event{}
				} else {
					yyv4138 := &yyv4136[yyj4136]
					yyv4138.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4136 := 0
		for ; !r.CheckBreak(); yyj4136++ {

			if yyj4136 >= len(yyv4136) {
				yyv4136 = append(yyv4136, Event{}) // var yyz4136 Event
				yyc4136 = true
			}
			yyh4136.ElemContainerState(yyj4136)
			if yyj4136 < len(yyv4136) {
				if r.TryDecodeAsNil() {
					yyv4136[yyj4136] = Event{}
				} else {
					yyv4139 := &yyv4136[yyj4136]
					yyv4139.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4136 < len(yyv4136) {
			yyv4136 = yyv4136[:yyj4136]
			yyc4136 = true
		} else if yyj4136 == 0 && yyv4136 == nil {
			yyv4136 = []Event{}
			yyc4136 = true
		}
	}
	yyh4136.End()
	if yyc4136 {
		*v = yyv4136
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4140 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4141 := &yyv4140
		yym4142 := z.EncBinary()
		_ = yym4142
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4141) {
		} else if !yym4142 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4141)
		} else {
			z.EncFallback(yy4141)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4143 := *v
	yyh4143, yyl4143 := z.DecSliceHelperStart()
	var yyc4143 bool
	if yyl4143 == 0 {
		if yyv4143 == nil {
			yyv4143 = []pkg6_runtime.RawExtension{}
			yyc4143 = true
		} else if len(yyv4143) != 0 {
			yyv4143 = yyv4143[:0]
			yyc4143 = true
		}
	} else if yyl4143 > 0 {
		var yyrr4143, yyrl4143 int
		var yyrt4143 bool
		if yyl4143 > cap(yyv4143) {

			yyrg4143 := len(yyv4143) > 0
			yyv24143 := yyv4143
			yyrl4143, yyrt4143 = z.DecInferLen(yyl4143, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4143 {
				if yyrl4143 <= cap(yyv4143) {
					yyv4143 = yyv4143[:yyrl4143]
				} else {
					yyv4143 = make([]pkg6_runtime.RawExtension, yyrl4143)
				}
			} else {
				yyv4143 = make([]pkg6_runtime.RawExtension, yyrl4143)
			}
			yyc4143 = true
			yyrr4143 = len(yyv4143)
			if yyrg4143 {
				copy(yyv4143, yyv24143)
			}
		} else if yyl4143 != len(yyv4143) {
			yyv4143 = yyv4143[:yyl4143]
			yyc4143 = true
		}
		yyj4143 := 0
		for ; yyj4143 < yyrr4143; yyj4143++ {
			yyh4143.ElemContainerState(yyj4143)
			if r.TryDecodeAsNil() {
				yyv4143[yyj4143] = pkg6_runtime.RawExtension{}
			} else {
				yyv4144 := &yyv4143[yyj4143]
				yym4145 := z.DecBinary()
				_ = yym4145
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4144) {
				} else if !yym4145 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4144)
				} else {
					z.DecFallback(yyv4144, false)
				}
			}

		}
		if yyrt4143 {
			for ; yyj4143 < yyl4143; yyj4143++ {
				yyv4143 = append(yyv4143, pkg6_runtime.RawExtension{})
				yyh4143.ElemContainerState(yyj4143)
				if r.TryDecodeAsNil() {
					yyv4143[yyj4143] = pkg6_runtime.RawExtension{}
				} else {
					yyv4146 := &yyv4143[yyj4143]
					yym4147 := z.DecBinary()
					_ = yym4147
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4146) {
					} else if !yym4147 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4146)
					} else {
						z.DecFallback(yyv4146, false)
					}
				}

			}
		}

	} else {
		yyj4143 := 0
		for ; !r.CheckBreak(); yyj4143++ {

			if yyj4143 >= len(yyv4143) {
				yyv4143 = append(yyv4143, pkg6_runtime.RawExtension{}) // var yyz4143 pkg6_runtime.RawExtension
				yyc4143 = true
			}
			yyh4143.ElemContainerState(yyj4143)
			if yyj4143 < len(yyv4143) {
				if r.TryDecodeAsNil() {
					yyv4143[yyj4143] = pkg6_runtime.RawExtension{}
				} else {
					yyv4148 := &yyv4143[yyj4143]
					yym4149 := z.DecBinary()
					_ = yym4149
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4148) {
					} else if !yym4149 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4148)
					} else {
						z.DecFallback(yyv4148, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4143 < len(yyv4143) {
			yyv4143 = yyv4143[:yyj4143]
			yyc4143 = true
		} else if yyj4143 == 0 && yyv4143 == nil {
			yyv4143 = []pkg6_runtime.RawExtension{}
			yyc4143 = true
		}
	}
	yyh4143.End()
	if yyc4143 {
		*v = yyv4143
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4150 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4151 := &yyv4150
		yy4151.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4152 := *v
	yyh4152, yyl4152 := z.DecSliceHelperStart()
	var yyc4152 bool
	if yyl4152 == 0 {
		if yyv4152 == nil {
			yyv4152 = []LimitRangeItem{}
			yyc4152 = true
		} else if len(yyv4152) != 0 {
			yyv4152 = yyv4152[:0]
			yyc4152 = true
		}
	} else if yyl4152 > 0 {
		var yyrr4152, yyrl4152 int
		var yyrt4152 bool
		if yyl4152 > cap(yyv4152) {

			yyrg4152 := len(yyv4152) > 0
			yyv24152 := yyv4152
			yyrl4152, yyrt4152 = z.DecInferLen(yyl4152, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4152 {
				if yyrl4152 <= cap(yyv4152) {
					yyv4152 = yyv4152[:yyrl4152]
				} else {
					yyv4152 = make([]LimitRangeItem, yyrl4152)
				}
			} else {
				yyv4152 = make([]LimitRangeItem, yyrl4152)
			}
			yyc4152 = true
			yyrr4152 = len(yyv4152)
			if yyrg4152 {
				copy(yyv4152, yyv24152)
			}
		} else if yyl4152 != len(yyv4152) {
			yyv4152 = yyv4152[:yyl4152]
			yyc4152 = true
		}
		yyj4152 := 0
		for ; yyj4152 < yyrr4152; yyj4152++ {
			yyh4152.ElemContainerState(yyj4152)
			if r.TryDecodeAsNil() {
				yyv4152[yyj4152] = LimitRangeItem{}
			} else {
				yyv4153 := &yyv4152[yyj4152]
				yyv4153.CodecDecodeSelf(d)
			}

		}
		if yyrt4152 {
			for ; yyj4152 < yyl4152; yyj4152++ {
				yyv4152 = append(yyv4152, LimitRangeItem{})
				yyh4152.ElemContainerState(yyj4152)
				if r.TryDecodeAsNil() {
					yyv4152[yyj4152] = LimitRangeItem{}
				} else {
					yyv4154 := &yyv4152[yyj4152]
					yyv4154.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4152 := 0
		for ; !r.CheckBreak(); yyj4152++ {

			if yyj4152 >= len(yyv4152) {
				yyv4152 = append(yyv4152, LimitRangeItem{}) // var yyz4152 LimitRangeItem
				yyc4152 = true
			}
			yyh4152.ElemContainerState(yyj4152)
			if yyj4152 < len(yyv4152) {
				if r.TryDecodeAsNil() {
					yyv4152[yyj4152] = LimitRangeItem{}
				} else {
					yyv4155 := &yyv4152[yyj4152]
					yyv4155.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4152 < len(yyv4152) {
			yyv4152 = yyv4152[:yyj4152]
			yyc4152 = true
		} else if yyj4152 == 0 && yyv4152 == nil {
			yyv4152 = []LimitRangeItem{}
			yyc4152 = true
		}
	}
	yyh4152.End()
	if yyc4152 {
		*v = yyv4152
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4156 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4157 := &yyv4156
		yy4157.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4158 := *v
	yyh4158, yyl4158 := z.DecSliceHelperStart()
	var yyc4158 bool
	if yyl4158 == 0 {
		if yyv4158 == nil {
			yyv4158 = []LimitRange{}
			yyc4158 = true
		} else if len(yyv4158) != 0 {
			yyv4158 = yyv4158[:0]
			yyc4158 = true
		}
	} else if yyl4158 > 0 {
		var yyrr4158, yyrl4158 int
		var yyrt4158 bool
		if yyl4158 > cap(yyv4158) {

			yyrg4158 := len(yyv4158) > 0
			yyv24158 := yyv4158
			yyrl4158, yyrt4158 = z.DecInferLen(yyl4158, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4158 {
				if yyrl4158 <= cap(yyv4158) {
					yyv4158 = yyv4158[:yyrl4158]
				} else {
					yyv4158 = make([]LimitRange, yyrl4158)
				}
			} else {
				yyv4158 = make([]LimitRange, yyrl4158)
			}
			yyc4158 = true
			yyrr4158 = len(yyv4158)
			if yyrg4158 {
				copy(yyv4158, yyv24158)
			}
		} else if yyl4158 != len(yyv4158) {
			yyv4158 = yyv4158[:yyl4158]
			yyc4158 = true
		}
		yyj4158 := 0
		for ; yyj4158 < yyrr4158; yyj4158++ {
			yyh4158.ElemContainerState(yyj4158)
			if r.TryDecodeAsNil() {
				yyv4158[yyj4158] = LimitRange{}
			} else {
				yyv4159 := &yyv4158[yyj4158]
				yyv4159.CodecDecodeSelf(d)
			}

		}
		if yyrt4158 {
			for ; yyj4158 < yyl4158; yyj4158++ {
				yyv4158 = append(yyv4158, LimitRange{})
				yyh4158.ElemContainerState(yyj4158)
				if r.TryDecodeAsNil() {
					yyv4158[yyj4158] = LimitRange{}
				} else {
					yyv4160 := &yyv4158[yyj4158]
					yyv4160.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4158 := 0
		for ; !r.CheckBreak(); yyj4158++ {

			if yyj4158 >= len(yyv4158) {
				yyv4158 = append(yyv4158, LimitRange{}) // var yyz4158 LimitRange
				yyc4158 = true
			}
			yyh4158.ElemContainerState(yyj4158)
			if yyj4158 < len(yyv4158) {
				if r.TryDecodeAsNil() {
					yyv4158[yyj4158] = LimitRange{}
				} else {
					yyv4161 := &yyv4158[yyj4158]
					yyv4161.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4158 < len(yyv4158) {
			yyv4158 = yyv4158[:yyj4158]
			yyc4158 = true
		} else if yyj4158 == 0 && yyv4158 == nil {
			yyv4158 = []LimitRange{}
			yyc4158 = true
		}
	}
	yyh4158.End()
	if yyc4158 {
		*v = yyv4158
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4162 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4163 := &yyv4162
		yy4163.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4164 := *v
	yyh4164, yyl4164 := z.DecSliceHelperStart()
	var yyc4164 bool
	if yyl4164 == 0 {
		if yyv4164 == nil {
			yyv4164 = []ResourceQuota{}
			yyc4164 = true
		} else if len(yyv4164) != 0 {
			yyv4164 = yyv4164[:0]
			yyc4164 = true
		}
	} else if yyl4164 > 0 {
		var yyrr4164, yyrl4164 int
		var yyrt4164 bool
		if yyl4164 > cap(yyv4164) {

			yyrg4164 := len(yyv4164) > 0
			yyv24164 := yyv4164
			yyrl4164, yyrt4164 = z.DecInferLen(yyl4164, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4164 {
				if yyrl4164 <= cap(yyv4164) {
					yyv4164 = yyv4164[:yyrl4164]
				} else {
					yyv4164 = make([]ResourceQuota, yyrl4164)
				}
			} else {
				yyv4164 = make([]ResourceQuota, yyrl4164)
			}
			yyc4164 = true
			yyrr4164 = len(yyv4164)
			if yyrg4164 {
				copy(yyv4164, yyv24164)
			}
		} else if yyl4164 != len(yyv4164) {
			yyv4164 = yyv4164[:yyl4164]
			yyc4164 = true
		}
		yyj4164 := 0
		for ; yyj4164 < yyrr4164; yyj4164++ {
			yyh4164.ElemContainerState(yyj4164)
			if r.TryDecodeAsNil() {
				yyv4164[yyj4164] = ResourceQuota{}
			} else {
				yyv4165 := &yyv4164[yyj4164]
				yyv4165.CodecDecodeSelf(d)
			}

		}
		if yyrt4164 {
			for ; yyj4164 < yyl4164; yyj4164++ {
				yyv4164 = append(yyv4164, ResourceQuota{})
				yyh4164.ElemContainerState(yyj4164)
				if r.TryDecodeAsNil() {
					yyv4164[yyj4164] = ResourceQuota{}
				} else {
					yyv4166 := &yyv4164[yyj4164]
					yyv4166.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4164 := 0
		for ; !r.CheckBreak(); yyj4164++ {

			if yyj4164 >= len(yyv4164) {
				yyv4164 = append(yyv4164, ResourceQuota{}) // var yyz4164 ResourceQuota
				yyc4164 = true
			}
			yyh4164.ElemContainerState(yyj4164)
			if yyj4164 < len(yyv4164) {
				if r.TryDecodeAsNil() {
					yyv4164[yyj4164] = ResourceQuota{}
				} else {
					yyv4167 := &yyv4164[yyj4164]
					yyv4167.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4164 < len(yyv4164) {
			yyv4164 = yyv4164[:yyj4164]
			yyc4164 = true
		} else if yyj4164 == 0 && yyv4164 == nil {
			yyv4164 = []ResourceQuota{}
			yyc4164 = true
		}
	}
	yyh4164.End()
	if yyc4164 {
		*v = yyv4164
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4168, yyv4168 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4169 := z.EncBinary()
		_ = yym4169
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4168))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4168 == nil {
			r.EncodeNil()
		} else {
			yym4170 := z.EncBinary()
			_ = yym4170
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4168))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4171 := *v
	yyl4171 := r.ReadMapStart()
	yybh4171 := z.DecBasicHandle()
	if yyv4171 == nil {
		yyrl4171, _ := z.DecInferLen(yyl4171, yybh4171.MaxInitLen, 40)
		yyv4171 = make(map[string][]uint8, yyrl4171)
		*v = yyv4171
	}
	var yymk4171 string
	var yymv4171 []uint8
	var yymg4171 bool
	if yybh4171.MapValueReset {
		yymg4171 = true
	}
	if yyl4171 > 0 {
		for yyj4171 := 0; yyj4171 < yyl4171; yyj4171++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4171 = ""
			} else {
				yymk4171 = string(r.DecodeString())
			}

			if yymg4171 {
				yymv4171 = yyv4171[yymk4171]
			} else {
				yymv4171 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4171 = nil
			} else {
				yyv4173 := &yymv4171
				yym4174 := z.DecBinary()
				_ = yym4174
				if false {
				} else {
					*yyv4173 = r.DecodeBytes(*(*[]byte)(yyv4173), false, false)
				}
			}

			if yyv4171 != nil {
				yyv4171[yymk4171] = yymv4171
			}
		}
	} else if yyl4171 < 0 {
		for yyj4171 := 0; !r.CheckBreak(); yyj4171++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4171 = ""
			} else {
				yymk4171 = string(r.DecodeString())
			}

			if yymg4171 {
				yymv4171 = yyv4171[yymk4171]
			} else {
				yymv4171 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4171 = nil
			} else {
				yyv4176 := &yymv4171
				yym4177 := z.DecBinary()
				_ = yym4177
				if false {
				} else {
					*yyv4176 = r.DecodeBytes(*(*[]byte)(yyv4176), false, false)
				}
			}

			if yyv4171 != nil {
				yyv4171[yymk4171] = yymv4171
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4178 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4179 := &yyv4178
		yy4179.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4180 := *v
	yyh4180, yyl4180 := z.DecSliceHelperStart()
	var yyc4180 bool
	if yyl4180 == 0 {
		if yyv4180 == nil {
			yyv4180 = []Secret{}
			yyc4180 = true
		} else if len(yyv4180) != 0 {
			yyv4180 = yyv4180[:0]
			yyc4180 = true
		}
	} else if yyl4180 > 0 {
		var yyrr4180, yyrl4180 int
		var yyrt4180 bool
		if yyl4180 > cap(yyv4180) {

			yyrg4180 := len(yyv4180) > 0
			yyv24180 := yyv4180
			yyrl4180, yyrt4180 = z.DecInferLen(yyl4180, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4180 {
				if yyrl4180 <= cap(yyv4180) {
					yyv4180 = yyv4180[:yyrl4180]
				} else {
					yyv4180 = make([]Secret, yyrl4180)
				}
			} else {
				yyv4180 = make([]Secret, yyrl4180)
			}
			yyc4180 = true
			yyrr4180 = len(yyv4180)
			if yyrg4180 {
				copy(yyv4180, yyv24180)
			}
		} else if yyl4180 != len(yyv4180) {
			yyv4180 = yyv4180[:yyl4180]
			yyc4180 = true
		}
		yyj4180 := 0
		for ; yyj4180 < yyrr4180; yyj4180++ {
			yyh4180.ElemContainerState(yyj4180)
			if r.TryDecodeAsNil() {
				yyv4180[yyj4180] = Secret{}
			} else {
				yyv4181 := &yyv4180[yyj4180]
				yyv4181.CodecDecodeSelf(d)
			}

		}
		if yyrt4180 {
			for ; yyj4180 < yyl4180; yyj4180++ {
				yyv4180 = append(yyv4180, Secret{})
				yyh4180.ElemContainerState(yyj4180)
				if r.TryDecodeAsNil() {
					yyv4180[yyj4180] = Secret{}
				} else {
					yyv4182 := &yyv4180[yyj4180]
					yyv4182.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4180 := 0
		for ; !r.CheckBreak(); yyj4180++ {

			if yyj4180 >= len(yyv4180) {
				yyv4180 = append(yyv4180, Secret{}) // var yyz4180 Secret
				yyc4180 = true
			}
			yyh4180.ElemContainerState(yyj4180)
			if yyj4180 < len(yyv4180) {
				if r.TryDecodeAsNil() {
					yyv4180[yyj4180] = Secret{}
				} else {
					yyv4183 := &yyv4180[yyj4180]
					yyv4183.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4180 < len(yyv4180) {
			yyv4180 = yyv4180[:yyj4180]
			yyc4180 = true
		} else if yyj4180 == 0 && yyv4180 == nil {
			yyv4180 = []Secret{}
			yyc4180 = true
		}
	}
	yyh4180.End()
	if yyc4180 {
		*v = yyv4180
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4184 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4185 := &yyv4184
		yy4185.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4186 := *v
	yyh4186, yyl4186 := z.DecSliceHelperStart()
	var yyc4186 bool
	if yyl4186 == 0 {
		if yyv4186 == nil {
			yyv4186 = []ConfigMap{}
			yyc4186 = true
		} else if len(yyv4186) != 0 {
			yyv4186 = yyv4186[:0]
			yyc4186 = true
		}
	} else if yyl4186 > 0 {
		var yyrr4186, yyrl4186 int
		var yyrt4186 bool
		if yyl4186 > cap(yyv4186) {

			yyrg4186 := len(yyv4186) > 0
			yyv24186 := yyv4186
			yyrl4186, yyrt4186 = z.DecInferLen(yyl4186, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4186 {
				if yyrl4186 <= cap(yyv4186) {
					yyv4186 = yyv4186[:yyrl4186]
				} else {
					yyv4186 = make([]ConfigMap, yyrl4186)
				}
			} else {
				yyv4186 = make([]ConfigMap, yyrl4186)
			}
			yyc4186 = true
			yyrr4186 = len(yyv4186)
			if yyrg4186 {
				copy(yyv4186, yyv24186)
			}
		} else if yyl4186 != len(yyv4186) {
			yyv4186 = yyv4186[:yyl4186]
			yyc4186 = true
		}
		yyj4186 := 0
		for ; yyj4186 < yyrr4186; yyj4186++ {
			yyh4186.ElemContainerState(yyj4186)
			if r.TryDecodeAsNil() {
				yyv4186[yyj4186] = ConfigMap{}
			} else {
				yyv4187 := &yyv4186[yyj4186]
				yyv4187.CodecDecodeSelf(d)
			}

		}
		if yyrt4186 {
			for ; yyj4186 < yyl4186; yyj4186++ {
				yyv4186 = append(yyv4186, ConfigMap{})
				yyh4186.ElemContainerState(yyj4186)
				if r.TryDecodeAsNil() {
					yyv4186[yyj4186] = ConfigMap{}
				} else {
					yyv4188 := &yyv4186[yyj4186]
					yyv4188.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4186 := 0
		for ; !r.CheckBreak(); yyj4186++ {

			if yyj4186 >= len(yyv4186) {
				yyv4186 = append(yyv4186, ConfigMap{}) // var yyz4186 ConfigMap
				yyc4186 = true
			}
			yyh4186.ElemContainerState(yyj4186)
			if yyj4186 < len(yyv4186) {
				if r.TryDecodeAsNil() {
					yyv4186[yyj4186] = ConfigMap{}
				} else {
					yyv4189 := &yyv4186[yyj4186]
					yyv4189.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4186 < len(yyv4186) {
			yyv4186 = yyv4186[:yyj4186]
			yyc4186 = true
		} else if yyj4186 == 0 && yyv4186 == nil {
			yyv4186 = []ConfigMap{}
			yyc4186 = true
		}
	}
	yyh4186.End()
	if yyc4186 {
		*v = yyv4186
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4190 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4191 := &yyv4190
		yy4191.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4192 := *v
	yyh4192, yyl4192 := z.DecSliceHelperStart()
	var yyc4192 bool
	if yyl4192 == 0 {
		if yyv4192 == nil {
			yyv4192 = []ComponentCondition{}
			yyc4192 = true
		} else if len(yyv4192) != 0 {
			yyv4192 = yyv4192[:0]
			yyc4192 = true
		}
	} else if yyl4192 > 0 {
		var yyrr4192, yyrl4192 int
		var yyrt4192 bool
		if yyl4192 > cap(yyv4192) {

			yyrg4192 := len(yyv4192) > 0
			yyv24192 := yyv4192
			yyrl4192, yyrt4192 = z.DecInferLen(yyl4192, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4192 {
				if yyrl4192 <= cap(yyv4192) {
					yyv4192 = yyv4192[:yyrl4192]
				} else {
					yyv4192 = make([]ComponentCondition, yyrl4192)
				}
			} else {
				yyv4192 = make([]ComponentCondition, yyrl4192)
			}
			yyc4192 = true
			yyrr4192 = len(yyv4192)
			if yyrg4192 {
				copy(yyv4192, yyv24192)
			}
		} else if yyl4192 != len(yyv4192) {
			yyv4192 = yyv4192[:yyl4192]
			yyc4192 = true
		}
		yyj4192 := 0
		for ; yyj4192 < yyrr4192; yyj4192++ {
			yyh4192.ElemContainerState(yyj4192)
			if r.TryDecodeAsNil() {
				yyv4192[yyj4192] = ComponentCondition{}
			} else {
				yyv4193 := &yyv4192[yyj4192]
				yyv4193.CodecDecodeSelf(d)
			}

		}
		if yyrt4192 {
			for ; yyj4192 < yyl4192; yyj4192++ {
				yyv4192 = append(yyv4192, ComponentCondition{})
				yyh4192.ElemContainerState(yyj4192)
				if r.TryDecodeAsNil() {
					yyv4192[yyj4192] = ComponentCondition{}
				} else {
					yyv4194 := &yyv4192[yyj4192]
					yyv4194.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4192 := 0
		for ; !r.CheckBreak(); yyj4192++ {

			if yyj4192 >= len(yyv4192) {
				yyv4192 = append(yyv4192, ComponentCondition{}) // var yyz4192 ComponentCondition
				yyc4192 = true
			}
			yyh4192.ElemContainerState(yyj4192)
			if yyj4192 < len(yyv4192) {
				if r.TryDecodeAsNil() {
					yyv4192[yyj4192] = ComponentCondition{}
				} else {
					yyv4195 := &yyv4192[yyj4192]
					yyv4195.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4192 < len(yyv4192) {
			yyv4192 = yyv4192[:yyj4192]
			yyc4192 = true
		} else if yyj4192 == 0 && yyv4192 == nil {
			yyv4192 = []ComponentCondition{}
			yyc4192 = true
		}
	}
	yyh4192.End()
	if yyc4192 {
		*v = yyv4192
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4196 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4197 := &yyv4196
		yy4197.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4198 := *v
	yyh4198, yyl4198 := z.DecSliceHelperStart()
	var yyc4198 bool
	if yyl4198 == 0 {
		if yyv4198 == nil {
			yyv4198 = []ComponentStatus{}
			yyc4198 = true
		} else if len(yyv4198) != 0 {
			yyv4198 = yyv4198[:0]
			yyc4198 = true
		}
	} else if yyl4198 > 0 {
		var yyrr4198, yyrl4198 int
		var yyrt4198 bool
		if yyl4198 > cap(yyv4198) {

			yyrg4198 := len(yyv4198) > 0
			yyv24198 := yyv4198
			yyrl4198, yyrt4198 = z.DecInferLen(yyl4198, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4198 {
				if yyrl4198 <= cap(yyv4198) {
					yyv4198 = yyv4198[:yyrl4198]
				} else {
					yyv4198 = make([]ComponentStatus, yyrl4198)
				}
			} else {
				yyv4198 = make([]ComponentStatus, yyrl4198)
			}
			yyc4198 = true
			yyrr4198 = len(yyv4198)
			if yyrg4198 {
				copy(yyv4198, yyv24198)
			}
		} else if yyl4198 != len(yyv4198) {
			yyv4198 = yyv4198[:yyl4198]
			yyc4198 = true
		}
		yyj4198 := 0
		for ; yyj4198 < yyrr4198; yyj4198++ {
			yyh4198.ElemContainerState(yyj4198)
			if r.TryDecodeAsNil() {
				yyv4198[yyj4198] = ComponentStatus{}
			} else {
				yyv4199 := &yyv4198[yyj4198]
				yyv4199.CodecDecodeSelf(d)
			}

		}
		if yyrt4198 {
			for ; yyj4198 < yyl4198; yyj4198++ {
				yyv4198 = append(yyv4198, ComponentStatus{})
				yyh4198.ElemContainerState(yyj4198)
				if r.TryDecodeAsNil() {
					yyv4198[yyj4198] = ComponentStatus{}
				} else {
					yyv4200 := &yyv4198[yyj4198]
					yyv4200.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4198 := 0
		for ; !r.CheckBreak(); yyj4198++ {

			if yyj4198 >= len(yyv4198) {
				yyv4198 = append(yyv4198, ComponentStatus{}) // var yyz4198 ComponentStatus
				yyc4198 = true
			}
			yyh4198.ElemContainerState(yyj4198)
			if yyj4198 < len(yyv4198) {
				if r.TryDecodeAsNil() {
					yyv4198[yyj4198] = ComponentStatus{}
				} else {
					yyv4201 := &yyv4198[yyj4198]
					yyv4201.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4198 < len(yyv4198) {
			yyv4198 = yyv4198[:yyj4198]
			yyc4198 = true
		} else if yyj4198 == 0 && yyv4198 == nil {
			yyv4198 = []ComponentStatus{}
			yyc4198 = true
		}
	}
	yyh4198.End()
	if yyc4198 {
		*v = yyv4198
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4202 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4203 := &yyv4202
		yy4203.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4204 := *v
	yyh4204, yyl4204 := z.DecSliceHelperStart()
	var yyc4204 bool
	if yyl4204 == 0 {
		if yyv4204 == nil {
			yyv4204 = []DownwardAPIVolumeFile{}
			yyc4204 = true
		} else if len(yyv4204) != 0 {
			yyv4204 = yyv4204[:0]
			yyc4204 = true
		}
	} else if yyl4204 > 0 {
		var yyrr4204, yyrl4204 int
		var yyrt4204 bool
		if yyl4204 > cap(yyv4204) {

			yyrg4204 := len(yyv4204) > 0
			yyv24204 := yyv4204
			yyrl4204, yyrt4204 = z.DecInferLen(yyl4204, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4204 {
				if yyrl4204 <= cap(yyv4204) {
					yyv4204 = yyv4204[:yyrl4204]
				} else {
					yyv4204 = make([]DownwardAPIVolumeFile, yyrl4204)
				}
			} else {
				yyv4204 = make([]DownwardAPIVolumeFile, yyrl4204)
			}
			yyc4204 = true
			yyrr4204 = len(yyv4204)
			if yyrg4204 {
				copy(yyv4204, yyv24204)
			}
		} else if yyl4204 != len(yyv4204) {
			yyv4204 = yyv4204[:yyl4204]
			yyc4204 = true
		}
		yyj4204 := 0
		for ; yyj4204 < yyrr4204; yyj4204++ {
			yyh4204.ElemContainerState(yyj4204)
			if r.TryDecodeAsNil() {
				yyv4204[yyj4204] = DownwardAPIVolumeFile{}
			} else {
				yyv4205 := &yyv4204[yyj4204]
				yyv4205.CodecDecodeSelf(d)
			}

		}
		if yyrt4204 {
			for ; yyj4204 < yyl4204; yyj4204++ {
				yyv4204 = append(yyv4204, DownwardAPIVolumeFile{})
				yyh4204.ElemContainerState(yyj4204)
				if r.TryDecodeAsNil() {
					yyv4204[yyj4204] = DownwardAPIVolumeFile{}
				} else {
					yyv4206 := &yyv4204[yyj4204]
					yyv4206.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4204 := 0
		for ; !r.CheckBreak(); yyj4204++ {

			if yyj4204 >= len(yyv4204) {
				yyv4204 = append(yyv4204, DownwardAPIVolumeFile{}) // var yyz4204 DownwardAPIVolumeFile
				yyc4204 = true
			}
			yyh4204.ElemContainerState(yyj4204)
			if yyj4204 < len(yyv4204) {
				if r.TryDecodeAsNil() {
					yyv4204[yyj4204] = DownwardAPIVolumeFile{}
				} else {
					yyv4207 := &yyv4204[yyj4204]
					yyv4207.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4204 < len(yyv4204) {
			yyv4204 = yyv4204[:yyj4204]
			yyc4204 = true
		} else if yyj4204 == 0 && yyv4204 == nil {
			yyv4204 = []DownwardAPIVolumeFile{}
			yyc4204 = true
		}
	}
	yyh4204.End()
	if yyc4204 {
		*v = yyv4204
	}
}

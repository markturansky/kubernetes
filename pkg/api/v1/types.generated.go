/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.RawExtension
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [19]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq82[13] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[14] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[15] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[16] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[17] = x.VolumeSource.FC != nil && x.FC != nil
			yyq82[18] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(19)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.Cinder == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.CephFS == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.Flocker == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.FC == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr82 || yy2arr82 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[17] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AzureFile == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr82 || yy2arr82 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[18] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym104 := z.DecBinary()
	_ = yym104
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct105 := r.ContainerType()
		if yyct105 == codecSelferValueTypeMap1234 {
			yyl105 := r.ReadMapStart()
			if yyl105 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl105, d)
			}
		} else if yyct105 == codecSelferValueTypeArray1234 {
			yyl105 := r.ReadArrayStart()
			if yyl105 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl105, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys106Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys106Slc
	var yyhl106 bool = l >= 0
	for yyj106 := 0; ; yyj106++ {
		if yyhl106 {
			if yyj106 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys106Slc = r.DecodeBytes(yys106Slc, true, true)
		yys106 := string(yys106Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys106 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys106)
		} // end switch yys106
	} // end for yyj106
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj126 int
	var yyb126 bool
	var yyhl126 bool = l >= 0
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj126++
	if yyhl126 {
		yyb126 = yyj126 > l
	} else {
		yyb126 = r.CheckBreak()
	}
	if yyb126 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj126++
		if yyhl126 {
			yyb126 = yyj126 > l
		} else {
			yyb126 = r.CheckBreak()
		}
		if yyb126 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj126-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym146 := z.EncBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep147 := !z.EncBinary()
			yy2arr147 := z.EncBasicHandle().StructToArray
			var yyq147 [18]bool
			_, _, _ = yysep147, yyq147, yy2arr147
			const yyr147 bool = false
			yyq147[0] = x.HostPath != nil
			yyq147[1] = x.EmptyDir != nil
			yyq147[2] = x.GCEPersistentDisk != nil
			yyq147[3] = x.AWSElasticBlockStore != nil
			yyq147[4] = x.GitRepo != nil
			yyq147[5] = x.Secret != nil
			yyq147[6] = x.NFS != nil
			yyq147[7] = x.ISCSI != nil
			yyq147[8] = x.Glusterfs != nil
			yyq147[9] = x.PersistentVolumeClaim != nil
			yyq147[10] = x.RBD != nil
			yyq147[11] = x.FlexVolume != nil
			yyq147[12] = x.Cinder != nil
			yyq147[13] = x.CephFS != nil
			yyq147[14] = x.Flocker != nil
			yyq147[15] = x.DownwardAPI != nil
			yyq147[16] = x.FC != nil
			yyq147[17] = x.AzureFile != nil
			var yynn147 int
			if yyr147 || yy2arr147 {
				r.EncodeArrayStart(18)
			} else {
				yynn147 = 0
				for _, b := range yyq147 {
					if b {
						yynn147++
					}
				}
				r.EncodeMapStart(yynn147)
				yynn147 = 0
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[12] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[13] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[14] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[15] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[16] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq147[17] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq147[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr147 || yy2arr147 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj187 int
	var yyb187 bool
	var yyhl187 bool = l >= 0
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj187++
		if yyhl187 {
			yyb187 = yyj187 > l
		} else {
			yyb187 = r.CheckBreak()
		}
		if yyb187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym206 := z.EncBinary()
		_ = yym206
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep207 := !z.EncBinary()
			yy2arr207 := z.EncBasicHandle().StructToArray
			var yyq207 [2]bool
			_, _, _ = yysep207, yyq207, yy2arr207
			const yyr207 bool = false
			yyq207[1] = x.ReadOnly != false
			var yynn207 int
			if yyr207 || yy2arr207 {
				r.EncodeArrayStart(2)
			} else {
				yynn207 = 1
				for _, b := range yyq207 {
					if b {
						yynn207++
					}
				}
				r.EncodeMapStart(yynn207)
				yynn207 = 0
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym209 := z.EncBinary()
				_ = yym209
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym210 := z.EncBinary()
				_ = yym210
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq207[1] {
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq207[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym213 := z.EncBinary()
					_ = yym213
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr207 || yy2arr207 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym214 := z.DecBinary()
	_ = yym214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct215 := r.ContainerType()
		if yyct215 == codecSelferValueTypeMap1234 {
			yyl215 := r.ReadMapStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl215, d)
			}
		} else if yyct215 == codecSelferValueTypeArray1234 {
			yyl215 := r.ReadArrayStart()
			if yyl215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys216Slc
	var yyhl216 bool = l >= 0
	for yyj216 := 0; ; yyj216++ {
		if yyhl216 {
			if yyj216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys216Slc = r.DecodeBytes(yys216Slc, true, true)
		yys216 := string(yys216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys216 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys216)
		} // end switch yys216
	} // end for yyj216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj219 int
	var yyb219 bool
	var yyhl219 bool = l >= 0
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj219++
	if yyhl219 {
		yyb219 = yyj219 > l
	} else {
		yyb219 = r.CheckBreak()
	}
	if yyb219 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj219++
		if yyhl219 {
			yyb219 = yyj219 > l
		} else {
			yyb219 = r.CheckBreak()
		}
		if yyb219 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj219-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym222 := z.EncBinary()
		_ = yym222
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep223 := !z.EncBinary()
			yy2arr223 := z.EncBasicHandle().StructToArray
			var yyq223 [13]bool
			_, _, _ = yysep223, yyq223, yy2arr223
			const yyr223 bool = false
			yyq223[0] = x.GCEPersistentDisk != nil
			yyq223[1] = x.AWSElasticBlockStore != nil
			yyq223[2] = x.HostPath != nil
			yyq223[3] = x.Glusterfs != nil
			yyq223[4] = x.NFS != nil
			yyq223[5] = x.RBD != nil
			yyq223[6] = x.ISCSI != nil
			yyq223[7] = x.Cinder != nil
			yyq223[8] = x.CephFS != nil
			yyq223[9] = x.FC != nil
			yyq223[10] = x.Flocker != nil
			yyq223[11] = x.FlexVolume != nil
			yyq223[12] = x.AzureFile != nil
			var yynn223 int
			if yyr223 || yy2arr223 {
				r.EncodeArrayStart(13)
			} else {
				yynn223 = 0
				for _, b := range yyq223 {
					if b {
						yynn223++
					}
				}
				r.EncodeMapStart(yynn223)
				yynn223 = 0
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[11] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq223[12] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq223[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr223 || yy2arr223 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym237 := z.DecBinary()
	_ = yym237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct238 := r.ContainerType()
		if yyct238 == codecSelferValueTypeMap1234 {
			yyl238 := r.ReadMapStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl238, d)
			}
		} else if yyct238 == codecSelferValueTypeArray1234 {
			yyl238 := r.ReadArrayStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys239Slc
	var yyhl239 bool = l >= 0
	for yyj239 := 0; ; yyj239++ {
		if yyhl239 {
			if yyj239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys239Slc = r.DecodeBytes(yys239Slc, true, true)
		yys239 := string(yys239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys239 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys239)
		} // end switch yys239
	} // end for yyj239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj253 int
	var yyb253 bool
	var yyhl253 bool = l >= 0
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj253++
		if yyhl253 {
			yyb253 = yyj253 > l
		} else {
			yyb253 = r.CheckBreak()
		}
		if yyb253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym267 := z.EncBinary()
		_ = yym267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep268 := !z.EncBinary()
			yy2arr268 := z.EncBasicHandle().StructToArray
			var yyq268 [5]bool
			_, _, _ = yysep268, yyq268, yy2arr268
			const yyr268 bool = false
			yyq268[0] = true
			yyq268[1] = true
			yyq268[2] = true
			yyq268[3] = x.Kind != ""
			yyq268[4] = x.APIVersion != ""
			var yynn268 int
			if yyr268 || yy2arr268 {
				r.EncodeArrayStart(5)
			} else {
				yynn268 = 0
				for _, b := range yyq268 {
					if b {
						yynn268++
					}
				}
				r.EncodeMapStart(yynn268)
				yynn268 = 0
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[0] {
					yy270 := &x.ObjectMeta
					yy270.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy271 := &x.ObjectMeta
					yy271.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[1] {
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Spec
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[2] {
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy277 := &x.Status
					yy277.CodecEncodeSelf(e)
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[3] {
					yym279 := z.EncBinary()
					_ = yym279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym280 := z.EncBinary()
					_ = yym280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq268[4] {
					yym282 := z.EncBinary()
					_ = yym282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq268[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym283 := z.EncBinary()
					_ = yym283
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr268 || yy2arr268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym284 := z.DecBinary()
	_ = yym284
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct285 := r.ContainerType()
		if yyct285 == codecSelferValueTypeMap1234 {
			yyl285 := r.ReadMapStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl285, d)
			}
		} else if yyct285 == codecSelferValueTypeArray1234 {
			yyl285 := r.ReadArrayStart()
			if yyl285 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl285, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys286Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys286Slc
	var yyhl286 bool = l >= 0
	for yyj286 := 0; ; yyj286++ {
		if yyhl286 {
			if yyj286 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys286Slc = r.DecodeBytes(yys286Slc, true, true)
		yys286 := string(yys286Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys286 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv287 := &x.ObjectMeta
				yyv287.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv288 := &x.Spec
				yyv288.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv289 := &x.Status
				yyv289.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys286)
		} // end switch yys286
	} // end for yyj286
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj292 int
	var yyb292 bool
	var yyhl292 bool = l >= 0
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv293 := &x.ObjectMeta
		yyv293.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv294 := &x.Spec
		yyv294.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv295 := &x.Status
		yyv295.CodecDecodeSelf(d)
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj292++
		if yyhl292 {
			yyb292 = yyj292 > l
		} else {
			yyb292 = r.CheckBreak()
		}
		if yyb292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym298 := z.EncBinary()
		_ = yym298
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep299 := !z.EncBinary()
			yy2arr299 := z.EncBasicHandle().StructToArray
			var yyq299 [17]bool
			_, _, _ = yysep299, yyq299, yy2arr299
			const yyr299 bool = false
			yyq299[0] = len(x.Capacity) != 0
			yyq299[1] = len(x.AccessModes) != 0
			yyq299[2] = x.ClaimRef != nil
			yyq299[3] = x.PersistentVolumeReclaimPolicy != ""
			yyq299[4] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq299[5] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq299[6] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq299[7] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq299[8] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq299[9] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq299[10] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq299[11] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq299[12] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq299[13] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq299[14] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq299[15] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq299[16] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			var yynn299 int
			if yyr299 || yy2arr299 {
				r.EncodeArrayStart(17)
			} else {
				yynn299 = 0
				for _, b := range yyq299 {
					if b {
						yynn299++
					}
				}
				r.EncodeMapStart(yynn299)
				yynn299 = 0
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym302 := z.EncBinary()
						_ = yym302
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym303 := z.EncBinary()
						_ = yym303
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[2] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq299[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq299[3] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq299[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			var yyn306 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn306 = true
				goto LABEL306
			}
		LABEL306:
			if yyr299 || yy2arr299 {
				if yyn306 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[4] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn306 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn307 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn307 = true
				goto LABEL307
			}
		LABEL307:
			if yyr299 || yy2arr299 {
				if yyn307 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[5] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn307 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn308 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn308 = true
				goto LABEL308
			}
		LABEL308:
			if yyr299 || yy2arr299 {
				if yyn308 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[6] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn308 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn309 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn309 = true
				goto LABEL309
			}
		LABEL309:
			if yyr299 || yy2arr299 {
				if yyn309 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[7] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn309 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn310 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn310 = true
				goto LABEL310
			}
		LABEL310:
			if yyr299 || yy2arr299 {
				if yyn310 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[8] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn310 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn311 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn311 = true
				goto LABEL311
			}
		LABEL311:
			if yyr299 || yy2arr299 {
				if yyn311 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[9] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn311 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn312 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn312 = true
				goto LABEL312
			}
		LABEL312:
			if yyr299 || yy2arr299 {
				if yyn312 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[10] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn312 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn313 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn313 = true
				goto LABEL313
			}
		LABEL313:
			if yyr299 || yy2arr299 {
				if yyn313 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[11] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn313 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn314 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn314 = true
				goto LABEL314
			}
		LABEL314:
			if yyr299 || yy2arr299 {
				if yyn314 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[12] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn314 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn315 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn315 = true
				goto LABEL315
			}
		LABEL315:
			if yyr299 || yy2arr299 {
				if yyn315 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[13] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn315 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn316 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn316 = true
				goto LABEL316
			}
		LABEL316:
			if yyr299 || yy2arr299 {
				if yyn316 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn316 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn317 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn317 = true
				goto LABEL317
			}
		LABEL317:
			if yyr299 || yy2arr299 {
				if yyn317 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[15] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn317 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn318 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn318 = true
				goto LABEL318
			}
		LABEL318:
			if yyr299 || yy2arr299 {
				if yyn318 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq299[16] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq299[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn318 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr299 || yy2arr299 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym319 := z.DecBinary()
	_ = yym319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct320 := r.ContainerType()
		if yyct320 == codecSelferValueTypeMap1234 {
			yyl320 := r.ReadMapStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl320, d)
			}
		} else if yyct320 == codecSelferValueTypeArray1234 {
			yyl320 := r.ReadArrayStart()
			if yyl320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys321Slc
	var yyhl321 bool = l >= 0
	for yyj321 := 0; ; yyj321++ {
		if yyhl321 {
			if yyj321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys321Slc = r.DecodeBytes(yys321Slc, true, true)
		yys321 := string(yys321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys321 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv322 := &x.Capacity
				yyv322.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv323 := &x.AccessModes
				yym324 := z.DecBinary()
				_ = yym324
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv323), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys321)
		} // end switch yys321
	} // end for yyj321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj340 int
	var yyb340 bool
	var yyhl340 bool = l >= 0
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv341 := &x.Capacity
		yyv341.CodecDecodeSelf(d)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv342 := &x.AccessModes
		yym343 := z.DecBinary()
		_ = yym343
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv342), d)
		}
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj340++
	if yyhl340 {
		yyb340 = yyj340 > l
	} else {
		yyb340 = r.CheckBreak()
	}
	if yyb340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	for {
		yyj340++
		if yyhl340 {
			yyb340 = yyj340 > l
		} else {
			yyb340 = r.CheckBreak()
		}
		if yyb340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym359 := z.EncBinary()
	_ = yym359
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym360 := z.DecBinary()
	_ = yym360
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym361 := z.EncBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep362 := !z.EncBinary()
			yy2arr362 := z.EncBasicHandle().StructToArray
			var yyq362 [4]bool
			_, _, _ = yysep362, yyq362, yy2arr362
			const yyr362 bool = false
			yyq362[0] = x.Phase != ""
			yyq362[1] = x.Message != ""
			yyq362[2] = x.Reason != ""
			yyq362[3] = len(x.Conditions) != 0
			var yynn362 int
			if yyr362 || yy2arr362 {
				r.EncodeArrayStart(4)
			} else {
				yynn362 = 0
				for _, b := range yyq362 {
					if b {
						yynn362++
					}
				}
				r.EncodeMapStart(yynn362)
				yynn362 = 0
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[1] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[2] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq362[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq362[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSlicePersistentVolumeCondition(([]PersistentVolumeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq362[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym372 := z.EncBinary()
						_ = yym372
						if false {
						} else {
							h.encSlicePersistentVolumeCondition(([]PersistentVolumeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr362 || yy2arr362 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym373 := z.DecBinary()
	_ = yym373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct374 := r.ContainerType()
		if yyct374 == codecSelferValueTypeMap1234 {
			yyl374 := r.ReadMapStart()
			if yyl374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl374, d)
			}
		} else if yyct374 == codecSelferValueTypeArray1234 {
			yyl374 := r.ReadArrayStart()
			if yyl374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys375Slc
	var yyhl375 bool = l >= 0
	for yyj375 := 0; ; yyj375++ {
		if yyhl375 {
			if yyj375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys375Slc = r.DecodeBytes(yys375Slc, true, true)
		yys375 := string(yys375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys375 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv379 := &x.Conditions
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolumeCondition((*[]PersistentVolumeCondition)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys375)
		} // end switch yys375
	} // end for yyj375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv385 := &x.Conditions
		yym386 := z.DecBinary()
		_ = yym386
		if false {
		} else {
			h.decSlicePersistentVolumeCondition((*[]PersistentVolumeCondition)(yyv385), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym387 := z.EncBinary()
		_ = yym387
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep388 := !z.EncBinary()
			yy2arr388 := z.EncBasicHandle().StructToArray
			var yyq388 [4]bool
			_, _, _ = yysep388, yyq388, yy2arr388
			const yyr388 bool = false
			yyq388[0] = true
			yyq388[2] = x.Kind != ""
			yyq388[3] = x.APIVersion != ""
			var yynn388 int
			if yyr388 || yy2arr388 {
				r.EncodeArrayStart(4)
			} else {
				yynn388 = 1
				for _, b := range yyq388 {
					if b {
						yynn388++
					}
				}
				r.EncodeMapStart(yynn388)
				yynn388 = 0
			}
			if yyr388 || yy2arr388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq388[0] {
					yy390 := &x.ListMeta
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else if z.HasExtensions() && z.EncExt(yy390) {
					} else {
						z.EncFallback(yy390)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq388[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy392 := &x.ListMeta
					yym393 := z.EncBinary()
					_ = yym393
					if false {
					} else if z.HasExtensions() && z.EncExt(yy392) {
					} else {
						z.EncFallback(yy392)
					}
				}
			}
			if yyr388 || yy2arr388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym396 := z.EncBinary()
					_ = yym396
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr388 || yy2arr388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq388[2] {
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq388[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym399 := z.EncBinary()
					_ = yym399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr388 || yy2arr388 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq388[3] {
					yym401 := z.EncBinary()
					_ = yym401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq388[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym402 := z.EncBinary()
					_ = yym402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr388 || yy2arr388 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym403 := z.DecBinary()
	_ = yym403
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct404 := r.ContainerType()
		if yyct404 == codecSelferValueTypeMap1234 {
			yyl404 := r.ReadMapStart()
			if yyl404 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl404, d)
			}
		} else if yyct404 == codecSelferValueTypeArray1234 {
			yyl404 := r.ReadArrayStart()
			if yyl404 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl404, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys405Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys405Slc
	var yyhl405 bool = l >= 0
	for yyj405 := 0; ; yyj405++ {
		if yyhl405 {
			if yyj405 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys405Slc = r.DecodeBytes(yys405Slc, true, true)
		yys405 := string(yys405Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys405 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv406 := &x.ListMeta
				yym407 := z.DecBinary()
				_ = yym407
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv406) {
				} else {
					z.DecFallback(yyv406, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv408 := &x.Items
				yym409 := z.DecBinary()
				_ = yym409
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv408), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys405)
		} // end switch yys405
	} // end for yyj405
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj412 int
	var yyb412 bool
	var yyhl412 bool = l >= 0
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv413 := &x.ListMeta
		yym414 := z.DecBinary()
		_ = yym414
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv413) {
		} else {
			z.DecFallback(yyv413, false)
		}
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv415 := &x.Items
		yym416 := z.DecBinary()
		_ = yym416
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv415), d)
		}
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj412++
	if yyhl412 {
		yyb412 = yyj412 > l
	} else {
		yyb412 = r.CheckBreak()
	}
	if yyb412 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj412++
		if yyhl412 {
			yyb412 = yyj412 > l
		} else {
			yyb412 = r.CheckBreak()
		}
		if yyb412 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj412-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [5]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = true
			yyq420[1] = true
			yyq420[2] = true
			yyq420[3] = x.Kind != ""
			yyq420[4] = x.APIVersion != ""
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(5)
			} else {
				yynn420 = 0
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yy422 := &x.ObjectMeta
					yy422.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy423 := &x.ObjectMeta
					yy423.CodecEncodeSelf(e)
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yy425 := &x.Spec
					yy425.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy426 := &x.Spec
					yy426.CodecEncodeSelf(e)
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yy428 := &x.Status
					yy428.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy429 := &x.Status
					yy429.CodecEncodeSelf(e)
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[3] {
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym432 := z.EncBinary()
					_ = yym432
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[4] {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym436 := z.DecBinary()
	_ = yym436
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct437 := r.ContainerType()
		if yyct437 == codecSelferValueTypeMap1234 {
			yyl437 := r.ReadMapStart()
			if yyl437 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl437, d)
			}
		} else if yyct437 == codecSelferValueTypeArray1234 {
			yyl437 := r.ReadArrayStart()
			if yyl437 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl437, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys438Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys438Slc
	var yyhl438 bool = l >= 0
	for yyj438 := 0; ; yyj438++ {
		if yyhl438 {
			if yyj438 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys438Slc = r.DecodeBytes(yys438Slc, true, true)
		yys438 := string(yys438Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys438 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv439 := &x.ObjectMeta
				yyv439.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv440 := &x.Spec
				yyv440.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv441 := &x.Status
				yyv441.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys438)
		} // end switch yys438
	} // end for yyj438
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv445 := &x.ObjectMeta
		yyv445.CodecDecodeSelf(d)
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv446 := &x.Spec
		yyv446.CodecDecodeSelf(d)
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv447 := &x.Status
		yyv447.CodecDecodeSelf(d)
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym450 := z.EncBinary()
		_ = yym450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep451 := !z.EncBinary()
			yy2arr451 := z.EncBasicHandle().StructToArray
			var yyq451 [4]bool
			_, _, _ = yysep451, yyq451, yy2arr451
			const yyr451 bool = false
			yyq451[0] = true
			yyq451[2] = x.Kind != ""
			yyq451[3] = x.APIVersion != ""
			var yynn451 int
			if yyr451 || yy2arr451 {
				r.EncodeArrayStart(4)
			} else {
				yynn451 = 1
				for _, b := range yyq451 {
					if b {
						yynn451++
					}
				}
				r.EncodeMapStart(yynn451)
				yynn451 = 0
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[0] {
					yy453 := &x.ListMeta
					yym454 := z.EncBinary()
					_ = yym454
					if false {
					} else if z.HasExtensions() && z.EncExt(yy453) {
					} else {
						z.EncFallback(yy453)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq451[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy455 := &x.ListMeta
					yym456 := z.EncBinary()
					_ = yym456
					if false {
					} else if z.HasExtensions() && z.EncExt(yy455) {
					} else {
						z.EncFallback(yy455)
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym458 := z.EncBinary()
					_ = yym458
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[2] {
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq451[3] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq451[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr451 || yy2arr451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym466 := z.DecBinary()
	_ = yym466
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct467 := r.ContainerType()
		if yyct467 == codecSelferValueTypeMap1234 {
			yyl467 := r.ReadMapStart()
			if yyl467 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl467, d)
			}
		} else if yyct467 == codecSelferValueTypeArray1234 {
			yyl467 := r.ReadArrayStart()
			if yyl467 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl467, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys468Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys468Slc
	var yyhl468 bool = l >= 0
	for yyj468 := 0; ; yyj468++ {
		if yyhl468 {
			if yyj468 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys468Slc = r.DecodeBytes(yys468Slc, true, true)
		yys468 := string(yys468Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys468 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv469 := &x.ListMeta
				yym470 := z.DecBinary()
				_ = yym470
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv469) {
				} else {
					z.DecFallback(yyv469, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv471 := &x.Items
				yym472 := z.DecBinary()
				_ = yym472
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv471), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys468)
		} // end switch yys468
	} // end for yyj468
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj475 int
	var yyb475 bool
	var yyhl475 bool = l >= 0
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv476 := &x.ListMeta
		yym477 := z.DecBinary()
		_ = yym477
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv476) {
		} else {
			z.DecFallback(yyv476, false)
		}
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv478 := &x.Items
		yym479 := z.DecBinary()
		_ = yym479
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv478), d)
		}
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj475++
	if yyhl475 {
		yyb475 = yyj475 > l
	} else {
		yyb475 = r.CheckBreak()
	}
	if yyb475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj475++
		if yyhl475 {
			yyb475 = yyj475 > l
		} else {
			yyb475 = r.CheckBreak()
		}
		if yyb475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym482 := z.EncBinary()
		_ = yym482
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep483 := !z.EncBinary()
			yy2arr483 := z.EncBasicHandle().StructToArray
			var yyq483 [3]bool
			_, _, _ = yysep483, yyq483, yy2arr483
			const yyr483 bool = false
			yyq483[0] = len(x.AccessModes) != 0
			yyq483[1] = true
			yyq483[2] = x.VolumeName != ""
			var yynn483 int
			if yyr483 || yy2arr483 {
				r.EncodeArrayStart(3)
			} else {
				yynn483 = 0
				for _, b := range yyq483 {
					if b {
						yynn483++
					}
				}
				r.EncodeMapStart(yynn483)
				yynn483 = 0
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq483[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym485 := z.EncBinary()
						_ = yym485
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq483[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym486 := z.EncBinary()
						_ = yym486
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq483[1] {
					yy488 := &x.Resources
					yy488.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq483[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy489 := &x.Resources
					yy489.CodecEncodeSelf(e)
				}
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq483[2] {
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq483[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym492 := z.EncBinary()
					_ = yym492
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr483 || yy2arr483 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym493 := z.DecBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct494 := r.ContainerType()
		if yyct494 == codecSelferValueTypeMap1234 {
			yyl494 := r.ReadMapStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl494, d)
			}
		} else if yyct494 == codecSelferValueTypeArray1234 {
			yyl494 := r.ReadArrayStart()
			if yyl494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys495Slc
	var yyhl495 bool = l >= 0
	for yyj495 := 0; ; yyj495++ {
		if yyhl495 {
			if yyj495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys495Slc = r.DecodeBytes(yys495Slc, true, true)
		yys495 := string(yys495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys495 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv496 := &x.AccessModes
				yym497 := z.DecBinary()
				_ = yym497
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv496), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv498 := &x.Resources
				yyv498.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys495)
		} // end switch yys495
	} // end for yyj495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj500 int
	var yyb500 bool
	var yyhl500 bool = l >= 0
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv501 := &x.AccessModes
		yym502 := z.DecBinary()
		_ = yym502
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv501), d)
		}
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv503 := &x.Resources
		yyv503.CodecDecodeSelf(d)
	}
	yyj500++
	if yyhl500 {
		yyb500 = yyj500 > l
	} else {
		yyb500 = r.CheckBreak()
	}
	if yyb500 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj500++
		if yyhl500 {
			yyb500 = yyj500 > l
		} else {
			yyb500 = r.CheckBreak()
		}
		if yyb500 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj500-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym505 := z.EncBinary()
		_ = yym505
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep506 := !z.EncBinary()
			yy2arr506 := z.EncBasicHandle().StructToArray
			var yyq506 [4]bool
			_, _, _ = yysep506, yyq506, yy2arr506
			const yyr506 bool = false
			yyq506[0] = x.Phase != ""
			yyq506[1] = len(x.AccessModes) != 0
			yyq506[2] = len(x.Capacity) != 0
			yyq506[3] = len(x.Conditions) != 0
			var yynn506 int
			if yyr506 || yy2arr506 {
				r.EncodeArrayStart(4)
			} else {
				yynn506 = 0
				for _, b := range yyq506 {
					if b {
						yynn506++
					}
				}
				r.EncodeMapStart(yynn506)
				yynn506 = 0
			}
			if yyr506 || yy2arr506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq506[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq506[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr506 || yy2arr506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq506[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym509 := z.EncBinary()
						_ = yym509
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq506[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym510 := z.EncBinary()
						_ = yym510
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr506 || yy2arr506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq506[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq506[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr506 || yy2arr506 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq506[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym513 := z.EncBinary()
						_ = yym513
						if false {
						} else {
							h.encSlicePersistentVolumeClaimCondition(([]PersistentVolumeClaimCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq506[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym514 := z.EncBinary()
						_ = yym514
						if false {
						} else {
							h.encSlicePersistentVolumeClaimCondition(([]PersistentVolumeClaimCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr506 || yy2arr506 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym515 := z.DecBinary()
	_ = yym515
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct516 := r.ContainerType()
		if yyct516 == codecSelferValueTypeMap1234 {
			yyl516 := r.ReadMapStart()
			if yyl516 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl516, d)
			}
		} else if yyct516 == codecSelferValueTypeArray1234 {
			yyl516 := r.ReadArrayStart()
			if yyl516 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl516, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys517Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys517Slc
	var yyhl517 bool = l >= 0
	for yyj517 := 0; ; yyj517++ {
		if yyhl517 {
			if yyj517 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys517Slc = r.DecodeBytes(yys517Slc, true, true)
		yys517 := string(yys517Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys517 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv519 := &x.AccessModes
				yym520 := z.DecBinary()
				_ = yym520
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv519), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv521 := &x.Capacity
				yyv521.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv522 := &x.Conditions
				yym523 := z.DecBinary()
				_ = yym523
				if false {
				} else {
					h.decSlicePersistentVolumeClaimCondition((*[]PersistentVolumeClaimCondition)(yyv522), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys517)
		} // end switch yys517
	} // end for yyj517
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj524 int
	var yyb524 bool
	var yyhl524 bool = l >= 0
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv526 := &x.AccessModes
		yym527 := z.DecBinary()
		_ = yym527
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv526), d)
		}
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv528 := &x.Capacity
		yyv528.CodecDecodeSelf(d)
	}
	yyj524++
	if yyhl524 {
		yyb524 = yyj524 > l
	} else {
		yyb524 = r.CheckBreak()
	}
	if yyb524 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv529 := &x.Conditions
		yym530 := z.DecBinary()
		_ = yym530
		if false {
		} else {
			h.decSlicePersistentVolumeClaimCondition((*[]PersistentVolumeClaimCondition)(yyv529), d)
		}
	}
	for {
		yyj524++
		if yyhl524 {
			yyb524 = yyj524 > l
		} else {
			yyb524 = r.CheckBreak()
		}
		if yyb524 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj524-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym531 := z.EncBinary()
	_ = yym531
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym532 := z.DecBinary()
	_ = yym532
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym533 := z.EncBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym534 := z.DecBinary()
	_ = yym534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym535 := z.EncBinary()
	_ = yym535
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym536 := z.DecBinary()
	_ = yym536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym537 := z.EncBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym538 := z.DecBinary()
	_ = yym538
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym539 := z.EncBinary()
		_ = yym539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep540 := !z.EncBinary()
			yy2arr540 := z.EncBasicHandle().StructToArray
			var yyq540 [6]bool
			_, _, _ = yysep540, yyq540, yy2arr540
			const yyr540 bool = false
			yyq540[2] = true
			yyq540[3] = true
			yyq540[4] = x.Reason != ""
			yyq540[5] = x.Message != ""
			var yynn540 int
			if yyr540 || yy2arr540 {
				r.EncodeArrayStart(6)
			} else {
				yynn540 = 2
				for _, b := range yyq540 {
					if b {
						yynn540++
					}
				}
				r.EncodeMapStart(yynn540)
				yynn540 = 0
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[2] {
					yy544 := &x.LastProbeTime
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else if z.HasExtensions() && z.EncExt(yy544) {
					} else if yym545 {
						z.EncBinaryMarshal(yy544)
					} else if !yym545 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy544)
					} else {
						z.EncFallback(yy544)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq540[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy546 := &x.LastProbeTime
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else if z.HasExtensions() && z.EncExt(yy546) {
					} else if yym547 {
						z.EncBinaryMarshal(yy546)
					} else if !yym547 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy546)
					} else {
						z.EncFallback(yy546)
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[3] {
					yy549 := &x.LastTransitionTime
					yym550 := z.EncBinary()
					_ = yym550
					if false {
					} else if z.HasExtensions() && z.EncExt(yy549) {
					} else if yym550 {
						z.EncBinaryMarshal(yy549)
					} else if !yym550 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy549)
					} else {
						z.EncFallback(yy549)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq540[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy551 := &x.LastTransitionTime
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else if z.HasExtensions() && z.EncExt(yy551) {
					} else if yym552 {
						z.EncBinaryMarshal(yy551)
					} else if !yym552 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy551)
					} else {
						z.EncFallback(yy551)
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[4] {
					yym554 := z.EncBinary()
					_ = yym554
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq540[5] {
					yym557 := z.EncBinary()
					_ = yym557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq540[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr540 || yy2arr540 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym559 := z.DecBinary()
	_ = yym559
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct560 := r.ContainerType()
		if yyct560 == codecSelferValueTypeMap1234 {
			yyl560 := r.ReadMapStart()
			if yyl560 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl560, d)
			}
		} else if yyct560 == codecSelferValueTypeArray1234 {
			yyl560 := r.ReadArrayStart()
			if yyl560 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl560, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys561Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys561Slc
	var yyhl561 bool = l >= 0
	for yyj561 := 0; ; yyj561++ {
		if yyhl561 {
			if yyj561 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys561Slc = r.DecodeBytes(yys561Slc, true, true)
		yys561 := string(yys561Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys561 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PersistentVolumeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv564 := &x.LastProbeTime
				yym565 := z.DecBinary()
				_ = yym565
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv564) {
				} else if yym565 {
					z.DecBinaryUnmarshal(yyv564)
				} else if !yym565 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv564)
				} else {
					z.DecFallback(yyv564, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv566 := &x.LastTransitionTime
				yym567 := z.DecBinary()
				_ = yym567
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv566) {
				} else if yym567 {
					z.DecBinaryUnmarshal(yyv566)
				} else if !yym567 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv566)
				} else {
					z.DecFallback(yyv566, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys561)
		} // end switch yys561
	} // end for yyj561
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj570 int
	var yyb570 bool
	var yyhl570 bool = l >= 0
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PersistentVolumeConditionType(r.DecodeString())
	}
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv573 := &x.LastProbeTime
		yym574 := z.DecBinary()
		_ = yym574
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv573) {
		} else if yym574 {
			z.DecBinaryUnmarshal(yyv573)
		} else if !yym574 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv573)
		} else {
			z.DecFallback(yyv573, false)
		}
	}
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv575 := &x.LastTransitionTime
		yym576 := z.DecBinary()
		_ = yym576
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv575) {
		} else if yym576 {
			z.DecBinaryUnmarshal(yyv575)
		} else if !yym576 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv575)
		} else {
			z.DecFallback(yyv575, false)
		}
	}
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj570++
	if yyhl570 {
		yyb570 = yyj570 > l
	} else {
		yyb570 = r.CheckBreak()
	}
	if yyb570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj570++
		if yyhl570 {
			yyb570 = yyj570 > l
		} else {
			yyb570 = r.CheckBreak()
		}
		if yyb570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeClaimConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym579 := z.EncBinary()
	_ = yym579
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym580 := z.DecBinary()
	_ = yym580
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeClaimCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym581 := z.EncBinary()
		_ = yym581
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep582 := !z.EncBinary()
			yy2arr582 := z.EncBasicHandle().StructToArray
			var yyq582 [6]bool
			_, _, _ = yysep582, yyq582, yy2arr582
			const yyr582 bool = false
			yyq582[2] = true
			yyq582[3] = true
			yyq582[4] = x.Reason != ""
			yyq582[5] = x.Message != ""
			var yynn582 int
			if yyr582 || yy2arr582 {
				r.EncodeArrayStart(6)
			} else {
				yynn582 = 2
				for _, b := range yyq582 {
					if b {
						yynn582++
					}
				}
				r.EncodeMapStart(yynn582)
				yynn582 = 0
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq582[2] {
					yy586 := &x.LastProbeTime
					yym587 := z.EncBinary()
					_ = yym587
					if false {
					} else if z.HasExtensions() && z.EncExt(yy586) {
					} else if yym587 {
						z.EncBinaryMarshal(yy586)
					} else if !yym587 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy586)
					} else {
						z.EncFallback(yy586)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq582[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy588 := &x.LastProbeTime
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else if z.HasExtensions() && z.EncExt(yy588) {
					} else if yym589 {
						z.EncBinaryMarshal(yy588)
					} else if !yym589 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy588)
					} else {
						z.EncFallback(yy588)
					}
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq582[3] {
					yy591 := &x.LastTransitionTime
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else if z.HasExtensions() && z.EncExt(yy591) {
					} else if yym592 {
						z.EncBinaryMarshal(yy591)
					} else if !yym592 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy591)
					} else {
						z.EncFallback(yy591)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq582[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy593 := &x.LastTransitionTime
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else if z.HasExtensions() && z.EncExt(yy593) {
					} else if yym594 {
						z.EncBinaryMarshal(yy593)
					} else if !yym594 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy593)
					} else {
						z.EncFallback(yy593)
					}
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq582[4] {
					yym596 := z.EncBinary()
					_ = yym596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq582[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq582[5] {
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq582[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr582 || yy2arr582 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct602 := r.ContainerType()
		if yyct602 == codecSelferValueTypeMap1234 {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if yyct602 == codecSelferValueTypeArray1234 {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys603 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PersistentVolumeClaimConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv606 := &x.LastProbeTime
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv606) {
				} else if yym607 {
					z.DecBinaryUnmarshal(yyv606)
				} else if !yym607 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv606)
				} else {
					z.DecFallback(yyv606, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv608 := &x.LastTransitionTime
				yym609 := z.DecBinary()
				_ = yym609
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv608) {
				} else if yym609 {
					z.DecBinaryUnmarshal(yyv608)
				} else if !yym609 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv608)
				} else {
					z.DecFallback(yyv608, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj612 int
	var yyb612 bool
	var yyhl612 bool = l >= 0
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PersistentVolumeClaimConditionType(r.DecodeString())
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv615 := &x.LastProbeTime
		yym616 := z.DecBinary()
		_ = yym616
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv615) {
		} else if yym616 {
			z.DecBinaryUnmarshal(yyv615)
		} else if !yym616 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv615)
		} else {
			z.DecFallback(yyv615, false)
		}
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv617 := &x.LastTransitionTime
		yym618 := z.DecBinary()
		_ = yym618
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv617) {
		} else if yym618 {
			z.DecBinaryUnmarshal(yyv617)
		} else if !yym618 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv617)
		} else {
			z.DecFallback(yyv617, false)
		}
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj612++
	if yyhl612 {
		yyb612 = yyj612 > l
	} else {
		yyb612 = r.CheckBreak()
	}
	if yyb612 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj612++
		if yyhl612 {
			yyb612 = yyj612 > l
		} else {
			yyb612 = r.CheckBreak()
		}
		if yyb612 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj612-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym621 := z.EncBinary()
		_ = yym621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep622 := !z.EncBinary()
			yy2arr622 := z.EncBasicHandle().StructToArray
			var yyq622 [1]bool
			_, _, _ = yysep622, yyq622, yy2arr622
			const yyr622 bool = false
			var yynn622 int
			if yyr622 || yy2arr622 {
				r.EncodeArrayStart(1)
			} else {
				yynn622 = 1
				for _, b := range yyq622 {
					if b {
						yynn622++
					}
				}
				r.EncodeMapStart(yynn622)
				yynn622 = 0
			}
			if yyr622 || yy2arr622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym624 := z.EncBinary()
				_ = yym624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym625 := z.EncBinary()
				_ = yym625
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr622 || yy2arr622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym626 := z.DecBinary()
	_ = yym626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct627 := r.ContainerType()
		if yyct627 == codecSelferValueTypeMap1234 {
			yyl627 := r.ReadMapStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl627, d)
			}
		} else if yyct627 == codecSelferValueTypeArray1234 {
			yyl627 := r.ReadArrayStart()
			if yyl627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys628Slc
	var yyhl628 bool = l >= 0
	for yyj628 := 0; ; yyj628++ {
		if yyhl628 {
			if yyj628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys628Slc = r.DecodeBytes(yys628Slc, true, true)
		yys628 := string(yys628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys628 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys628)
		} // end switch yys628
	} // end for yyj628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj630 int
	var yyb630 bool
	var yyhl630 bool = l >= 0
	yyj630++
	if yyhl630 {
		yyb630 = yyj630 > l
	} else {
		yyb630 = r.CheckBreak()
	}
	if yyb630 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj630++
		if yyhl630 {
			yyb630 = yyj630 > l
		} else {
			yyb630 = r.CheckBreak()
		}
		if yyb630 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj630-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym632 := z.EncBinary()
		_ = yym632
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep633 := !z.EncBinary()
			yy2arr633 := z.EncBasicHandle().StructToArray
			var yyq633 [1]bool
			_, _, _ = yysep633, yyq633, yy2arr633
			const yyr633 bool = false
			yyq633[0] = x.Medium != ""
			var yynn633 int
			if yyr633 || yy2arr633 {
				r.EncodeArrayStart(1)
			} else {
				yynn633 = 0
				for _, b := range yyq633 {
					if b {
						yynn633++
					}
				}
				r.EncodeMapStart(yynn633)
				yynn633 = 0
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq633[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq633[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr633 || yy2arr633 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym635 := z.DecBinary()
	_ = yym635
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct636 := r.ContainerType()
		if yyct636 == codecSelferValueTypeMap1234 {
			yyl636 := r.ReadMapStart()
			if yyl636 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl636, d)
			}
		} else if yyct636 == codecSelferValueTypeArray1234 {
			yyl636 := r.ReadArrayStart()
			if yyl636 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl636, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys637Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys637Slc
	var yyhl637 bool = l >= 0
	for yyj637 := 0; ; yyj637++ {
		if yyhl637 {
			if yyj637 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys637Slc = r.DecodeBytes(yys637Slc, true, true)
		yys637 := string(yys637Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys637 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys637)
		} // end switch yys637
	} // end for yyj637
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj639 int
	var yyb639 bool
	var yyhl639 bool = l >= 0
	yyj639++
	if yyhl639 {
		yyb639 = yyj639 > l
	} else {
		yyb639 = r.CheckBreak()
	}
	if yyb639 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj639++
		if yyhl639 {
			yyb639 = yyj639 > l
		} else {
			yyb639 = r.CheckBreak()
		}
		if yyb639 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj639-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym641 := z.EncBinary()
		_ = yym641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep642 := !z.EncBinary()
			yy2arr642 := z.EncBasicHandle().StructToArray
			var yyq642 [3]bool
			_, _, _ = yysep642, yyq642, yy2arr642
			const yyr642 bool = false
			yyq642[2] = x.ReadOnly != false
			var yynn642 int
			if yyr642 || yy2arr642 {
				r.EncodeArrayStart(3)
			} else {
				yynn642 = 2
				for _, b := range yyq642 {
					if b {
						yynn642++
					}
				}
				r.EncodeMapStart(yynn642)
				yynn642 = 0
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym644 := z.EncBinary()
				_ = yym644
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym645 := z.EncBinary()
				_ = yym645
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym647 := z.EncBinary()
				_ = yym647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym648 := z.EncBinary()
				_ = yym648
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq642[2] {
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq642[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym651 := z.EncBinary()
					_ = yym651
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr642 || yy2arr642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym652 := z.DecBinary()
	_ = yym652
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct653 := r.ContainerType()
		if yyct653 == codecSelferValueTypeMap1234 {
			yyl653 := r.ReadMapStart()
			if yyl653 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl653, d)
			}
		} else if yyct653 == codecSelferValueTypeArray1234 {
			yyl653 := r.ReadArrayStart()
			if yyl653 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl653, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys654Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys654Slc
	var yyhl654 bool = l >= 0
	for yyj654 := 0; ; yyj654++ {
		if yyhl654 {
			if yyj654 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys654Slc = r.DecodeBytes(yys654Slc, true, true)
		yys654 := string(yys654Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys654 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys654)
		} // end switch yys654
	} // end for yyj654
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj658 int
	var yyb658 bool
	var yyhl658 bool = l >= 0
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj658++
	if yyhl658 {
		yyb658 = yyj658 > l
	} else {
		yyb658 = r.CheckBreak()
	}
	if yyb658 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj658++
		if yyhl658 {
			yyb658 = yyj658 > l
		} else {
			yyb658 = r.CheckBreak()
		}
		if yyb658 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj658-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym662 := z.EncBinary()
		_ = yym662
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep663 := !z.EncBinary()
			yy2arr663 := z.EncBasicHandle().StructToArray
			var yyq663 [8]bool
			_, _, _ = yysep663, yyq663, yy2arr663
			const yyr663 bool = false
			yyq663[2] = x.FSType != ""
			yyq663[7] = x.ReadOnly != false
			var yynn663 int
			if yyr663 || yy2arr663 {
				r.EncodeArrayStart(8)
			} else {
				yynn663 = 6
				for _, b := range yyq663 {
					if b {
						yynn663++
					}
				}
				r.EncodeMapStart(yynn663)
				yynn663 = 0
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym665 := z.EncBinary()
					_ = yym665
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym666 := z.EncBinary()
					_ = yym666
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym669 := z.EncBinary()
				_ = yym669
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[2] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq663[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym675 := z.EncBinary()
				_ = yym675
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym677 := z.EncBinary()
				_ = yym677
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym678 := z.EncBinary()
				_ = yym678
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym680 := z.EncBinary()
				_ = yym680
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq663[7] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq663[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr663 || yy2arr663 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym686 := z.DecBinary()
	_ = yym686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct687 := r.ContainerType()
		if yyct687 == codecSelferValueTypeMap1234 {
			yyl687 := r.ReadMapStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl687, d)
			}
		} else if yyct687 == codecSelferValueTypeArray1234 {
			yyl687 := r.ReadArrayStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys688Slc
	var yyhl688 bool = l >= 0
	for yyj688 := 0; ; yyj688++ {
		if yyhl688 {
			if yyj688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys688Slc = r.DecodeBytes(yys688Slc, true, true)
		yys688 := string(yys688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys688 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv689 := &x.CephMonitors
				yym690 := z.DecBinary()
				_ = yym690
				if false {
				} else {
					z.F.DecSliceStringX(yyv689, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys688)
		} // end switch yys688
	} // end for yyj688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj698 int
	var yyb698 bool
	var yyhl698 bool = l >= 0
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv699 := &x.CephMonitors
		yym700 := z.DecBinary()
		_ = yym700
		if false {
		} else {
			z.F.DecSliceStringX(yyv699, false, d)
		}
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj698++
	if yyhl698 {
		yyb698 = yyj698 > l
	} else {
		yyb698 = r.CheckBreak()
	}
	if yyb698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj698++
		if yyhl698 {
			yyb698 = yyj698 > l
		} else {
			yyb698 = r.CheckBreak()
		}
		if yyb698 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj698-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym708 := z.EncBinary()
		_ = yym708
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep709 := !z.EncBinary()
			yy2arr709 := z.EncBasicHandle().StructToArray
			var yyq709 [3]bool
			_, _, _ = yysep709, yyq709, yy2arr709
			const yyr709 bool = false
			yyq709[1] = x.FSType != ""
			yyq709[2] = x.ReadOnly != false
			var yynn709 int
			if yyr709 || yy2arr709 {
				r.EncodeArrayStart(3)
			} else {
				yynn709 = 1
				for _, b := range yyq709 {
					if b {
						yynn709++
					}
				}
				r.EncodeMapStart(yynn709)
				yynn709 = 0
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym711 := z.EncBinary()
				_ = yym711
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym712 := z.EncBinary()
				_ = yym712
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[1] {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq709[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq709[2] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq709[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr709 || yy2arr709 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym719 := z.DecBinary()
	_ = yym719
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct720 := r.ContainerType()
		if yyct720 == codecSelferValueTypeMap1234 {
			yyl720 := r.ReadMapStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl720, d)
			}
		} else if yyct720 == codecSelferValueTypeArray1234 {
			yyl720 := r.ReadArrayStart()
			if yyl720 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl720, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys721Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys721Slc
	var yyhl721 bool = l >= 0
	for yyj721 := 0; ; yyj721++ {
		if yyhl721 {
			if yyj721 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys721Slc = r.DecodeBytes(yys721Slc, true, true)
		yys721 := string(yys721Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys721 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys721)
		} // end switch yys721
	} // end for yyj721
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj725 int
	var yyb725 bool
	var yyhl725 bool = l >= 0
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj725++
	if yyhl725 {
		yyb725 = yyj725 > l
	} else {
		yyb725 = r.CheckBreak()
	}
	if yyb725 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj725++
		if yyhl725 {
			yyb725 = yyj725 > l
		} else {
			yyb725 = r.CheckBreak()
		}
		if yyb725 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj725-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym729 := z.EncBinary()
		_ = yym729
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep730 := !z.EncBinary()
			yy2arr730 := z.EncBasicHandle().StructToArray
			var yyq730 [6]bool
			_, _, _ = yysep730, yyq730, yy2arr730
			const yyr730 bool = false
			yyq730[1] = x.Path != ""
			yyq730[2] = x.User != ""
			yyq730[3] = x.SecretFile != ""
			yyq730[4] = x.SecretRef != nil
			yyq730[5] = x.ReadOnly != false
			var yynn730 int
			if yyr730 || yy2arr730 {
				r.EncodeArrayStart(6)
			} else {
				yynn730 = 1
				for _, b := range yyq730 {
					if b {
						yynn730++
					}
				}
				r.EncodeMapStart(yynn730)
				yynn730 = 0
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq730[1] {
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq730[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq730[2] {
					yym738 := z.EncBinary()
					_ = yym738
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq730[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq730[3] {
					yym741 := z.EncBinary()
					_ = yym741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq730[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym742 := z.EncBinary()
					_ = yym742
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq730[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq730[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq730[5] {
					yym745 := z.EncBinary()
					_ = yym745
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq730[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym746 := z.EncBinary()
					_ = yym746
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr730 || yy2arr730 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym747 := z.DecBinary()
	_ = yym747
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct748 := r.ContainerType()
		if yyct748 == codecSelferValueTypeMap1234 {
			yyl748 := r.ReadMapStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl748, d)
			}
		} else if yyct748 == codecSelferValueTypeArray1234 {
			yyl748 := r.ReadArrayStart()
			if yyl748 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl748, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys749Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys749Slc
	var yyhl749 bool = l >= 0
	for yyj749 := 0; ; yyj749++ {
		if yyhl749 {
			if yyj749 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys749Slc = r.DecodeBytes(yys749Slc, true, true)
		yys749 := string(yys749Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys749 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv750 := &x.Monitors
				yym751 := z.DecBinary()
				_ = yym751
				if false {
				} else {
					z.F.DecSliceStringX(yyv750, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys749)
		} // end switch yys749
	} // end for yyj749
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj757 int
	var yyb757 bool
	var yyhl757 bool = l >= 0
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv758 := &x.Monitors
		yym759 := z.DecBinary()
		_ = yym759
		if false {
		} else {
			z.F.DecSliceStringX(yyv758, false, d)
		}
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj757++
	if yyhl757 {
		yyb757 = yyj757 > l
	} else {
		yyb757 = r.CheckBreak()
	}
	if yyb757 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj757++
		if yyhl757 {
			yyb757 = yyj757 > l
		} else {
			yyb757 = r.CheckBreak()
		}
		if yyb757 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj757-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym765 := z.EncBinary()
		_ = yym765
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep766 := !z.EncBinary()
			yy2arr766 := z.EncBasicHandle().StructToArray
			var yyq766 [1]bool
			_, _, _ = yysep766, yyq766, yy2arr766
			const yyr766 bool = false
			var yynn766 int
			if yyr766 || yy2arr766 {
				r.EncodeArrayStart(1)
			} else {
				yynn766 = 1
				for _, b := range yyq766 {
					if b {
						yynn766++
					}
				}
				r.EncodeMapStart(yynn766)
				yynn766 = 0
			}
			if yyr766 || yy2arr766 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym768 := z.EncBinary()
				_ = yym768
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym769 := z.EncBinary()
				_ = yym769
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr766 || yy2arr766 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym770 := z.DecBinary()
	_ = yym770
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct771 := r.ContainerType()
		if yyct771 == codecSelferValueTypeMap1234 {
			yyl771 := r.ReadMapStart()
			if yyl771 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl771, d)
			}
		} else if yyct771 == codecSelferValueTypeArray1234 {
			yyl771 := r.ReadArrayStart()
			if yyl771 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl771, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys772Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys772Slc
	var yyhl772 bool = l >= 0
	for yyj772 := 0; ; yyj772++ {
		if yyhl772 {
			if yyj772 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys772Slc = r.DecodeBytes(yys772Slc, true, true)
		yys772 := string(yys772Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys772 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys772)
		} // end switch yys772
	} // end for yyj772
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj774 int
	var yyb774 bool
	var yyhl774 bool = l >= 0
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj774++
		if yyhl774 {
			yyb774 = yyj774 > l
		} else {
			yyb774 = r.CheckBreak()
		}
		if yyb774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym776 := z.EncBinary()
	_ = yym776
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym777 := z.DecBinary()
	_ = yym777
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym778 := z.EncBinary()
	_ = yym778
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym779 := z.DecBinary()
	_ = yym779
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym780 := z.EncBinary()
		_ = yym780
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep781 := !z.EncBinary()
			yy2arr781 := z.EncBasicHandle().StructToArray
			var yyq781 [4]bool
			_, _, _ = yysep781, yyq781, yy2arr781
			const yyr781 bool = false
			yyq781[1] = x.FSType != ""
			yyq781[2] = x.Partition != 0
			yyq781[3] = x.ReadOnly != false
			var yynn781 int
			if yyr781 || yy2arr781 {
				r.EncodeArrayStart(4)
			} else {
				yynn781 = 1
				for _, b := range yyq781 {
					if b {
						yynn781++
					}
				}
				r.EncodeMapStart(yynn781)
				yynn781 = 0
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym783 := z.EncBinary()
				_ = yym783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym784 := z.EncBinary()
				_ = yym784
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq781[1] {
					yym786 := z.EncBinary()
					_ = yym786
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq781[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq781[2] {
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq781[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq781[3] {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq781[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr781 || yy2arr781 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym794 := z.DecBinary()
	_ = yym794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct795 := r.ContainerType()
		if yyct795 == codecSelferValueTypeMap1234 {
			yyl795 := r.ReadMapStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl795, d)
			}
		} else if yyct795 == codecSelferValueTypeArray1234 {
			yyl795 := r.ReadArrayStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys796Slc
	var yyhl796 bool = l >= 0
	for yyj796 := 0; ; yyj796++ {
		if yyhl796 {
			if yyj796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys796Slc = r.DecodeBytes(yys796Slc, true, true)
		yys796 := string(yys796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys796 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys796)
		} // end switch yys796
	} // end for yyj796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj801 int
	var yyb801 bool
	var yyhl801 bool = l >= 0
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj801++
	if yyhl801 {
		yyb801 = yyj801 > l
	} else {
		yyb801 = r.CheckBreak()
	}
	if yyb801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj801++
		if yyhl801 {
			yyb801 = yyj801 > l
		} else {
			yyb801 = r.CheckBreak()
		}
		if yyb801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym806 := z.EncBinary()
		_ = yym806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep807 := !z.EncBinary()
			yy2arr807 := z.EncBasicHandle().StructToArray
			var yyq807 [5]bool
			_, _, _ = yysep807, yyq807, yy2arr807
			const yyr807 bool = false
			yyq807[1] = x.FSType != ""
			yyq807[2] = x.SecretRef != nil
			yyq807[3] = x.ReadOnly != false
			yyq807[4] = len(x.Options) != 0
			var yynn807 int
			if yyr807 || yy2arr807 {
				r.EncodeArrayStart(5)
			} else {
				yynn807 = 1
				for _, b := range yyq807 {
					if b {
						yynn807++
					}
				}
				r.EncodeMapStart(yynn807)
				yynn807 = 0
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym809 := z.EncBinary()
				_ = yym809
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym810 := z.EncBinary()
				_ = yym810
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[1] {
					yym812 := z.EncBinary()
					_ = yym812
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq807[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[3] {
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq807[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq807[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym819 := z.EncBinary()
						_ = yym819
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq807[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym820 := z.EncBinary()
						_ = yym820
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr807 || yy2arr807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym821 := z.DecBinary()
	_ = yym821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct822 := r.ContainerType()
		if yyct822 == codecSelferValueTypeMap1234 {
			yyl822 := r.ReadMapStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl822, d)
			}
		} else if yyct822 == codecSelferValueTypeArray1234 {
			yyl822 := r.ReadArrayStart()
			if yyl822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys823Slc
	var yyhl823 bool = l >= 0
	for yyj823 := 0; ; yyj823++ {
		if yyhl823 {
			if yyj823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys823Slc = r.DecodeBytes(yys823Slc, true, true)
		yys823 := string(yys823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys823 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv828 := &x.Options
				yym829 := z.DecBinary()
				_ = yym829
				if false {
				} else {
					z.F.DecMapStringStringX(yyv828, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys823)
		} // end switch yys823
	} // end for yyj823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj830 int
	var yyb830 bool
	var yyhl830 bool = l >= 0
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj830++
	if yyhl830 {
		yyb830 = yyj830 > l
	} else {
		yyb830 = r.CheckBreak()
	}
	if yyb830 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv835 := &x.Options
		yym836 := z.DecBinary()
		_ = yym836
		if false {
		} else {
			z.F.DecMapStringStringX(yyv835, false, d)
		}
	}
	for {
		yyj830++
		if yyhl830 {
			yyb830 = yyj830 > l
		} else {
			yyb830 = r.CheckBreak()
		}
		if yyb830 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj830-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym837 := z.EncBinary()
		_ = yym837
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep838 := !z.EncBinary()
			yy2arr838 := z.EncBasicHandle().StructToArray
			var yyq838 [4]bool
			_, _, _ = yysep838, yyq838, yy2arr838
			const yyr838 bool = false
			yyq838[1] = x.FSType != ""
			yyq838[2] = x.Partition != 0
			yyq838[3] = x.ReadOnly != false
			var yynn838 int
			if yyr838 || yy2arr838 {
				r.EncodeArrayStart(4)
			} else {
				yynn838 = 1
				for _, b := range yyq838 {
					if b {
						yynn838++
					}
				}
				r.EncodeMapStart(yynn838)
				yynn838 = 0
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym840 := z.EncBinary()
				_ = yym840
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym841 := z.EncBinary()
				_ = yym841
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[1] {
					yym843 := z.EncBinary()
					_ = yym843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq838[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym844 := z.EncBinary()
					_ = yym844
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[2] {
					yym846 := z.EncBinary()
					_ = yym846
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq838[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq838[3] {
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq838[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym850 := z.EncBinary()
					_ = yym850
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr838 || yy2arr838 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym851 := z.DecBinary()
	_ = yym851
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct852 := r.ContainerType()
		if yyct852 == codecSelferValueTypeMap1234 {
			yyl852 := r.ReadMapStart()
			if yyl852 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl852, d)
			}
		} else if yyct852 == codecSelferValueTypeArray1234 {
			yyl852 := r.ReadArrayStart()
			if yyl852 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl852, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys853Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys853Slc
	var yyhl853 bool = l >= 0
	for yyj853 := 0; ; yyj853++ {
		if yyhl853 {
			if yyj853 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys853Slc = r.DecodeBytes(yys853Slc, true, true)
		yys853 := string(yys853Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys853 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys853)
		} // end switch yys853
	} // end for yyj853
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj858 int
	var yyb858 bool
	var yyhl858 bool = l >= 0
	yyj858++
	if yyhl858 {
		yyb858 = yyj858 > l
	} else {
		yyb858 = r.CheckBreak()
	}
	if yyb858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj858++
	if yyhl858 {
		yyb858 = yyj858 > l
	} else {
		yyb858 = r.CheckBreak()
	}
	if yyb858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj858++
	if yyhl858 {
		yyb858 = yyj858 > l
	} else {
		yyb858 = r.CheckBreak()
	}
	if yyb858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj858++
	if yyhl858 {
		yyb858 = yyj858 > l
	} else {
		yyb858 = r.CheckBreak()
	}
	if yyb858 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj858++
		if yyhl858 {
			yyb858 = yyj858 > l
		} else {
			yyb858 = r.CheckBreak()
		}
		if yyb858 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj858-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym863 := z.EncBinary()
		_ = yym863
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep864 := !z.EncBinary()
			yy2arr864 := z.EncBasicHandle().StructToArray
			var yyq864 [3]bool
			_, _, _ = yysep864, yyq864, yy2arr864
			const yyr864 bool = false
			yyq864[1] = x.Revision != ""
			yyq864[2] = x.Directory != ""
			var yynn864 int
			if yyr864 || yy2arr864 {
				r.EncodeArrayStart(3)
			} else {
				yynn864 = 1
				for _, b := range yyq864 {
					if b {
						yynn864++
					}
				}
				r.EncodeMapStart(yynn864)
				yynn864 = 0
			}
			if yyr864 || yy2arr864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym866 := z.EncBinary()
				_ = yym866
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym867 := z.EncBinary()
				_ = yym867
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr864 || yy2arr864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq864[1] {
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq864[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym870 := z.EncBinary()
					_ = yym870
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr864 || yy2arr864 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq864[2] {
					yym872 := z.EncBinary()
					_ = yym872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq864[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr864 || yy2arr864 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym874 := z.DecBinary()
	_ = yym874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct875 := r.ContainerType()
		if yyct875 == codecSelferValueTypeMap1234 {
			yyl875 := r.ReadMapStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl875, d)
			}
		} else if yyct875 == codecSelferValueTypeArray1234 {
			yyl875 := r.ReadArrayStart()
			if yyl875 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl875, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys876Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys876Slc
	var yyhl876 bool = l >= 0
	for yyj876 := 0; ; yyj876++ {
		if yyhl876 {
			if yyj876 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys876Slc = r.DecodeBytes(yys876Slc, true, true)
		yys876 := string(yys876Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys876 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys876)
		} // end switch yys876
	} // end for yyj876
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj880 int
	var yyb880 bool
	var yyhl880 bool = l >= 0
	yyj880++
	if yyhl880 {
		yyb880 = yyj880 > l
	} else {
		yyb880 = r.CheckBreak()
	}
	if yyb880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj880++
	if yyhl880 {
		yyb880 = yyj880 > l
	} else {
		yyb880 = r.CheckBreak()
	}
	if yyb880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj880++
	if yyhl880 {
		yyb880 = yyj880 > l
	} else {
		yyb880 = r.CheckBreak()
	}
	if yyb880 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj880++
		if yyhl880 {
			yyb880 = yyj880 > l
		} else {
			yyb880 = r.CheckBreak()
		}
		if yyb880 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj880-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym884 := z.EncBinary()
		_ = yym884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep885 := !z.EncBinary()
			yy2arr885 := z.EncBasicHandle().StructToArray
			var yyq885 [1]bool
			_, _, _ = yysep885, yyq885, yy2arr885
			const yyr885 bool = false
			yyq885[0] = x.SecretName != ""
			var yynn885 int
			if yyr885 || yy2arr885 {
				r.EncodeArrayStart(1)
			} else {
				yynn885 = 0
				for _, b := range yyq885 {
					if b {
						yynn885++
					}
				}
				r.EncodeMapStart(yynn885)
				yynn885 = 0
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq885[0] {
					yym887 := z.EncBinary()
					_ = yym887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq885[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym889 := z.DecBinary()
	_ = yym889
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct890 := r.ContainerType()
		if yyct890 == codecSelferValueTypeMap1234 {
			yyl890 := r.ReadMapStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl890, d)
			}
		} else if yyct890 == codecSelferValueTypeArray1234 {
			yyl890 := r.ReadArrayStart()
			if yyl890 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl890, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys891Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys891Slc
	var yyhl891 bool = l >= 0
	for yyj891 := 0; ; yyj891++ {
		if yyhl891 {
			if yyj891 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys891Slc = r.DecodeBytes(yys891Slc, true, true)
		yys891 := string(yys891Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys891 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys891)
		} // end switch yys891
	} // end for yyj891
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj893 int
	var yyb893 bool
	var yyhl893 bool = l >= 0
	yyj893++
	if yyhl893 {
		yyb893 = yyj893 > l
	} else {
		yyb893 = r.CheckBreak()
	}
	if yyb893 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj893++
		if yyhl893 {
			yyb893 = yyj893 > l
		} else {
			yyb893 = r.CheckBreak()
		}
		if yyb893 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj893-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym895 := z.EncBinary()
		_ = yym895
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep896 := !z.EncBinary()
			yy2arr896 := z.EncBasicHandle().StructToArray
			var yyq896 [3]bool
			_, _, _ = yysep896, yyq896, yy2arr896
			const yyr896 bool = false
			yyq896[2] = x.ReadOnly != false
			var yynn896 int
			if yyr896 || yy2arr896 {
				r.EncodeArrayStart(3)
			} else {
				yynn896 = 2
				for _, b := range yyq896 {
					if b {
						yynn896++
					}
				}
				r.EncodeMapStart(yynn896)
				yynn896 = 0
			}
			if yyr896 || yy2arr896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym898 := z.EncBinary()
				_ = yym898
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym899 := z.EncBinary()
				_ = yym899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr896 || yy2arr896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym901 := z.EncBinary()
				_ = yym901
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym902 := z.EncBinary()
				_ = yym902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr896 || yy2arr896 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq896[2] {
					yym904 := z.EncBinary()
					_ = yym904
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq896[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym905 := z.EncBinary()
					_ = yym905
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr896 || yy2arr896 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym906 := z.DecBinary()
	_ = yym906
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct907 := r.ContainerType()
		if yyct907 == codecSelferValueTypeMap1234 {
			yyl907 := r.ReadMapStart()
			if yyl907 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl907, d)
			}
		} else if yyct907 == codecSelferValueTypeArray1234 {
			yyl907 := r.ReadArrayStart()
			if yyl907 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl907, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys908Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys908Slc
	var yyhl908 bool = l >= 0
	for yyj908 := 0; ; yyj908++ {
		if yyhl908 {
			if yyj908 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys908Slc = r.DecodeBytes(yys908Slc, true, true)
		yys908 := string(yys908Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys908 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys908)
		} // end switch yys908
	} // end for yyj908
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj912 int
	var yyb912 bool
	var yyhl912 bool = l >= 0
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj912++
	if yyhl912 {
		yyb912 = yyj912 > l
	} else {
		yyb912 = r.CheckBreak()
	}
	if yyb912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj912++
		if yyhl912 {
			yyb912 = yyj912 > l
		} else {
			yyb912 = r.CheckBreak()
		}
		if yyb912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym916 := z.EncBinary()
		_ = yym916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep917 := !z.EncBinary()
			yy2arr917 := z.EncBasicHandle().StructToArray
			var yyq917 [6]bool
			_, _, _ = yysep917, yyq917, yy2arr917
			const yyr917 bool = false
			yyq917[3] = x.ISCSIInterface != ""
			yyq917[4] = x.FSType != ""
			yyq917[5] = x.ReadOnly != false
			var yynn917 int
			if yyr917 || yy2arr917 {
				r.EncodeArrayStart(6)
			} else {
				yynn917 = 3
				for _, b := range yyq917 {
					if b {
						yynn917++
					}
				}
				r.EncodeMapStart(yynn917)
				yynn917 = 0
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym920 := z.EncBinary()
				_ = yym920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym922 := z.EncBinary()
				_ = yym922
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("iqn"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym923 := z.EncBinary()
				_ = yym923
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym925 := z.EncBinary()
				_ = yym925
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym926 := z.EncBinary()
				_ = yym926
				if false {
				} else {
					r.EncodeInt(int64(x.Lun))
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq917[3] {
					yym928 := z.EncBinary()
					_ = yym928
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq917[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym929 := z.EncBinary()
					_ = yym929
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq917[4] {
					yym931 := z.EncBinary()
					_ = yym931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq917[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym932 := z.EncBinary()
					_ = yym932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq917[5] {
					yym934 := z.EncBinary()
					_ = yym934
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq917[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym935 := z.EncBinary()
					_ = yym935
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym936 := z.DecBinary()
	_ = yym936
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct937 := r.ContainerType()
		if yyct937 == codecSelferValueTypeMap1234 {
			yyl937 := r.ReadMapStart()
			if yyl937 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl937, d)
			}
		} else if yyct937 == codecSelferValueTypeArray1234 {
			yyl937 := r.ReadArrayStart()
			if yyl937 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl937, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys938Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys938Slc
	var yyhl938 bool = l >= 0
	for yyj938 := 0; ; yyj938++ {
		if yyhl938 {
			if yyj938 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys938Slc = r.DecodeBytes(yys938Slc, true, true)
		yys938 := string(yys938Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys938 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys938)
		} // end switch yys938
	} // end for yyj938
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj945 int
	var yyb945 bool
	var yyhl945 bool = l >= 0
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj945++
	if yyhl945 {
		yyb945 = yyj945 > l
	} else {
		yyb945 = r.CheckBreak()
	}
	if yyb945 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj945++
		if yyhl945 {
			yyb945 = yyj945 > l
		} else {
			yyb945 = r.CheckBreak()
		}
		if yyb945 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj945-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym952 := z.EncBinary()
		_ = yym952
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep953 := !z.EncBinary()
			yy2arr953 := z.EncBasicHandle().StructToArray
			var yyq953 [4]bool
			_, _, _ = yysep953, yyq953, yy2arr953
			const yyr953 bool = false
			yyq953[2] = x.FSType != ""
			yyq953[3] = x.ReadOnly != false
			var yynn953 int
			if yyr953 || yy2arr953 {
				r.EncodeArrayStart(4)
			} else {
				yynn953 = 2
				for _, b := range yyq953 {
					if b {
						yynn953++
					}
				}
				r.EncodeMapStart(yynn953)
				yynn953 = 0
			}
			if yyr953 || yy2arr953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym955 := z.EncBinary()
					_ = yym955
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr953 || yy2arr953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy958 := *x.Lun
					yym959 := z.EncBinary()
					_ = yym959
					if false {
					} else {
						r.EncodeInt(int64(yy958))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy960 := *x.Lun
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeInt(int64(yy960))
					}
				}
			}
			if yyr953 || yy2arr953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq953[2] {
					yym963 := z.EncBinary()
					_ = yym963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq953[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym964 := z.EncBinary()
					_ = yym964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr953 || yy2arr953 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq953[3] {
					yym966 := z.EncBinary()
					_ = yym966
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq953[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym967 := z.EncBinary()
					_ = yym967
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr953 || yy2arr953 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym968 := z.DecBinary()
	_ = yym968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct969 := r.ContainerType()
		if yyct969 == codecSelferValueTypeMap1234 {
			yyl969 := r.ReadMapStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl969, d)
			}
		} else if yyct969 == codecSelferValueTypeArray1234 {
			yyl969 := r.ReadArrayStart()
			if yyl969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys970Slc
	var yyhl970 bool = l >= 0
	for yyj970 := 0; ; yyj970++ {
		if yyhl970 {
			if yyj970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys970Slc = r.DecodeBytes(yys970Slc, true, true)
		yys970 := string(yys970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys970 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv971 := &x.TargetWWNs
				yym972 := z.DecBinary()
				_ = yym972
				if false {
				} else {
					z.F.DecSliceStringX(yyv971, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym974 := z.DecBinary()
				_ = yym974
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys970)
		} // end switch yys970
	} // end for yyj970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj977 int
	var yyb977 bool
	var yyhl977 bool = l >= 0
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv978 := &x.TargetWWNs
		yym979 := z.DecBinary()
		_ = yym979
		if false {
		} else {
			z.F.DecSliceStringX(yyv978, false, d)
		}
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym981 := z.DecBinary()
		_ = yym981
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj977++
	if yyhl977 {
		yyb977 = yyj977 > l
	} else {
		yyb977 = r.CheckBreak()
	}
	if yyb977 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj977++
		if yyhl977 {
			yyb977 = yyj977 > l
		} else {
			yyb977 = r.CheckBreak()
		}
		if yyb977 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj977-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [3]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[2] = x.ReadOnly != false
			var yynn985 int
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(3)
			} else {
				yynn985 = 2
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
				yynn985 = 0
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym987 := z.EncBinary()
				_ = yym987
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym988 := z.EncBinary()
				_ = yym988
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym990 := z.EncBinary()
				_ = yym990
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym991 := z.EncBinary()
				_ = yym991
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq985[2] {
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq985[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym995 := z.DecBinary()
	_ = yym995
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct996 := r.ContainerType()
		if yyct996 == codecSelferValueTypeMap1234 {
			yyl996 := r.ReadMapStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl996, d)
			}
		} else if yyct996 == codecSelferValueTypeArray1234 {
			yyl996 := r.ReadArrayStart()
			if yyl996 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl996, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys997Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys997Slc
	var yyhl997 bool = l >= 0
	for yyj997 := 0; ; yyj997++ {
		if yyhl997 {
			if yyj997 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys997Slc = r.DecodeBytes(yys997Slc, true, true)
		yys997 := string(yys997Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys997 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys997)
		} // end switch yys997
	} // end for yyj997
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1001 int
	var yyb1001 bool
	var yyhl1001 bool = l >= 0
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1001++
		if yyhl1001 {
			yyb1001 = yyj1001 > l
		} else {
			yyb1001 = r.CheckBreak()
		}
		if yyb1001 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1001-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1005 := z.EncBinary()
		_ = yym1005
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1006 := !z.EncBinary()
			yy2arr1006 := z.EncBasicHandle().StructToArray
			var yyq1006 [5]bool
			_, _, _ = yysep1006, yyq1006, yy2arr1006
			const yyr1006 bool = false
			yyq1006[0] = x.Name != ""
			yyq1006[1] = x.HostPort != 0
			yyq1006[3] = x.Protocol != ""
			yyq1006[4] = x.HostIP != ""
			var yynn1006 int
			if yyr1006 || yy2arr1006 {
				r.EncodeArrayStart(5)
			} else {
				yynn1006 = 1
				for _, b := range yyq1006 {
					if b {
						yynn1006++
					}
				}
				r.EncodeMapStart(yynn1006)
				yynn1006 = 0
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[0] {
					yym1008 := z.EncBinary()
					_ = yym1008
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1006[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1009 := z.EncBinary()
					_ = yym1009
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[1] {
					yym1011 := z.EncBinary()
					_ = yym1011
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1006[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1012 := z.EncBinary()
					_ = yym1012
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1014 := z.EncBinary()
				_ = yym1014
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1015 := z.EncBinary()
				_ = yym1015
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1006[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1006[4] {
					yym1018 := z.EncBinary()
					_ = yym1018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1006[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1006 || yy2arr1006 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1020 := z.DecBinary()
	_ = yym1020
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1021 := r.ContainerType()
		if yyct1021 == codecSelferValueTypeMap1234 {
			yyl1021 := r.ReadMapStart()
			if yyl1021 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1021, d)
			}
		} else if yyct1021 == codecSelferValueTypeArray1234 {
			yyl1021 := r.ReadArrayStart()
			if yyl1021 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1021, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1022Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1022Slc
	var yyhl1022 bool = l >= 0
	for yyj1022 := 0; ; yyj1022++ {
		if yyhl1022 {
			if yyj1022 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1022Slc = r.DecodeBytes(yys1022Slc, true, true)
		yys1022 := string(yys1022Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1022 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1022)
		} // end switch yys1022
	} // end for yyj1022
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1028 int
	var yyb1028 bool
	var yyhl1028 bool = l >= 0
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1028++
	if yyhl1028 {
		yyb1028 = yyj1028 > l
	} else {
		yyb1028 = r.CheckBreak()
	}
	if yyb1028 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1028++
		if yyhl1028 {
			yyb1028 = yyj1028 > l
		} else {
			yyb1028 = r.CheckBreak()
		}
		if yyb1028 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1028-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1034 := z.EncBinary()
		_ = yym1034
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1035 := !z.EncBinary()
			yy2arr1035 := z.EncBasicHandle().StructToArray
			var yyq1035 [3]bool
			_, _, _ = yysep1035, yyq1035, yy2arr1035
			const yyr1035 bool = false
			yyq1035[1] = x.ReadOnly != false
			var yynn1035 int
			if yyr1035 || yy2arr1035 {
				r.EncodeArrayStart(3)
			} else {
				yynn1035 = 2
				for _, b := range yyq1035 {
					if b {
						yynn1035++
					}
				}
				r.EncodeMapStart(yynn1035)
				yynn1035 = 0
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1037 := z.EncBinary()
				_ = yym1037
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1035[1] {
					yym1040 := z.EncBinary()
					_ = yym1040
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1035[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1043 := z.EncBinary()
				_ = yym1043
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1044 := z.EncBinary()
				_ = yym1044
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1035 || yy2arr1035 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1045 := z.DecBinary()
	_ = yym1045
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1046 := r.ContainerType()
		if yyct1046 == codecSelferValueTypeMap1234 {
			yyl1046 := r.ReadMapStart()
			if yyl1046 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1046, d)
			}
		} else if yyct1046 == codecSelferValueTypeArray1234 {
			yyl1046 := r.ReadArrayStart()
			if yyl1046 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1046, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1047Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1047Slc
	var yyhl1047 bool = l >= 0
	for yyj1047 := 0; ; yyj1047++ {
		if yyhl1047 {
			if yyj1047 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1047Slc = r.DecodeBytes(yys1047Slc, true, true)
		yys1047 := string(yys1047Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1047 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1047)
		} // end switch yys1047
	} // end for yyj1047
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1051 int
	var yyb1051 bool
	var yyhl1051 bool = l >= 0
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1051++
	if yyhl1051 {
		yyb1051 = yyj1051 > l
	} else {
		yyb1051 = r.CheckBreak()
	}
	if yyb1051 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj1051++
		if yyhl1051 {
			yyb1051 = yyj1051 > l
		} else {
			yyb1051 = r.CheckBreak()
		}
		if yyb1051 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1051-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1055 := z.EncBinary()
		_ = yym1055
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1056 := !z.EncBinary()
			yy2arr1056 := z.EncBasicHandle().StructToArray
			var yyq1056 [3]bool
			_, _, _ = yysep1056, yyq1056, yy2arr1056
			const yyr1056 bool = false
			yyq1056[1] = x.Value != ""
			yyq1056[2] = x.ValueFrom != nil
			var yynn1056 int
			if yyr1056 || yy2arr1056 {
				r.EncodeArrayStart(3)
			} else {
				yynn1056 = 1
				for _, b := range yyq1056 {
					if b {
						yynn1056++
					}
				}
				r.EncodeMapStart(yynn1056)
				yynn1056 = 0
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1058 := z.EncBinary()
				_ = yym1058
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1059 := z.EncBinary()
				_ = yym1059
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[1] {
					yym1061 := z.EncBinary()
					_ = yym1061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1056[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1056[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1056[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1056 || yy2arr1056 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1064 := z.DecBinary()
	_ = yym1064
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1065 := r.ContainerType()
		if yyct1065 == codecSelferValueTypeMap1234 {
			yyl1065 := r.ReadMapStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1065, d)
			}
		} else if yyct1065 == codecSelferValueTypeArray1234 {
			yyl1065 := r.ReadArrayStart()
			if yyl1065 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1065, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1066Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1066Slc
	var yyhl1066 bool = l >= 0
	for yyj1066 := 0; ; yyj1066++ {
		if yyhl1066 {
			if yyj1066 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1066Slc = r.DecodeBytes(yys1066Slc, true, true)
		yys1066 := string(yys1066Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1066 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1066)
		} // end switch yys1066
	} // end for yyj1066
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1070 int
	var yyb1070 bool
	var yyhl1070 bool = l >= 0
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1070++
	if yyhl1070 {
		yyb1070 = yyj1070 > l
	} else {
		yyb1070 = r.CheckBreak()
	}
	if yyb1070 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1070++
		if yyhl1070 {
			yyb1070 = yyj1070 > l
		} else {
			yyb1070 = r.CheckBreak()
		}
		if yyb1070 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1070-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1074 := z.EncBinary()
		_ = yym1074
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1075 := !z.EncBinary()
			yy2arr1075 := z.EncBasicHandle().StructToArray
			var yyq1075 [3]bool
			_, _, _ = yysep1075, yyq1075, yy2arr1075
			const yyr1075 bool = false
			yyq1075[0] = x.FieldRef != nil
			yyq1075[1] = x.ConfigMapKeyRef != nil
			yyq1075[2] = x.SecretKeyRef != nil
			var yynn1075 int
			if yyr1075 || yy2arr1075 {
				r.EncodeArrayStart(3)
			} else {
				yynn1075 = 0
				for _, b := range yyq1075 {
					if b {
						yynn1075++
					}
				}
				r.EncodeMapStart(yynn1075)
				yynn1075 = 0
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[1] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1075[2] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1075[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1075 || yy2arr1075 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1079 := z.DecBinary()
	_ = yym1079
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1080 := r.ContainerType()
		if yyct1080 == codecSelferValueTypeMap1234 {
			yyl1080 := r.ReadMapStart()
			if yyl1080 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1080, d)
			}
		} else if yyct1080 == codecSelferValueTypeArray1234 {
			yyl1080 := r.ReadArrayStart()
			if yyl1080 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1080, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1081Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1081Slc
	var yyhl1081 bool = l >= 0
	for yyj1081 := 0; ; yyj1081++ {
		if yyhl1081 {
			if yyj1081 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1081Slc = r.DecodeBytes(yys1081Slc, true, true)
		yys1081 := string(yys1081Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1081 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1081)
		} // end switch yys1081
	} // end for yyj1081
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1085 int
	var yyb1085 bool
	var yyhl1085 bool = l >= 0
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1085++
	if yyhl1085 {
		yyb1085 = yyj1085 > l
	} else {
		yyb1085 = r.CheckBreak()
	}
	if yyb1085 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1085++
		if yyhl1085 {
			yyb1085 = yyj1085 > l
		} else {
			yyb1085 = r.CheckBreak()
		}
		if yyb1085 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1085-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1089 := z.EncBinary()
		_ = yym1089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1090 := !z.EncBinary()
			yy2arr1090 := z.EncBasicHandle().StructToArray
			var yyq1090 [2]bool
			_, _, _ = yysep1090, yyq1090, yy2arr1090
			const yyr1090 bool = false
			yyq1090[0] = x.APIVersion != ""
			var yynn1090 int
			if yyr1090 || yy2arr1090 {
				r.EncodeArrayStart(2)
			} else {
				yynn1090 = 1
				for _, b := range yyq1090 {
					if b {
						yynn1090++
					}
				}
				r.EncodeMapStart(yynn1090)
				yynn1090 = 0
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1090[0] {
					yym1092 := z.EncBinary()
					_ = yym1092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1093 := z.EncBinary()
					_ = yym1093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1095 := z.EncBinary()
				_ = yym1095
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1096 := z.EncBinary()
				_ = yym1096
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1090 || yy2arr1090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1097 := z.DecBinary()
	_ = yym1097
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1098 := r.ContainerType()
		if yyct1098 == codecSelferValueTypeMap1234 {
			yyl1098 := r.ReadMapStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1098, d)
			}
		} else if yyct1098 == codecSelferValueTypeArray1234 {
			yyl1098 := r.ReadArrayStart()
			if yyl1098 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1098, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1099Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1099Slc
	var yyhl1099 bool = l >= 0
	for yyj1099 := 0; ; yyj1099++ {
		if yyhl1099 {
			if yyj1099 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1099Slc = r.DecodeBytes(yys1099Slc, true, true)
		yys1099 := string(yys1099Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1099 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1099)
		} // end switch yys1099
	} // end for yyj1099
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1102 int
	var yyb1102 bool
	var yyhl1102 bool = l >= 0
	yyj1102++
	if yyhl1102 {
		yyb1102 = yyj1102 > l
	} else {
		yyb1102 = r.CheckBreak()
	}
	if yyb1102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1102++
	if yyhl1102 {
		yyb1102 = yyj1102 > l
	} else {
		yyb1102 = r.CheckBreak()
	}
	if yyb1102 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1102++
		if yyhl1102 {
			yyb1102 = yyj1102 > l
		} else {
			yyb1102 = r.CheckBreak()
		}
		if yyb1102 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1102-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1105 := z.EncBinary()
		_ = yym1105
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1106 := !z.EncBinary()
			yy2arr1106 := z.EncBasicHandle().StructToArray
			var yyq1106 [2]bool
			_, _, _ = yysep1106, yyq1106, yy2arr1106
			const yyr1106 bool = false
			yyq1106[1] = x.Name != ""
			var yynn1106 int
			if yyr1106 || yy2arr1106 {
				r.EncodeArrayStart(2)
			} else {
				yynn1106 = 1
				for _, b := range yyq1106 {
					if b {
						yynn1106++
					}
				}
				r.EncodeMapStart(yynn1106)
				yynn1106 = 0
			}
			if yyr1106 || yy2arr1106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1108 := z.EncBinary()
				_ = yym1108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1109 := z.EncBinary()
				_ = yym1109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1106 || yy2arr1106 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1106[1] {
					yym1111 := z.EncBinary()
					_ = yym1111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1106[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1112 := z.EncBinary()
					_ = yym1112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1106 || yy2arr1106 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1113 := z.DecBinary()
	_ = yym1113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1114 := r.ContainerType()
		if yyct1114 == codecSelferValueTypeMap1234 {
			yyl1114 := r.ReadMapStart()
			if yyl1114 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1114, d)
			}
		} else if yyct1114 == codecSelferValueTypeArray1234 {
			yyl1114 := r.ReadArrayStart()
			if yyl1114 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1115Slc
	var yyhl1115 bool = l >= 0
	for yyj1115 := 0; ; yyj1115++ {
		if yyhl1115 {
			if yyj1115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1115Slc = r.DecodeBytes(yys1115Slc, true, true)
		yys1115 := string(yys1115Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1115 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1115)
		} // end switch yys1115
	} // end for yyj1115
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1118 int
	var yyb1118 bool
	var yyhl1118 bool = l >= 0
	yyj1118++
	if yyhl1118 {
		yyb1118 = yyj1118 > l
	} else {
		yyb1118 = r.CheckBreak()
	}
	if yyb1118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1118++
	if yyhl1118 {
		yyb1118 = yyj1118 > l
	} else {
		yyb1118 = r.CheckBreak()
	}
	if yyb1118 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1118++
		if yyhl1118 {
			yyb1118 = yyj1118 > l
		} else {
			yyb1118 = r.CheckBreak()
		}
		if yyb1118 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1118-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [2]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[1] = x.Name != ""
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(2)
			} else {
				yynn1122 = 1
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1124 := z.EncBinary()
				_ = yym1124
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1125 := z.EncBinary()
				_ = yym1125
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[1] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1122[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1130 := r.ContainerType()
		if yyct1130 == codecSelferValueTypeMap1234 {
			yyl1130 := r.ReadMapStart()
			if yyl1130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1130, d)
			}
		} else if yyct1130 == codecSelferValueTypeArray1234 {
			yyl1130 := r.ReadArrayStart()
			if yyl1130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1131Slc
	var yyhl1131 bool = l >= 0
	for yyj1131 := 0; ; yyj1131++ {
		if yyhl1131 {
			if yyj1131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1131Slc = r.DecodeBytes(yys1131Slc, true, true)
		yys1131 := string(yys1131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1131 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1131)
		} // end switch yys1131
	} // end for yyj1131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1134 int
	var yyb1134 bool
	var yyhl1134 bool = l >= 0
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1134++
	if yyhl1134 {
		yyb1134 = yyj1134 > l
	} else {
		yyb1134 = r.CheckBreak()
	}
	if yyb1134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj1134++
		if yyhl1134 {
			yyb1134 = yyj1134 > l
		} else {
			yyb1134 = r.CheckBreak()
		}
		if yyb1134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1137 := z.EncBinary()
		_ = yym1137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1138 := !z.EncBinary()
			yy2arr1138 := z.EncBasicHandle().StructToArray
			var yyq1138 [2]bool
			_, _, _ = yysep1138, yyq1138, yy2arr1138
			const yyr1138 bool = false
			var yynn1138 int
			if yyr1138 || yy2arr1138 {
				r.EncodeArrayStart(2)
			} else {
				yynn1138 = 2
				for _, b := range yyq1138 {
					if b {
						yynn1138++
					}
				}
				r.EncodeMapStart(yynn1138)
				yynn1138 = 0
			}
			if yyr1138 || yy2arr1138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1140 := z.EncBinary()
				_ = yym1140
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1141 := z.EncBinary()
				_ = yym1141
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1138 || yy2arr1138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1143 := z.EncBinary()
				_ = yym1143
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1144 := z.EncBinary()
				_ = yym1144
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1138 || yy2arr1138 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1145 := z.DecBinary()
	_ = yym1145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1146 := r.ContainerType()
		if yyct1146 == codecSelferValueTypeMap1234 {
			yyl1146 := r.ReadMapStart()
			if yyl1146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1146, d)
			}
		} else if yyct1146 == codecSelferValueTypeArray1234 {
			yyl1146 := r.ReadArrayStart()
			if yyl1146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1147Slc
	var yyhl1147 bool = l >= 0
	for yyj1147 := 0; ; yyj1147++ {
		if yyhl1147 {
			if yyj1147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1147Slc = r.DecodeBytes(yys1147Slc, true, true)
		yys1147 := string(yys1147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1147 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1147)
		} // end switch yys1147
	} // end for yyj1147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1150 int
	var yyb1150 bool
	var yyhl1150 bool = l >= 0
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1150++
	if yyhl1150 {
		yyb1150 = yyj1150 > l
	} else {
		yyb1150 = r.CheckBreak()
	}
	if yyb1150 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1150++
		if yyhl1150 {
			yyb1150 = yyj1150 > l
		} else {
			yyb1150 = r.CheckBreak()
		}
		if yyb1150 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1150-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1153 := z.EncBinary()
		_ = yym1153
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1154 := !z.EncBinary()
			yy2arr1154 := z.EncBasicHandle().StructToArray
			var yyq1154 [5]bool
			_, _, _ = yysep1154, yyq1154, yy2arr1154
			const yyr1154 bool = false
			yyq1154[0] = x.Path != ""
			yyq1154[2] = x.Host != ""
			yyq1154[3] = x.Scheme != ""
			yyq1154[4] = len(x.HTTPHeaders) != 0
			var yynn1154 int
			if yyr1154 || yy2arr1154 {
				r.EncodeArrayStart(5)
			} else {
				yynn1154 = 1
				for _, b := range yyq1154 {
					if b {
						yynn1154++
					}
				}
				r.EncodeMapStart(yynn1154)
				yynn1154 = 0
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1154[0] {
					yym1156 := z.EncBinary()
					_ = yym1156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1154[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1159 := &x.Port
				yym1160 := z.EncBinary()
				_ = yym1160
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1159) {
				} else if !yym1160 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1159)
				} else {
					z.EncFallback(yy1159)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1161 := &x.Port
				yym1162 := z.EncBinary()
				_ = yym1162
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1161) {
				} else if !yym1162 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1161)
				} else {
					z.EncFallback(yy1161)
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1154[2] {
					yym1164 := z.EncBinary()
					_ = yym1164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1154[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1165 := z.EncBinary()
					_ = yym1165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1154[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1154[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1154[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1168 := z.EncBinary()
						_ = yym1168
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1154[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1169 := z.EncBinary()
						_ = yym1169
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1154 || yy2arr1154 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1170 := z.DecBinary()
	_ = yym1170
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1171 := r.ContainerType()
		if yyct1171 == codecSelferValueTypeMap1234 {
			yyl1171 := r.ReadMapStart()
			if yyl1171 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1171, d)
			}
		} else if yyct1171 == codecSelferValueTypeArray1234 {
			yyl1171 := r.ReadArrayStart()
			if yyl1171 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1171, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1172Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1172Slc
	var yyhl1172 bool = l >= 0
	for yyj1172 := 0; ; yyj1172++ {
		if yyhl1172 {
			if yyj1172 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1172Slc = r.DecodeBytes(yys1172Slc, true, true)
		yys1172 := string(yys1172Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1172 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1174 := &x.Port
				yym1175 := z.DecBinary()
				_ = yym1175
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1174) {
				} else if !yym1175 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1174)
				} else {
					z.DecFallback(yyv1174, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1178 := &x.HTTPHeaders
				yym1179 := z.DecBinary()
				_ = yym1179
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1178), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1172)
		} // end switch yys1172
	} // end for yyj1172
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1182 := &x.Port
		yym1183 := z.DecBinary()
		_ = yym1183
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1182) {
		} else if !yym1183 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1182)
		} else {
			z.DecFallback(yyv1182, false)
		}
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1186 := &x.HTTPHeaders
		yym1187 := z.DecBinary()
		_ = yym1187
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1186), d)
		}
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1188 := z.EncBinary()
	_ = yym1188
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1189 := z.DecBinary()
	_ = yym1189
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1190 := z.EncBinary()
		_ = yym1190
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1191 := !z.EncBinary()
			yy2arr1191 := z.EncBasicHandle().StructToArray
			var yyq1191 [1]bool
			_, _, _ = yysep1191, yyq1191, yy2arr1191
			const yyr1191 bool = false
			var yynn1191 int
			if yyr1191 || yy2arr1191 {
				r.EncodeArrayStart(1)
			} else {
				yynn1191 = 1
				for _, b := range yyq1191 {
					if b {
						yynn1191++
					}
				}
				r.EncodeMapStart(yynn1191)
				yynn1191 = 0
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1193 := &x.Port
				yym1194 := z.EncBinary()
				_ = yym1194
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1193) {
				} else if !yym1194 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1193)
				} else {
					z.EncFallback(yy1193)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1195 := &x.Port
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1195) {
				} else if !yym1196 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1195)
				} else {
					z.EncFallback(yy1195)
				}
			}
			if yyr1191 || yy2arr1191 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1197 := z.DecBinary()
	_ = yym1197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1198 := r.ContainerType()
		if yyct1198 == codecSelferValueTypeMap1234 {
			yyl1198 := r.ReadMapStart()
			if yyl1198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1198, d)
			}
		} else if yyct1198 == codecSelferValueTypeArray1234 {
			yyl1198 := r.ReadArrayStart()
			if yyl1198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1199Slc
	var yyhl1199 bool = l >= 0
	for yyj1199 := 0; ; yyj1199++ {
		if yyhl1199 {
			if yyj1199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1199Slc = r.DecodeBytes(yys1199Slc, true, true)
		yys1199 := string(yys1199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1199 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv1200 := &x.Port
				yym1201 := z.DecBinary()
				_ = yym1201
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1200) {
				} else if !yym1201 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1200)
				} else {
					z.DecFallback(yyv1200, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1199)
		} // end switch yys1199
	} // end for yyj1199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1202 int
	var yyb1202 bool
	var yyhl1202 bool = l >= 0
	yyj1202++
	if yyhl1202 {
		yyb1202 = yyj1202 > l
	} else {
		yyb1202 = r.CheckBreak()
	}
	if yyb1202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv1203 := &x.Port
		yym1204 := z.DecBinary()
		_ = yym1204
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1203) {
		} else if !yym1204 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1203)
		} else {
			z.DecFallback(yyv1203, false)
		}
	}
	for {
		yyj1202++
		if yyhl1202 {
			yyb1202 = yyj1202 > l
		} else {
			yyb1202 = r.CheckBreak()
		}
		if yyb1202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1205 := z.EncBinary()
		_ = yym1205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1206 := !z.EncBinary()
			yy2arr1206 := z.EncBasicHandle().StructToArray
			var yyq1206 [1]bool
			_, _, _ = yysep1206, yyq1206, yy2arr1206
			const yyr1206 bool = false
			yyq1206[0] = len(x.Command) != 0
			var yynn1206 int
			if yyr1206 || yy2arr1206 {
				r.EncodeArrayStart(1)
			} else {
				yynn1206 = 0
				for _, b := range yyq1206 {
					if b {
						yynn1206++
					}
				}
				r.EncodeMapStart(yynn1206)
				yynn1206 = 0
			}
			if yyr1206 || yy2arr1206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1206[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1208 := z.EncBinary()
						_ = yym1208
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1209 := z.EncBinary()
						_ = yym1209
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1206 || yy2arr1206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1210 := z.DecBinary()
	_ = yym1210
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1211 := r.ContainerType()
		if yyct1211 == codecSelferValueTypeMap1234 {
			yyl1211 := r.ReadMapStart()
			if yyl1211 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1211, d)
			}
		} else if yyct1211 == codecSelferValueTypeArray1234 {
			yyl1211 := r.ReadArrayStart()
			if yyl1211 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1211, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1212Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1212Slc
	var yyhl1212 bool = l >= 0
	for yyj1212 := 0; ; yyj1212++ {
		if yyhl1212 {
			if yyj1212 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1212Slc = r.DecodeBytes(yys1212Slc, true, true)
		yys1212 := string(yys1212Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1212 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1213 := &x.Command
				yym1214 := z.DecBinary()
				_ = yym1214
				if false {
				} else {
					z.F.DecSliceStringX(yyv1213, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1212)
		} // end switch yys1212
	} // end for yyj1212
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1215 int
	var yyb1215 bool
	var yyhl1215 bool = l >= 0
	yyj1215++
	if yyhl1215 {
		yyb1215 = yyj1215 > l
	} else {
		yyb1215 = r.CheckBreak()
	}
	if yyb1215 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1216 := &x.Command
		yym1217 := z.DecBinary()
		_ = yym1217
		if false {
		} else {
			z.F.DecSliceStringX(yyv1216, false, d)
		}
	}
	for {
		yyj1215++
		if yyhl1215 {
			yyb1215 = yyj1215 > l
		} else {
			yyb1215 = r.CheckBreak()
		}
		if yyb1215 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1215-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1218 := z.EncBinary()
		_ = yym1218
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1219 := !z.EncBinary()
			yy2arr1219 := z.EncBasicHandle().StructToArray
			var yyq1219 [8]bool
			_, _, _ = yysep1219, yyq1219, yy2arr1219
			const yyr1219 bool = false
			yyq1219[0] = x.InitialDelaySeconds != 0
			yyq1219[1] = x.TimeoutSeconds != 0
			yyq1219[2] = x.PeriodSeconds != 0
			yyq1219[3] = x.SuccessThreshold != 0
			yyq1219[4] = x.FailureThreshold != 0
			yyq1219[5] = x.Handler.Exec != nil && x.Exec != nil
			yyq1219[6] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1219[7] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			var yynn1219 int
			if yyr1219 || yy2arr1219 {
				r.EncodeArrayStart(8)
			} else {
				yynn1219 = 0
				for _, b := range yyq1219 {
					if b {
						yynn1219++
					}
				}
				r.EncodeMapStart(yynn1219)
				yynn1219 = 0
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[0] {
					yym1221 := z.EncBinary()
					_ = yym1221
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1219[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1222 := z.EncBinary()
					_ = yym1222
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[1] {
					yym1224 := z.EncBinary()
					_ = yym1224
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1219[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1225 := z.EncBinary()
					_ = yym1225
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[2] {
					yym1227 := z.EncBinary()
					_ = yym1227
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1219[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[3] {
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1219[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1231 := z.EncBinary()
					_ = yym1231
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1219[4] {
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1219[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1234 := z.EncBinary()
					_ = yym1234
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			var yyn1235 bool
			if x.Handler.Exec == nil {
				yyn1235 = true
				goto LABEL1235
			}
		LABEL1235:
			if yyr1219 || yy2arr1219 {
				if yyn1235 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1219[5] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1219[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1235 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1236 bool
			if x.Handler.HTTPGet == nil {
				yyn1236 = true
				goto LABEL1236
			}
		LABEL1236:
			if yyr1219 || yy2arr1219 {
				if yyn1236 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1219[6] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1219[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1236 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1237 bool
			if x.Handler.TCPSocket == nil {
				yyn1237 = true
				goto LABEL1237
			}
		LABEL1237:
			if yyr1219 || yy2arr1219 {
				if yyn1237 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1219[7] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1219[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1237 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1219 || yy2arr1219 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1238 := z.DecBinary()
	_ = yym1238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1239 := r.ContainerType()
		if yyct1239 == codecSelferValueTypeMap1234 {
			yyl1239 := r.ReadMapStart()
			if yyl1239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1239, d)
			}
		} else if yyct1239 == codecSelferValueTypeArray1234 {
			yyl1239 := r.ReadArrayStart()
			if yyl1239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1240Slc
	var yyhl1240 bool = l >= 0
	for yyj1240 := 0; ; yyj1240++ {
		if yyhl1240 {
			if yyj1240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1240Slc = r.DecodeBytes(yys1240Slc, true, true)
		yys1240 := string(yys1240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1240 {
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1240)
		} // end switch yys1240
	} // end for yyj1240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1249 int
	var yyb1249 bool
	var yyhl1249 bool = l >= 0
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1249++
		if yyhl1249 {
			yyb1249 = yyj1249 > l
		} else {
			yyb1249 = r.CheckBreak()
		}
		if yyb1249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1258 := z.EncBinary()
	_ = yym1258
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1259 := z.DecBinary()
	_ = yym1259
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1260 := z.EncBinary()
	_ = yym1260
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1261 := z.DecBinary()
	_ = yym1261
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1262 := z.EncBinary()
		_ = yym1262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1263 := !z.EncBinary()
			yy2arr1263 := z.EncBasicHandle().StructToArray
			var yyq1263 [2]bool
			_, _, _ = yysep1263, yyq1263, yy2arr1263
			const yyr1263 bool = false
			yyq1263[0] = len(x.Add) != 0
			yyq1263[1] = len(x.Drop) != 0
			var yynn1263 int
			if yyr1263 || yy2arr1263 {
				r.EncodeArrayStart(2)
			} else {
				yynn1263 = 0
				for _, b := range yyq1263 {
					if b {
						yynn1263++
					}
				}
				r.EncodeMapStart(yynn1263)
				yynn1263 = 0
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1265 := z.EncBinary()
						_ = yym1265
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1266 := z.EncBinary()
						_ = yym1266
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1263[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1268 := z.EncBinary()
						_ = yym1268
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1269 := z.EncBinary()
						_ = yym1269
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1263 || yy2arr1263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1270 := z.DecBinary()
	_ = yym1270
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1271 := r.ContainerType()
		if yyct1271 == codecSelferValueTypeMap1234 {
			yyl1271 := r.ReadMapStart()
			if yyl1271 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1271, d)
			}
		} else if yyct1271 == codecSelferValueTypeArray1234 {
			yyl1271 := r.ReadArrayStart()
			if yyl1271 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1271, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1272Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1272Slc
	var yyhl1272 bool = l >= 0
	for yyj1272 := 0; ; yyj1272++ {
		if yyhl1272 {
			if yyj1272 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1272Slc = r.DecodeBytes(yys1272Slc, true, true)
		yys1272 := string(yys1272Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1272 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1273 := &x.Add
				yym1274 := z.DecBinary()
				_ = yym1274
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1273), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1275 := &x.Drop
				yym1276 := z.DecBinary()
				_ = yym1276
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1275), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1272)
		} // end switch yys1272
	} // end for yyj1272
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1277 int
	var yyb1277 bool
	var yyhl1277 bool = l >= 0
	yyj1277++
	if yyhl1277 {
		yyb1277 = yyj1277 > l
	} else {
		yyb1277 = r.CheckBreak()
	}
	if yyb1277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1278 := &x.Add
		yym1279 := z.DecBinary()
		_ = yym1279
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1278), d)
		}
	}
	yyj1277++
	if yyhl1277 {
		yyb1277 = yyj1277 > l
	} else {
		yyb1277 = r.CheckBreak()
	}
	if yyb1277 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1280 := &x.Drop
		yym1281 := z.DecBinary()
		_ = yym1281
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1280), d)
		}
	}
	for {
		yyj1277++
		if yyhl1277 {
			yyb1277 = yyj1277 > l
		} else {
			yyb1277 = r.CheckBreak()
		}
		if yyb1277 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1277-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1282 := z.EncBinary()
		_ = yym1282
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1283 := !z.EncBinary()
			yy2arr1283 := z.EncBasicHandle().StructToArray
			var yyq1283 [2]bool
			_, _, _ = yysep1283, yyq1283, yy2arr1283
			const yyr1283 bool = false
			yyq1283[0] = len(x.Limits) != 0
			yyq1283[1] = len(x.Requests) != 0
			var yynn1283 int
			if yyr1283 || yy2arr1283 {
				r.EncodeArrayStart(2)
			} else {
				yynn1283 = 0
				for _, b := range yyq1283 {
					if b {
						yynn1283++
					}
				}
				r.EncodeMapStart(yynn1283)
				yynn1283 = 0
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1283[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1283[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1283 || yy2arr1283 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1286 := z.DecBinary()
	_ = yym1286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1287 := r.ContainerType()
		if yyct1287 == codecSelferValueTypeMap1234 {
			yyl1287 := r.ReadMapStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1287, d)
			}
		} else if yyct1287 == codecSelferValueTypeArray1234 {
			yyl1287 := r.ReadArrayStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1288Slc
	var yyhl1288 bool = l >= 0
	for yyj1288 := 0; ; yyj1288++ {
		if yyhl1288 {
			if yyj1288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1288Slc = r.DecodeBytes(yys1288Slc, true, true)
		yys1288 := string(yys1288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1288 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1289 := &x.Limits
				yyv1289.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1290 := &x.Requests
				yyv1290.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1288)
		} // end switch yys1288
	} // end for yyj1288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1291 int
	var yyb1291 bool
	var yyhl1291 bool = l >= 0
	yyj1291++
	if yyhl1291 {
		yyb1291 = yyj1291 > l
	} else {
		yyb1291 = r.CheckBreak()
	}
	if yyb1291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1292 := &x.Limits
		yyv1292.CodecDecodeSelf(d)
	}
	yyj1291++
	if yyhl1291 {
		yyb1291 = yyj1291 > l
	} else {
		yyb1291 = r.CheckBreak()
	}
	if yyb1291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1293 := &x.Requests
		yyv1293.CodecDecodeSelf(d)
	}
	for {
		yyj1291++
		if yyhl1291 {
			yyb1291 = yyj1291 > l
		} else {
			yyb1291 = r.CheckBreak()
		}
		if yyb1291 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1291-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1294 := z.EncBinary()
		_ = yym1294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1295 := !z.EncBinary()
			yy2arr1295 := z.EncBasicHandle().StructToArray
			var yyq1295 [18]bool
			_, _, _ = yysep1295, yyq1295, yy2arr1295
			const yyr1295 bool = false
			yyq1295[1] = x.Image != ""
			yyq1295[2] = len(x.Command) != 0
			yyq1295[3] = len(x.Args) != 0
			yyq1295[4] = x.WorkingDir != ""
			yyq1295[5] = len(x.Ports) != 0
			yyq1295[6] = len(x.Env) != 0
			yyq1295[7] = true
			yyq1295[8] = len(x.VolumeMounts) != 0
			yyq1295[9] = x.LivenessProbe != nil
			yyq1295[10] = x.ReadinessProbe != nil
			yyq1295[11] = x.Lifecycle != nil
			yyq1295[12] = x.TerminationMessagePath != ""
			yyq1295[13] = x.ImagePullPolicy != ""
			yyq1295[14] = x.SecurityContext != nil
			yyq1295[15] = x.Stdin != false
			yyq1295[16] = x.StdinOnce != false
			yyq1295[17] = x.TTY != false
			var yynn1295 int
			if yyr1295 || yy2arr1295 {
				r.EncodeArrayStart(18)
			} else {
				yynn1295 = 1
				for _, b := range yyq1295 {
					if b {
						yynn1295++
					}
				}
				r.EncodeMapStart(yynn1295)
				yynn1295 = 0
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1297 := z.EncBinary()
				_ = yym1297
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1298 := z.EncBinary()
				_ = yym1298
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[1] {
					yym1300 := z.EncBinary()
					_ = yym1300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("image"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1301 := z.EncBinary()
					_ = yym1301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Image))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1303 := z.EncBinary()
						_ = yym1303
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1304 := z.EncBinary()
						_ = yym1304
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1306 := z.EncBinary()
						_ = yym1306
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1307 := z.EncBinary()
						_ = yym1307
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[4] {
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1310 := z.EncBinary()
					_ = yym1310
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1312 := z.EncBinary()
						_ = yym1312
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1313 := z.EncBinary()
						_ = yym1313
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1315 := z.EncBinary()
						_ = yym1315
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1316 := z.EncBinary()
						_ = yym1316
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[7] {
					yy1318 := &x.Resources
					yy1318.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1319 := &x.Resources
					yy1319.CodecEncodeSelf(e)
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1321 := z.EncBinary()
						_ = yym1321
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1322 := z.EncBinary()
						_ = yym1322
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[12] {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[13] {
					x.ImagePullPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1295[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ImagePullPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1295[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[15] {
					yym1332 := z.EncBinary()
					_ = yym1332
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1295[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1333 := z.EncBinary()
					_ = yym1333
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[16] {
					yym1335 := z.EncBinary()
					_ = yym1335
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1295[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1336 := z.EncBinary()
					_ = yym1336
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1295[17] {
					yym1338 := z.EncBinary()
					_ = yym1338
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1295[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1339 := z.EncBinary()
					_ = yym1339
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1295 || yy2arr1295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1340 := z.DecBinary()
	_ = yym1340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1341 := r.ContainerType()
		if yyct1341 == codecSelferValueTypeMap1234 {
			yyl1341 := r.ReadMapStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1341, d)
			}
		} else if yyct1341 == codecSelferValueTypeArray1234 {
			yyl1341 := r.ReadArrayStart()
			if yyl1341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1342Slc
	var yyhl1342 bool = l >= 0
	for yyj1342 := 0; ; yyj1342++ {
		if yyhl1342 {
			if yyj1342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1342Slc = r.DecodeBytes(yys1342Slc, true, true)
		yys1342 := string(yys1342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1342 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1345 := &x.Command
				yym1346 := z.DecBinary()
				_ = yym1346
				if false {
				} else {
					z.F.DecSliceStringX(yyv1345, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1347 := &x.Args
				yym1348 := z.DecBinary()
				_ = yym1348
				if false {
				} else {
					z.F.DecSliceStringX(yyv1347, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1350 := &x.Ports
				yym1351 := z.DecBinary()
				_ = yym1351
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1350), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1352 := &x.Env
				yym1353 := z.DecBinary()
				_ = yym1353
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1352), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1354 := &x.Resources
				yyv1354.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1355 := &x.VolumeMounts
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1355), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1342)
		} // end switch yys1342
	} // end for yyj1342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1366 int
	var yyb1366 bool
	var yyhl1366 bool = l >= 0
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1369 := &x.Command
		yym1370 := z.DecBinary()
		_ = yym1370
		if false {
		} else {
			z.F.DecSliceStringX(yyv1369, false, d)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1371 := &x.Args
		yym1372 := z.DecBinary()
		_ = yym1372
		if false {
		} else {
			z.F.DecSliceStringX(yyv1371, false, d)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1374 := &x.Ports
		yym1375 := z.DecBinary()
		_ = yym1375
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1374), d)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1376 := &x.Env
		yym1377 := z.DecBinary()
		_ = yym1377
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1376), d)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1378 := &x.Resources
		yyv1378.CodecDecodeSelf(d)
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1379 := &x.VolumeMounts
		yym1380 := z.DecBinary()
		_ = yym1380
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1379), d)
		}
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1366++
	if yyhl1366 {
		yyb1366 = yyj1366 > l
	} else {
		yyb1366 = r.CheckBreak()
	}
	if yyb1366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1366++
		if yyhl1366 {
			yyb1366 = yyj1366 > l
		} else {
			yyb1366 = r.CheckBreak()
		}
		if yyb1366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1390 := z.EncBinary()
		_ = yym1390
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1391 := !z.EncBinary()
			yy2arr1391 := z.EncBasicHandle().StructToArray
			var yyq1391 [3]bool
			_, _, _ = yysep1391, yyq1391, yy2arr1391
			const yyr1391 bool = false
			yyq1391[0] = x.Exec != nil
			yyq1391[1] = x.HTTPGet != nil
			yyq1391[2] = x.TCPSocket != nil
			var yynn1391 int
			if yyr1391 || yy2arr1391 {
				r.EncodeArrayStart(3)
			} else {
				yynn1391 = 0
				for _, b := range yyq1391 {
					if b {
						yynn1391++
					}
				}
				r.EncodeMapStart(yynn1391)
				yynn1391 = 0
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1391[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1391[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1391[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1391[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1391[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1391[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1391 || yy2arr1391 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1395 := z.DecBinary()
	_ = yym1395
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1396 := r.ContainerType()
		if yyct1396 == codecSelferValueTypeMap1234 {
			yyl1396 := r.ReadMapStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1396, d)
			}
		} else if yyct1396 == codecSelferValueTypeArray1234 {
			yyl1396 := r.ReadArrayStart()
			if yyl1396 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1396, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1397Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1397Slc
	var yyhl1397 bool = l >= 0
	for yyj1397 := 0; ; yyj1397++ {
		if yyhl1397 {
			if yyj1397 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1397Slc = r.DecodeBytes(yys1397Slc, true, true)
		yys1397 := string(yys1397Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1397 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1397)
		} // end switch yys1397
	} // end for yyj1397
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1401 int
	var yyb1401 bool
	var yyhl1401 bool = l >= 0
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1401++
	if yyhl1401 {
		yyb1401 = yyj1401 > l
	} else {
		yyb1401 = r.CheckBreak()
	}
	if yyb1401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1401++
		if yyhl1401 {
			yyb1401 = yyj1401 > l
		} else {
			yyb1401 = r.CheckBreak()
		}
		if yyb1401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1405 := z.EncBinary()
		_ = yym1405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1406 := !z.EncBinary()
			yy2arr1406 := z.EncBasicHandle().StructToArray
			var yyq1406 [2]bool
			_, _, _ = yysep1406, yyq1406, yy2arr1406
			const yyr1406 bool = false
			yyq1406[0] = x.PostStart != nil
			yyq1406[1] = x.PreStop != nil
			var yynn1406 int
			if yyr1406 || yy2arr1406 {
				r.EncodeArrayStart(2)
			} else {
				yynn1406 = 0
				for _, b := range yyq1406 {
					if b {
						yynn1406++
					}
				}
				r.EncodeMapStart(yynn1406)
				yynn1406 = 0
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1406[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1406[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1406 || yy2arr1406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1409 := z.DecBinary()
	_ = yym1409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1410 := r.ContainerType()
		if yyct1410 == codecSelferValueTypeMap1234 {
			yyl1410 := r.ReadMapStart()
			if yyl1410 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1410, d)
			}
		} else if yyct1410 == codecSelferValueTypeArray1234 {
			yyl1410 := r.ReadArrayStart()
			if yyl1410 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1410, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1411Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1411Slc
	var yyhl1411 bool = l >= 0
	for yyj1411 := 0; ; yyj1411++ {
		if yyhl1411 {
			if yyj1411 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1411Slc = r.DecodeBytes(yys1411Slc, true, true)
		yys1411 := string(yys1411Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1411 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1411)
		} // end switch yys1411
	} // end for yyj1411
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1414 int
	var yyb1414 bool
	var yyhl1414 bool = l >= 0
	yyj1414++
	if yyhl1414 {
		yyb1414 = yyj1414 > l
	} else {
		yyb1414 = r.CheckBreak()
	}
	if yyb1414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1414++
	if yyhl1414 {
		yyb1414 = yyj1414 > l
	} else {
		yyb1414 = r.CheckBreak()
	}
	if yyb1414 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1414++
		if yyhl1414 {
			yyb1414 = yyj1414 > l
		} else {
			yyb1414 = r.CheckBreak()
		}
		if yyb1414 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1414-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1417 := z.EncBinary()
	_ = yym1417
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1418 := z.DecBinary()
	_ = yym1418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1419 := z.EncBinary()
		_ = yym1419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1420 := !z.EncBinary()
			yy2arr1420 := z.EncBasicHandle().StructToArray
			var yyq1420 [2]bool
			_, _, _ = yysep1420, yyq1420, yy2arr1420
			const yyr1420 bool = false
			yyq1420[0] = x.Reason != ""
			yyq1420[1] = x.Message != ""
			var yynn1420 int
			if yyr1420 || yy2arr1420 {
				r.EncodeArrayStart(2)
			} else {
				yynn1420 = 0
				for _, b := range yyq1420 {
					if b {
						yynn1420++
					}
				}
				r.EncodeMapStart(yynn1420)
				yynn1420 = 0
			}
			if yyr1420 || yy2arr1420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1420[0] {
					yym1422 := z.EncBinary()
					_ = yym1422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1423 := z.EncBinary()
					_ = yym1423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1420[1] {
					yym1425 := z.EncBinary()
					_ = yym1425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1426 := z.EncBinary()
					_ = yym1426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1420 || yy2arr1420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1427 := z.DecBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1428 := r.ContainerType()
		if yyct1428 == codecSelferValueTypeMap1234 {
			yyl1428 := r.ReadMapStart()
			if yyl1428 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1428, d)
			}
		} else if yyct1428 == codecSelferValueTypeArray1234 {
			yyl1428 := r.ReadArrayStart()
			if yyl1428 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1428, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1429Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1429Slc
	var yyhl1429 bool = l >= 0
	for yyj1429 := 0; ; yyj1429++ {
		if yyhl1429 {
			if yyj1429 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1429Slc = r.DecodeBytes(yys1429Slc, true, true)
		yys1429 := string(yys1429Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1429 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1429)
		} // end switch yys1429
	} // end for yyj1429
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1432 int
	var yyb1432 bool
	var yyhl1432 bool = l >= 0
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1432++
	if yyhl1432 {
		yyb1432 = yyj1432 > l
	} else {
		yyb1432 = r.CheckBreak()
	}
	if yyb1432 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1432++
		if yyhl1432 {
			yyb1432 = yyj1432 > l
		} else {
			yyb1432 = r.CheckBreak()
		}
		if yyb1432 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1432-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1435 := z.EncBinary()
		_ = yym1435
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1436 := !z.EncBinary()
			yy2arr1436 := z.EncBasicHandle().StructToArray
			var yyq1436 [1]bool
			_, _, _ = yysep1436, yyq1436, yy2arr1436
			const yyr1436 bool = false
			yyq1436[0] = true
			var yynn1436 int
			if yyr1436 || yy2arr1436 {
				r.EncodeArrayStart(1)
			} else {
				yynn1436 = 0
				for _, b := range yyq1436 {
					if b {
						yynn1436++
					}
				}
				r.EncodeMapStart(yynn1436)
				yynn1436 = 0
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1436[0] {
					yy1438 := &x.StartedAt
					yym1439 := z.EncBinary()
					_ = yym1439
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1438) {
					} else if yym1439 {
						z.EncBinaryMarshal(yy1438)
					} else if !yym1439 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1438)
					} else {
						z.EncFallback(yy1438)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1436[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1440 := &x.StartedAt
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1440) {
					} else if yym1441 {
						z.EncBinaryMarshal(yy1440)
					} else if !yym1441 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1440)
					} else {
						z.EncFallback(yy1440)
					}
				}
			}
			if yyr1436 || yy2arr1436 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1442 := z.DecBinary()
	_ = yym1442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1443 := r.ContainerType()
		if yyct1443 == codecSelferValueTypeMap1234 {
			yyl1443 := r.ReadMapStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1443, d)
			}
		} else if yyct1443 == codecSelferValueTypeArray1234 {
			yyl1443 := r.ReadArrayStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1444Slc
	var yyhl1444 bool = l >= 0
	for yyj1444 := 0; ; yyj1444++ {
		if yyhl1444 {
			if yyj1444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1444Slc = r.DecodeBytes(yys1444Slc, true, true)
		yys1444 := string(yys1444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1444 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1445 := &x.StartedAt
				yym1446 := z.DecBinary()
				_ = yym1446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1445) {
				} else if yym1446 {
					z.DecBinaryUnmarshal(yyv1445)
				} else if !yym1446 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1445)
				} else {
					z.DecFallback(yyv1445, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1444)
		} // end switch yys1444
	} // end for yyj1444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1447 int
	var yyb1447 bool
	var yyhl1447 bool = l >= 0
	yyj1447++
	if yyhl1447 {
		yyb1447 = yyj1447 > l
	} else {
		yyb1447 = r.CheckBreak()
	}
	if yyb1447 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1448 := &x.StartedAt
		yym1449 := z.DecBinary()
		_ = yym1449
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1448) {
		} else if yym1449 {
			z.DecBinaryUnmarshal(yyv1448)
		} else if !yym1449 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1448)
		} else {
			z.DecFallback(yyv1448, false)
		}
	}
	for {
		yyj1447++
		if yyhl1447 {
			yyb1447 = yyj1447 > l
		} else {
			yyb1447 = r.CheckBreak()
		}
		if yyb1447 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1447-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1450 := z.EncBinary()
		_ = yym1450
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1451 := !z.EncBinary()
			yy2arr1451 := z.EncBasicHandle().StructToArray
			var yyq1451 [7]bool
			_, _, _ = yysep1451, yyq1451, yy2arr1451
			const yyr1451 bool = false
			yyq1451[1] = x.Signal != 0
			yyq1451[2] = x.Reason != ""
			yyq1451[3] = x.Message != ""
			yyq1451[4] = true
			yyq1451[5] = true
			yyq1451[6] = x.ContainerID != ""
			var yynn1451 int
			if yyr1451 || yy2arr1451 {
				r.EncodeArrayStart(7)
			} else {
				yynn1451 = 1
				for _, b := range yyq1451 {
					if b {
						yynn1451++
					}
				}
				r.EncodeMapStart(yynn1451)
				yynn1451 = 0
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1453 := z.EncBinary()
				_ = yym1453
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1454 := z.EncBinary()
				_ = yym1454
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[1] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1451[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[2] {
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1451[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1460 := z.EncBinary()
					_ = yym1460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[3] {
					yym1462 := z.EncBinary()
					_ = yym1462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1451[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1463 := z.EncBinary()
					_ = yym1463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[4] {
					yy1465 := &x.StartedAt
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1465) {
					} else if yym1466 {
						z.EncBinaryMarshal(yy1465)
					} else if !yym1466 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1465)
					} else {
						z.EncFallback(yy1465)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1451[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1467 := &x.StartedAt
					yym1468 := z.EncBinary()
					_ = yym1468
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1467) {
					} else if yym1468 {
						z.EncBinaryMarshal(yy1467)
					} else if !yym1468 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1467)
					} else {
						z.EncFallback(yy1467)
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[5] {
					yy1470 := &x.FinishedAt
					yym1471 := z.EncBinary()
					_ = yym1471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1470) {
					} else if yym1471 {
						z.EncBinaryMarshal(yy1470)
					} else if !yym1471 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1470)
					} else {
						z.EncFallback(yy1470)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1451[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1472 := &x.FinishedAt
					yym1473 := z.EncBinary()
					_ = yym1473
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1472) {
					} else if yym1473 {
						z.EncBinaryMarshal(yy1472)
					} else if !yym1473 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1472)
					} else {
						z.EncFallback(yy1472)
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1451[6] {
					yym1475 := z.EncBinary()
					_ = yym1475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1451[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1451 || yy2arr1451 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1477 := z.DecBinary()
	_ = yym1477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1478 := r.ContainerType()
		if yyct1478 == codecSelferValueTypeMap1234 {
			yyl1478 := r.ReadMapStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1478, d)
			}
		} else if yyct1478 == codecSelferValueTypeArray1234 {
			yyl1478 := r.ReadArrayStart()
			if yyl1478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1479Slc
	var yyhl1479 bool = l >= 0
	for yyj1479 := 0; ; yyj1479++ {
		if yyhl1479 {
			if yyj1479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1479Slc = r.DecodeBytes(yys1479Slc, true, true)
		yys1479 := string(yys1479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1479 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1484 := &x.StartedAt
				yym1485 := z.DecBinary()
				_ = yym1485
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1484) {
				} else if yym1485 {
					z.DecBinaryUnmarshal(yyv1484)
				} else if !yym1485 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1484)
				} else {
					z.DecFallback(yyv1484, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1486 := &x.FinishedAt
				yym1487 := z.DecBinary()
				_ = yym1487
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1486) {
				} else if yym1487 {
					z.DecBinaryUnmarshal(yyv1486)
				} else if !yym1487 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1486)
				} else {
					z.DecFallback(yyv1486, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1479)
		} // end switch yys1479
	} // end for yyj1479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1489 int
	var yyb1489 bool
	var yyhl1489 bool = l >= 0
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1494 := &x.StartedAt
		yym1495 := z.DecBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1494) {
		} else if yym1495 {
			z.DecBinaryUnmarshal(yyv1494)
		} else if !yym1495 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1494)
		} else {
			z.DecFallback(yyv1494, false)
		}
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1496 := &x.FinishedAt
		yym1497 := z.DecBinary()
		_ = yym1497
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1496) {
		} else if yym1497 {
			z.DecBinaryUnmarshal(yyv1496)
		} else if !yym1497 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1496)
		} else {
			z.DecFallback(yyv1496, false)
		}
	}
	yyj1489++
	if yyhl1489 {
		yyb1489 = yyj1489 > l
	} else {
		yyb1489 = r.CheckBreak()
	}
	if yyb1489 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1489++
		if yyhl1489 {
			yyb1489 = yyj1489 > l
		} else {
			yyb1489 = r.CheckBreak()
		}
		if yyb1489 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1489-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1499 := z.EncBinary()
		_ = yym1499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1500 := !z.EncBinary()
			yy2arr1500 := z.EncBasicHandle().StructToArray
			var yyq1500 [3]bool
			_, _, _ = yysep1500, yyq1500, yy2arr1500
			const yyr1500 bool = false
			yyq1500[0] = x.Waiting != nil
			yyq1500[1] = x.Running != nil
			yyq1500[2] = x.Terminated != nil
			var yynn1500 int
			if yyr1500 || yy2arr1500 {
				r.EncodeArrayStart(3)
			} else {
				yynn1500 = 0
				for _, b := range yyq1500 {
					if b {
						yynn1500++
					}
				}
				r.EncodeMapStart(yynn1500)
				yynn1500 = 0
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1500[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1500[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1500[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1500[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1500[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1500[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1500 || yy2arr1500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1504 := z.DecBinary()
	_ = yym1504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1505 := r.ContainerType()
		if yyct1505 == codecSelferValueTypeMap1234 {
			yyl1505 := r.ReadMapStart()
			if yyl1505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1505, d)
			}
		} else if yyct1505 == codecSelferValueTypeArray1234 {
			yyl1505 := r.ReadArrayStart()
			if yyl1505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1506Slc
	var yyhl1506 bool = l >= 0
	for yyj1506 := 0; ; yyj1506++ {
		if yyhl1506 {
			if yyj1506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1506Slc = r.DecodeBytes(yys1506Slc, true, true)
		yys1506 := string(yys1506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1506 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1506)
		} // end switch yys1506
	} // end for yyj1506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1510 int
	var yyb1510 bool
	var yyhl1510 bool = l >= 0
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1510++
	if yyhl1510 {
		yyb1510 = yyj1510 > l
	} else {
		yyb1510 = r.CheckBreak()
	}
	if yyb1510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1510++
		if yyhl1510 {
			yyb1510 = yyj1510 > l
		} else {
			yyb1510 = r.CheckBreak()
		}
		if yyb1510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1514 := z.EncBinary()
		_ = yym1514
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1515 := !z.EncBinary()
			yy2arr1515 := z.EncBasicHandle().StructToArray
			var yyq1515 [8]bool
			_, _, _ = yysep1515, yyq1515, yy2arr1515
			const yyr1515 bool = false
			yyq1515[1] = true
			yyq1515[2] = true
			yyq1515[7] = x.ContainerID != ""
			var yynn1515 int
			if yyr1515 || yy2arr1515 {
				r.EncodeArrayStart(8)
			} else {
				yynn1515 = 5
				for _, b := range yyq1515 {
					if b {
						yynn1515++
					}
				}
				r.EncodeMapStart(yynn1515)
				yynn1515 = 0
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1517 := z.EncBinary()
				_ = yym1517
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1518 := z.EncBinary()
				_ = yym1518
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1515[1] {
					yy1520 := &x.State
					yy1520.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1515[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1521 := &x.State
					yy1521.CodecEncodeSelf(e)
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1515[2] {
					yy1523 := &x.LastTerminationState
					yy1523.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1515[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1524 := &x.LastTerminationState
					yy1524.CodecEncodeSelf(e)
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1526 := z.EncBinary()
				_ = yym1526
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1527 := z.EncBinary()
				_ = yym1527
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1529 := z.EncBinary()
				_ = yym1529
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1530 := z.EncBinary()
				_ = yym1530
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1532 := z.EncBinary()
				_ = yym1532
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1533 := z.EncBinary()
				_ = yym1533
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1535 := z.EncBinary()
				_ = yym1535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1536 := z.EncBinary()
				_ = yym1536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1515[7] {
					yym1538 := z.EncBinary()
					_ = yym1538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1515[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1539 := z.EncBinary()
					_ = yym1539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1515 || yy2arr1515 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1540 := z.DecBinary()
	_ = yym1540
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1541 := r.ContainerType()
		if yyct1541 == codecSelferValueTypeMap1234 {
			yyl1541 := r.ReadMapStart()
			if yyl1541 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1541, d)
			}
		} else if yyct1541 == codecSelferValueTypeArray1234 {
			yyl1541 := r.ReadArrayStart()
			if yyl1541 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1541, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1542Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1542Slc
	var yyhl1542 bool = l >= 0
	for yyj1542 := 0; ; yyj1542++ {
		if yyhl1542 {
			if yyj1542 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1542Slc = r.DecodeBytes(yys1542Slc, true, true)
		yys1542 := string(yys1542Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1542 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1544 := &x.State
				yyv1544.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1545 := &x.LastTerminationState
				yyv1545.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1542)
		} // end switch yys1542
	} // end for yyj1542
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1551 int
	var yyb1551 bool
	var yyhl1551 bool = l >= 0
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1553 := &x.State
		yyv1553.CodecDecodeSelf(d)
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1554 := &x.LastTerminationState
		yyv1554.CodecDecodeSelf(d)
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1551++
	if yyhl1551 {
		yyb1551 = yyj1551 > l
	} else {
		yyb1551 = r.CheckBreak()
	}
	if yyb1551 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1551++
		if yyhl1551 {
			yyb1551 = yyj1551 > l
		} else {
			yyb1551 = r.CheckBreak()
		}
		if yyb1551 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1551-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1560 := z.EncBinary()
	_ = yym1560
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1561 := z.DecBinary()
	_ = yym1561
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1562 := z.EncBinary()
	_ = yym1562
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1563 := z.DecBinary()
	_ = yym1563
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1564 := z.EncBinary()
		_ = yym1564
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1565 := !z.EncBinary()
			yy2arr1565 := z.EncBasicHandle().StructToArray
			var yyq1565 [6]bool
			_, _, _ = yysep1565, yyq1565, yy2arr1565
			const yyr1565 bool = false
			yyq1565[2] = true
			yyq1565[3] = true
			yyq1565[4] = x.Reason != ""
			yyq1565[5] = x.Message != ""
			var yynn1565 int
			if yyr1565 || yy2arr1565 {
				r.EncodeArrayStart(6)
			} else {
				yynn1565 = 2
				for _, b := range yyq1565 {
					if b {
						yynn1565++
					}
				}
				r.EncodeMapStart(yynn1565)
				yynn1565 = 0
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1565[2] {
					yy1569 := &x.LastProbeTime
					yym1570 := z.EncBinary()
					_ = yym1570
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1569) {
					} else if yym1570 {
						z.EncBinaryMarshal(yy1569)
					} else if !yym1570 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1569)
					} else {
						z.EncFallback(yy1569)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1565[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1571 := &x.LastProbeTime
					yym1572 := z.EncBinary()
					_ = yym1572
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1571) {
					} else if yym1572 {
						z.EncBinaryMarshal(yy1571)
					} else if !yym1572 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1571)
					} else {
						z.EncFallback(yy1571)
					}
				}
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1565[3] {
					yy1574 := &x.LastTransitionTime
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1574) {
					} else if yym1575 {
						z.EncBinaryMarshal(yy1574)
					} else if !yym1575 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1574)
					} else {
						z.EncFallback(yy1574)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1565[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1576 := &x.LastTransitionTime
					yym1577 := z.EncBinary()
					_ = yym1577
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1576) {
					} else if yym1577 {
						z.EncBinaryMarshal(yy1576)
					} else if !yym1577 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1576)
					} else {
						z.EncFallback(yy1576)
					}
				}
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1565[4] {
					yym1579 := z.EncBinary()
					_ = yym1579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1565[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1580 := z.EncBinary()
					_ = yym1580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1565[5] {
					yym1582 := z.EncBinary()
					_ = yym1582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1565[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1583 := z.EncBinary()
					_ = yym1583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1565 || yy2arr1565 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1584 := z.DecBinary()
	_ = yym1584
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1585 := r.ContainerType()
		if yyct1585 == codecSelferValueTypeMap1234 {
			yyl1585 := r.ReadMapStart()
			if yyl1585 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1585, d)
			}
		} else if yyct1585 == codecSelferValueTypeArray1234 {
			yyl1585 := r.ReadArrayStart()
			if yyl1585 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1585, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1586Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1586Slc
	var yyhl1586 bool = l >= 0
	for yyj1586 := 0; ; yyj1586++ {
		if yyhl1586 {
			if yyj1586 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1586Slc = r.DecodeBytes(yys1586Slc, true, true)
		yys1586 := string(yys1586Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1586 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1589 := &x.LastProbeTime
				yym1590 := z.DecBinary()
				_ = yym1590
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1589) {
				} else if yym1590 {
					z.DecBinaryUnmarshal(yyv1589)
				} else if !yym1590 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1589)
				} else {
					z.DecFallback(yyv1589, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1591 := &x.LastTransitionTime
				yym1592 := z.DecBinary()
				_ = yym1592
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1591) {
				} else if yym1592 {
					z.DecBinaryUnmarshal(yyv1591)
				} else if !yym1592 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1591)
				} else {
					z.DecFallback(yyv1591, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1586)
		} // end switch yys1586
	} // end for yyj1586
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1595 int
	var yyb1595 bool
	var yyhl1595 bool = l >= 0
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1598 := &x.LastProbeTime
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1598) {
		} else if yym1599 {
			z.DecBinaryUnmarshal(yyv1598)
		} else if !yym1599 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1598)
		} else {
			z.DecFallback(yyv1598, false)
		}
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1600 := &x.LastTransitionTime
		yym1601 := z.DecBinary()
		_ = yym1601
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1600) {
		} else if yym1601 {
			z.DecBinaryUnmarshal(yyv1600)
		} else if !yym1601 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1600)
		} else {
			z.DecFallback(yyv1600, false)
		}
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1595++
	if yyhl1595 {
		yyb1595 = yyj1595 > l
	} else {
		yyb1595 = r.CheckBreak()
	}
	if yyb1595 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1595++
		if yyhl1595 {
			yyb1595 = yyj1595 > l
		} else {
			yyb1595 = r.CheckBreak()
		}
		if yyb1595 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1595-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1604 := z.EncBinary()
	_ = yym1604
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1605 := z.DecBinary()
	_ = yym1605
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1606 := z.EncBinary()
	_ = yym1606
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1607 := z.DecBinary()
	_ = yym1607
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1608 := z.EncBinary()
		_ = yym1608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1609 := !z.EncBinary()
			yy2arr1609 := z.EncBasicHandle().StructToArray
			var yyq1609 [1]bool
			_, _, _ = yysep1609, yyq1609, yy2arr1609
			const yyr1609 bool = false
			var yynn1609 int
			if yyr1609 || yy2arr1609 {
				r.EncodeArrayStart(1)
			} else {
				yynn1609 = 1
				for _, b := range yyq1609 {
					if b {
						yynn1609++
					}
				}
				r.EncodeMapStart(yynn1609)
				yynn1609 = 0
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1613 := z.DecBinary()
	_ = yym1613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1614 := r.ContainerType()
		if yyct1614 == codecSelferValueTypeMap1234 {
			yyl1614 := r.ReadMapStart()
			if yyl1614 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1614, d)
			}
		} else if yyct1614 == codecSelferValueTypeArray1234 {
			yyl1614 := r.ReadArrayStart()
			if yyl1614 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1614, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1615Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1615Slc
	var yyhl1615 bool = l >= 0
	for yyj1615 := 0; ; yyj1615++ {
		if yyhl1615 {
			if yyj1615 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1615Slc = r.DecodeBytes(yys1615Slc, true, true)
		yys1615 := string(yys1615Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1615 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1616 := &x.NodeSelectorTerms
				yym1617 := z.DecBinary()
				_ = yym1617
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1616), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1615)
		} // end switch yys1615
	} // end for yyj1615
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1618 int
	var yyb1618 bool
	var yyhl1618 bool = l >= 0
	yyj1618++
	if yyhl1618 {
		yyb1618 = yyj1618 > l
	} else {
		yyb1618 = r.CheckBreak()
	}
	if yyb1618 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1619 := &x.NodeSelectorTerms
		yym1620 := z.DecBinary()
		_ = yym1620
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1619), d)
		}
	}
	for {
		yyj1618++
		if yyhl1618 {
			yyb1618 = yyj1618 > l
		} else {
			yyb1618 = r.CheckBreak()
		}
		if yyb1618 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1618-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1621 := z.EncBinary()
		_ = yym1621
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1622 := !z.EncBinary()
			yy2arr1622 := z.EncBasicHandle().StructToArray
			var yyq1622 [1]bool
			_, _, _ = yysep1622, yyq1622, yy2arr1622
			const yyr1622 bool = false
			var yynn1622 int
			if yyr1622 || yy2arr1622 {
				r.EncodeArrayStart(1)
			} else {
				yynn1622 = 1
				for _, b := range yyq1622 {
					if b {
						yynn1622++
					}
				}
				r.EncodeMapStart(yynn1622)
				yynn1622 = 0
			}
			if yyr1622 || yy2arr1622 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1622 || yy2arr1622 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1626 := z.DecBinary()
	_ = yym1626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1627 := r.ContainerType()
		if yyct1627 == codecSelferValueTypeMap1234 {
			yyl1627 := r.ReadMapStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1627, d)
			}
		} else if yyct1627 == codecSelferValueTypeArray1234 {
			yyl1627 := r.ReadArrayStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1628Slc
	var yyhl1628 bool = l >= 0
	for yyj1628 := 0; ; yyj1628++ {
		if yyhl1628 {
			if yyj1628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1628Slc = r.DecodeBytes(yys1628Slc, true, true)
		yys1628 := string(yys1628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1628 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1629 := &x.MatchExpressions
				yym1630 := z.DecBinary()
				_ = yym1630
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1629), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1628)
		} // end switch yys1628
	} // end for yyj1628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1631 int
	var yyb1631 bool
	var yyhl1631 bool = l >= 0
	yyj1631++
	if yyhl1631 {
		yyb1631 = yyj1631 > l
	} else {
		yyb1631 = r.CheckBreak()
	}
	if yyb1631 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1632 := &x.MatchExpressions
		yym1633 := z.DecBinary()
		_ = yym1633
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1632), d)
		}
	}
	for {
		yyj1631++
		if yyhl1631 {
			yyb1631 = yyj1631 > l
		} else {
			yyb1631 = r.CheckBreak()
		}
		if yyb1631 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1631-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1634 := z.EncBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1635 := !z.EncBinary()
			yy2arr1635 := z.EncBasicHandle().StructToArray
			var yyq1635 [3]bool
			_, _, _ = yysep1635, yyq1635, yy2arr1635
			const yyr1635 bool = false
			yyq1635[2] = len(x.Values) != 0
			var yynn1635 int
			if yyr1635 || yy2arr1635 {
				r.EncodeArrayStart(3)
			} else {
				yynn1635 = 2
				for _, b := range yyq1635 {
					if b {
						yynn1635++
					}
				}
				r.EncodeMapStart(yynn1635)
				yynn1635 = 0
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1637 := z.EncBinary()
				_ = yym1637
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1638 := z.EncBinary()
				_ = yym1638
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1641 := z.EncBinary()
						_ = yym1641
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1642 := z.EncBinary()
						_ = yym1642
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1643 := z.DecBinary()
	_ = yym1643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1644 := r.ContainerType()
		if yyct1644 == codecSelferValueTypeMap1234 {
			yyl1644 := r.ReadMapStart()
			if yyl1644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1644, d)
			}
		} else if yyct1644 == codecSelferValueTypeArray1234 {
			yyl1644 := r.ReadArrayStart()
			if yyl1644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1645Slc
	var yyhl1645 bool = l >= 0
	for yyj1645 := 0; ; yyj1645++ {
		if yyhl1645 {
			if yyj1645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1645Slc = r.DecodeBytes(yys1645Slc, true, true)
		yys1645 := string(yys1645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1645 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1648 := &x.Values
				yym1649 := z.DecBinary()
				_ = yym1649
				if false {
				} else {
					z.F.DecSliceStringX(yyv1648, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1645)
		} // end switch yys1645
	} // end for yyj1645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1650 int
	var yyb1650 bool
	var yyhl1650 bool = l >= 0
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1650++
	if yyhl1650 {
		yyb1650 = yyj1650 > l
	} else {
		yyb1650 = r.CheckBreak()
	}
	if yyb1650 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1653 := &x.Values
		yym1654 := z.DecBinary()
		_ = yym1654
		if false {
		} else {
			z.F.DecSliceStringX(yyv1653, false, d)
		}
	}
	for {
		yyj1650++
		if yyhl1650 {
			yyb1650 = yyj1650 > l
		} else {
			yyb1650 = r.CheckBreak()
		}
		if yyb1650 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1650-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1655 := z.EncBinary()
	_ = yym1655
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1656 := z.DecBinary()
	_ = yym1656
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1657 := z.EncBinary()
		_ = yym1657
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1658 := !z.EncBinary()
			yy2arr1658 := z.EncBasicHandle().StructToArray
			var yyq1658 [1]bool
			_, _, _ = yysep1658, yyq1658, yy2arr1658
			const yyr1658 bool = false
			yyq1658[0] = x.NodeAffinity != nil
			var yynn1658 int
			if yyr1658 || yy2arr1658 {
				r.EncodeArrayStart(1)
			} else {
				yynn1658 = 0
				for _, b := range yyq1658 {
					if b {
						yynn1658++
					}
				}
				r.EncodeMapStart(yynn1658)
				yynn1658 = 0
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1658[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1658[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1658 || yy2arr1658 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1660 := z.DecBinary()
	_ = yym1660
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1661 := r.ContainerType()
		if yyct1661 == codecSelferValueTypeMap1234 {
			yyl1661 := r.ReadMapStart()
			if yyl1661 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1661, d)
			}
		} else if yyct1661 == codecSelferValueTypeArray1234 {
			yyl1661 := r.ReadArrayStart()
			if yyl1661 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1661, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1662Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1662Slc
	var yyhl1662 bool = l >= 0
	for yyj1662 := 0; ; yyj1662++ {
		if yyhl1662 {
			if yyj1662 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1662Slc = r.DecodeBytes(yys1662Slc, true, true)
		yys1662 := string(yys1662Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1662 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1662)
		} // end switch yys1662
	} // end for yyj1662
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1664 int
	var yyb1664 bool
	var yyhl1664 bool = l >= 0
	yyj1664++
	if yyhl1664 {
		yyb1664 = yyj1664 > l
	} else {
		yyb1664 = r.CheckBreak()
	}
	if yyb1664 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1664++
		if yyhl1664 {
			yyb1664 = yyj1664 > l
		} else {
			yyb1664 = r.CheckBreak()
		}
		if yyb1664 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1664-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1666 := z.EncBinary()
		_ = yym1666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1667 := !z.EncBinary()
			yy2arr1667 := z.EncBasicHandle().StructToArray
			var yyq1667 [3]bool
			_, _, _ = yysep1667, yyq1667, yy2arr1667
			const yyr1667 bool = false
			yyq1667[0] = x.RequiredDuringSchedulingRequiredDuringExecution != nil
			yyq1667[1] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1667[2] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1667 int
			if yyr1667 || yy2arr1667 {
				r.EncodeArrayStart(3)
			} else {
				yynn1667 = 0
				for _, b := range yyq1667 {
					if b {
						yynn1667++
					}
				}
				r.EncodeMapStart(yynn1667)
				yynn1667 = 0
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[0] {
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1667[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingRequiredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingRequiredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[1] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1667[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[2] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1671 := z.EncBinary()
						_ = yym1671
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1667[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1672 := z.EncBinary()
						_ = yym1672
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1673 := z.DecBinary()
	_ = yym1673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1674 := r.ContainerType()
		if yyct1674 == codecSelferValueTypeMap1234 {
			yyl1674 := r.ReadMapStart()
			if yyl1674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1674, d)
			}
		} else if yyct1674 == codecSelferValueTypeArray1234 {
			yyl1674 := r.ReadArrayStart()
			if yyl1674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1675Slc
	var yyhl1675 bool = l >= 0
	for yyj1675 := 0; ; yyj1675++ {
		if yyhl1675 {
			if yyj1675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1675Slc = r.DecodeBytes(yys1675Slc, true, true)
		yys1675 := string(yys1675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1675 {
		case "requiredDuringSchedulingRequiredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
					x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
			}
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1678 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1679 := z.DecBinary()
				_ = yym1679
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1678), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1675)
		} // end switch yys1675
	} // end for yyj1675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1680 int
	var yyb1680 bool
	var yyhl1680 bool = l >= 0
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingRequiredDuringExecution != nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingRequiredDuringExecution == nil {
			x.RequiredDuringSchedulingRequiredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingRequiredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1680++
	if yyhl1680 {
		yyb1680 = yyj1680 > l
	} else {
		yyb1680 = r.CheckBreak()
	}
	if yyb1680 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1683 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1684 := z.DecBinary()
		_ = yym1684
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1683), d)
		}
	}
	for {
		yyj1680++
		if yyhl1680 {
			yyb1680 = yyj1680 > l
		} else {
			yyb1680 = r.CheckBreak()
		}
		if yyb1680 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1680-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1685 := z.EncBinary()
		_ = yym1685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1686 := !z.EncBinary()
			yy2arr1686 := z.EncBasicHandle().StructToArray
			var yyq1686 [2]bool
			_, _, _ = yysep1686, yyq1686, yy2arr1686
			const yyr1686 bool = false
			var yynn1686 int
			if yyr1686 || yy2arr1686 {
				r.EncodeArrayStart(2)
			} else {
				yynn1686 = 2
				for _, b := range yyq1686 {
					if b {
						yynn1686++
					}
				}
				r.EncodeMapStart(yynn1686)
				yynn1686 = 0
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1688 := z.EncBinary()
				_ = yym1688
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1689 := z.EncBinary()
				_ = yym1689
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1691 := &x.Preference
				yy1691.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1692 := &x.Preference
				yy1692.CodecEncodeSelf(e)
			}
			if yyr1686 || yy2arr1686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1693 := z.DecBinary()
	_ = yym1693
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1694 := r.ContainerType()
		if yyct1694 == codecSelferValueTypeMap1234 {
			yyl1694 := r.ReadMapStart()
			if yyl1694 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1694, d)
			}
		} else if yyct1694 == codecSelferValueTypeArray1234 {
			yyl1694 := r.ReadArrayStart()
			if yyl1694 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1694, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1695Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1695Slc
	var yyhl1695 bool = l >= 0
	for yyj1695 := 0; ; yyj1695++ {
		if yyhl1695 {
			if yyj1695 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1695Slc = r.DecodeBytes(yys1695Slc, true, true)
		yys1695 := string(yys1695Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1695 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1697 := &x.Preference
				yyv1697.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1695)
		} // end switch yys1695
	} // end for yyj1695
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1698 int
	var yyb1698 bool
	var yyhl1698 bool = l >= 0
	yyj1698++
	if yyhl1698 {
		yyb1698 = yyj1698 > l
	} else {
		yyb1698 = r.CheckBreak()
	}
	if yyb1698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1698++
	if yyhl1698 {
		yyb1698 = yyj1698 > l
	} else {
		yyb1698 = r.CheckBreak()
	}
	if yyb1698 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1700 := &x.Preference
		yyv1700.CodecDecodeSelf(d)
	}
	for {
		yyj1698++
		if yyhl1698 {
			yyb1698 = yyj1698 > l
		} else {
			yyb1698 = r.CheckBreak()
		}
		if yyb1698 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1698-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1701 := z.EncBinary()
		_ = yym1701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1702 := !z.EncBinary()
			yy2arr1702 := z.EncBasicHandle().StructToArray
			var yyq1702 [15]bool
			_, _, _ = yysep1702, yyq1702, yy2arr1702
			const yyr1702 bool = false
			yyq1702[0] = len(x.Volumes) != 0
			yyq1702[2] = x.RestartPolicy != ""
			yyq1702[3] = x.TerminationGracePeriodSeconds != nil
			yyq1702[4] = x.ActiveDeadlineSeconds != nil
			yyq1702[5] = x.DNSPolicy != ""
			yyq1702[6] = len(x.NodeSelector) != 0
			yyq1702[7] = x.ServiceAccountName != ""
			yyq1702[8] = x.DeprecatedServiceAccount != ""
			yyq1702[9] = x.NodeName != ""
			yyq1702[10] = x.HostNetwork != false
			yyq1702[11] = x.HostPID != false
			yyq1702[12] = x.HostIPC != false
			yyq1702[13] = x.SecurityContext != nil
			yyq1702[14] = len(x.ImagePullSecrets) != 0
			var yynn1702 int
			if yyr1702 || yy2arr1702 {
				r.EncodeArrayStart(15)
			} else {
				yynn1702 = 1
				for _, b := range yyq1702 {
					if b {
						yynn1702++
					}
				}
				r.EncodeMapStart(yynn1702)
				yynn1702 = 0
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[0] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1704 := z.EncBinary()
						_ = yym1704
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1705 := z.EncBinary()
						_ = yym1705
						if false {
						} else {
							h.encSliceVolume(([]Volume)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1707 := z.EncBinary()
					_ = yym1707
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1708 := z.EncBinary()
					_ = yym1708
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1711 := *x.TerminationGracePeriodSeconds
						yym1712 := z.EncBinary()
						_ = yym1712
						if false {
						} else {
							r.EncodeInt(int64(yy1711))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1713 := *x.TerminationGracePeriodSeconds
						yym1714 := z.EncBinary()
						_ = yym1714
						if false {
						} else {
							r.EncodeInt(int64(yy1713))
						}
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1716 := *x.ActiveDeadlineSeconds
						yym1717 := z.EncBinary()
						_ = yym1717
						if false {
						} else {
							r.EncodeInt(int64(yy1716))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1718 := *x.ActiveDeadlineSeconds
						yym1719 := z.EncBinary()
						_ = yym1719
						if false {
						} else {
							r.EncodeInt(int64(yy1718))
						}
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1722 := z.EncBinary()
						_ = yym1722
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1723 := z.EncBinary()
						_ = yym1723
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[7] {
					yym1725 := z.EncBinary()
					_ = yym1725
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[8] {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("serviceAccount"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DeprecatedServiceAccount))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[9] {
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1702[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[10] {
					yym1734 := z.EncBinary()
					_ = yym1734
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1702[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1735 := z.EncBinary()
					_ = yym1735
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[11] {
					yym1737 := z.EncBinary()
					_ = yym1737
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1702[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1738 := z.EncBinary()
					_ = yym1738
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[12] {
					yym1740 := z.EncBinary()
					_ = yym1740
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1702[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1741 := z.EncBinary()
					_ = yym1741
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[13] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1702[14] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1744 := z.EncBinary()
						_ = yym1744
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1702[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1745 := z.EncBinary()
						_ = yym1745
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1702 || yy2arr1702 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1746 := z.DecBinary()
	_ = yym1746
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1747 := r.ContainerType()
		if yyct1747 == codecSelferValueTypeMap1234 {
			yyl1747 := r.ReadMapStart()
			if yyl1747 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1747, d)
			}
		} else if yyct1747 == codecSelferValueTypeArray1234 {
			yyl1747 := r.ReadArrayStart()
			if yyl1747 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1747, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1748Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1748Slc
	var yyhl1748 bool = l >= 0
	for yyj1748 := 0; ; yyj1748++ {
		if yyhl1748 {
			if yyj1748 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1748Slc = r.DecodeBytes(yys1748Slc, true, true)
		yys1748 := string(yys1748Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1748 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1749 := &x.Volumes
				yym1750 := z.DecBinary()
				_ = yym1750
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1749), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1751 := &x.Containers
				yym1752 := z.DecBinary()
				_ = yym1752
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1751), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1755 := z.DecBinary()
				_ = yym1755
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1757 := z.DecBinary()
				_ = yym1757
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1759 := &x.NodeSelector
				yym1760 := z.DecBinary()
				_ = yym1760
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1759, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "serviceAccount":
			if r.TryDecodeAsNil() {
				x.DeprecatedServiceAccount = ""
			} else {
				x.DeprecatedServiceAccount = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1768 := &x.ImagePullSecrets
				yym1769 := z.DecBinary()
				_ = yym1769
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1768), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1748)
		} // end switch yys1748
	} // end for yyj1748
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1770 int
	var yyb1770 bool
	var yyhl1770 bool = l >= 0
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1771 := &x.Volumes
		yym1772 := z.DecBinary()
		_ = yym1772
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1771), d)
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1773 := &x.Containers
		yym1774 := z.DecBinary()
		_ = yym1774
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1773), d)
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1777 := z.DecBinary()
		_ = yym1777
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1779 := z.DecBinary()
		_ = yym1779
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1781 := &x.NodeSelector
		yym1782 := z.DecBinary()
		_ = yym1782
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1781, false, d)
		}
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedServiceAccount = ""
	} else {
		x.DeprecatedServiceAccount = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1770++
	if yyhl1770 {
		yyb1770 = yyj1770 > l
	} else {
		yyb1770 = r.CheckBreak()
	}
	if yyb1770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1790 := &x.ImagePullSecrets
		yym1791 := z.DecBinary()
		_ = yym1791
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1790), d)
		}
	}
	for {
		yyj1770++
		if yyhl1770 {
			yyb1770 = yyj1770 > l
		} else {
			yyb1770 = r.CheckBreak()
		}
		if yyb1770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1792 := z.EncBinary()
		_ = yym1792
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1793 := !z.EncBinary()
			yy2arr1793 := z.EncBasicHandle().StructToArray
			var yyq1793 [5]bool
			_, _, _ = yysep1793, yyq1793, yy2arr1793
			const yyr1793 bool = false
			yyq1793[0] = x.SELinuxOptions != nil
			yyq1793[1] = x.RunAsUser != nil
			yyq1793[2] = x.RunAsNonRoot != nil
			yyq1793[3] = len(x.SupplementalGroups) != 0
			yyq1793[4] = x.FSGroup != nil
			var yynn1793 int
			if yyr1793 || yy2arr1793 {
				r.EncodeArrayStart(5)
			} else {
				yynn1793 = 0
				for _, b := range yyq1793 {
					if b {
						yynn1793++
					}
				}
				r.EncodeMapStart(yynn1793)
				yynn1793 = 0
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[0] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[1] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1796 := *x.RunAsUser
						yym1797 := z.EncBinary()
						_ = yym1797
						if false {
						} else {
							r.EncodeInt(int64(yy1796))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1798 := *x.RunAsUser
						yym1799 := z.EncBinary()
						_ = yym1799
						if false {
						} else {
							r.EncodeInt(int64(yy1798))
						}
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[2] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1801 := *x.RunAsNonRoot
						yym1802 := z.EncBinary()
						_ = yym1802
						if false {
						} else {
							r.EncodeBool(bool(yy1801))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1803 := *x.RunAsNonRoot
						yym1804 := z.EncBinary()
						_ = yym1804
						if false {
						} else {
							r.EncodeBool(bool(yy1803))
						}
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[3] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1806 := z.EncBinary()
						_ = yym1806
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1807 := z.EncBinary()
						_ = yym1807
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1793[4] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1809 := *x.FSGroup
						yym1810 := z.EncBinary()
						_ = yym1810
						if false {
						} else {
							r.EncodeInt(int64(yy1809))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1793[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1811 := *x.FSGroup
						yym1812 := z.EncBinary()
						_ = yym1812
						if false {
						} else {
							r.EncodeInt(int64(yy1811))
						}
					}
				}
			}
			if yyr1793 || yy2arr1793 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1813 := z.DecBinary()
	_ = yym1813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1814 := r.ContainerType()
		if yyct1814 == codecSelferValueTypeMap1234 {
			yyl1814 := r.ReadMapStart()
			if yyl1814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1814, d)
			}
		} else if yyct1814 == codecSelferValueTypeArray1234 {
			yyl1814 := r.ReadArrayStart()
			if yyl1814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1815Slc
	var yyhl1815 bool = l >= 0
	for yyj1815 := 0; ; yyj1815++ {
		if yyhl1815 {
			if yyj1815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1815Slc = r.DecodeBytes(yys1815Slc, true, true)
		yys1815 := string(yys1815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1815 {
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1818 := z.DecBinary()
				_ = yym1818
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1820 := z.DecBinary()
				_ = yym1820
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1821 := &x.SupplementalGroups
				yym1822 := z.DecBinary()
				_ = yym1822
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1821, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1824 := z.DecBinary()
				_ = yym1824
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1815)
		} // end switch yys1815
	} // end for yyj1815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1825 int
	var yyb1825 bool
	var yyhl1825 bool = l >= 0
	yyj1825++
	if yyhl1825 {
		yyb1825 = yyj1825 > l
	} else {
		yyb1825 = r.CheckBreak()
	}
	if yyb1825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1825++
	if yyhl1825 {
		yyb1825 = yyj1825 > l
	} else {
		yyb1825 = r.CheckBreak()
	}
	if yyb1825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1828 := z.DecBinary()
		_ = yym1828
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1825++
	if yyhl1825 {
		yyb1825 = yyj1825 > l
	} else {
		yyb1825 = r.CheckBreak()
	}
	if yyb1825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1830 := z.DecBinary()
		_ = yym1830
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1825++
	if yyhl1825 {
		yyb1825 = yyj1825 > l
	} else {
		yyb1825 = r.CheckBreak()
	}
	if yyb1825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1831 := &x.SupplementalGroups
		yym1832 := z.DecBinary()
		_ = yym1832
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1831, false, d)
		}
	}
	yyj1825++
	if yyhl1825 {
		yyb1825 = yyj1825 > l
	} else {
		yyb1825 = r.CheckBreak()
	}
	if yyb1825 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1834 := z.DecBinary()
		_ = yym1834
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1825++
		if yyhl1825 {
			yyb1825 = yyj1825 > l
		} else {
			yyb1825 = r.CheckBreak()
		}
		if yyb1825 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1825-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1835 := z.EncBinary()
		_ = yym1835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1836 := !z.EncBinary()
			yy2arr1836 := z.EncBasicHandle().StructToArray
			var yyq1836 [8]bool
			_, _, _ = yysep1836, yyq1836, yy2arr1836
			const yyr1836 bool = false
			yyq1836[0] = x.Phase != ""
			yyq1836[1] = len(x.Conditions) != 0
			yyq1836[2] = x.Message != ""
			yyq1836[3] = x.Reason != ""
			yyq1836[4] = x.HostIP != ""
			yyq1836[5] = x.PodIP != ""
			yyq1836[6] = x.StartTime != nil
			yyq1836[7] = len(x.ContainerStatuses) != 0
			var yynn1836 int
			if yyr1836 || yy2arr1836 {
				r.EncodeArrayStart(8)
			} else {
				yynn1836 = 0
				for _, b := range yyq1836 {
					if b {
						yynn1836++
					}
				}
				r.EncodeMapStart(yynn1836)
				yynn1836 = 0
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1839 := z.EncBinary()
						_ = yym1839
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1836[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1840 := z.EncBinary()
						_ = yym1840
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[2] {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1836[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[3] {
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1836[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[4] {
					yym1848 := z.EncBinary()
					_ = yym1848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1836[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[5] {
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1836[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1852 := z.EncBinary()
					_ = yym1852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1854 := z.EncBinary()
						_ = yym1854
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1854 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1854 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1836[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1855 := z.EncBinary()
						_ = yym1855
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1855 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1855 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1836[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1857 := z.EncBinary()
						_ = yym1857
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1836[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1858 := z.EncBinary()
						_ = yym1858
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1836 || yy2arr1836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1859 := z.DecBinary()
	_ = yym1859
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1860 := r.ContainerType()
		if yyct1860 == codecSelferValueTypeMap1234 {
			yyl1860 := r.ReadMapStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1860, d)
			}
		} else if yyct1860 == codecSelferValueTypeArray1234 {
			yyl1860 := r.ReadArrayStart()
			if yyl1860 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1860, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1861Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1861Slc
	var yyhl1861 bool = l >= 0
	for yyj1861 := 0; ; yyj1861++ {
		if yyhl1861 {
			if yyj1861 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1861Slc = r.DecodeBytes(yys1861Slc, true, true)
		yys1861 := string(yys1861Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1861 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1863 := &x.Conditions
				yym1864 := z.DecBinary()
				_ = yym1864
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1863), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1870 := z.DecBinary()
				_ = yym1870
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1870 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1870 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1871 := &x.ContainerStatuses
				yym1872 := z.DecBinary()
				_ = yym1872
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1871), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1861)
		} // end switch yys1861
	} // end for yyj1861
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1873 int
	var yyb1873 bool
	var yyhl1873 bool = l >= 0
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1875 := &x.Conditions
		yym1876 := z.DecBinary()
		_ = yym1876
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1875), d)
		}
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1882 := z.DecBinary()
		_ = yym1882
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1882 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1882 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1873++
	if yyhl1873 {
		yyb1873 = yyj1873 > l
	} else {
		yyb1873 = r.CheckBreak()
	}
	if yyb1873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1883 := &x.ContainerStatuses
		yym1884 := z.DecBinary()
		_ = yym1884
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1883), d)
		}
	}
	for {
		yyj1873++
		if yyhl1873 {
			yyb1873 = yyj1873 > l
		} else {
			yyb1873 = r.CheckBreak()
		}
		if yyb1873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1885 := z.EncBinary()
		_ = yym1885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1886 := !z.EncBinary()
			yy2arr1886 := z.EncBasicHandle().StructToArray
			var yyq1886 [4]bool
			_, _, _ = yysep1886, yyq1886, yy2arr1886
			const yyr1886 bool = false
			yyq1886[0] = true
			yyq1886[1] = true
			yyq1886[2] = x.Kind != ""
			yyq1886[3] = x.APIVersion != ""
			var yynn1886 int
			if yyr1886 || yy2arr1886 {
				r.EncodeArrayStart(4)
			} else {
				yynn1886 = 0
				for _, b := range yyq1886 {
					if b {
						yynn1886++
					}
				}
				r.EncodeMapStart(yynn1886)
				yynn1886 = 0
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[0] {
					yy1888 := &x.ObjectMeta
					yy1888.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1889 := &x.ObjectMeta
					yy1889.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[1] {
					yy1891 := &x.Status
					yy1891.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1892 := &x.Status
					yy1892.CodecEncodeSelf(e)
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[2] {
					yym1894 := z.EncBinary()
					_ = yym1894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1895 := z.EncBinary()
					_ = yym1895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1886[3] {
					yym1897 := z.EncBinary()
					_ = yym1897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1898 := z.EncBinary()
					_ = yym1898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1886 || yy2arr1886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1899 := z.DecBinary()
	_ = yym1899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1900 := r.ContainerType()
		if yyct1900 == codecSelferValueTypeMap1234 {
			yyl1900 := r.ReadMapStart()
			if yyl1900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1900, d)
			}
		} else if yyct1900 == codecSelferValueTypeArray1234 {
			yyl1900 := r.ReadArrayStart()
			if yyl1900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1901Slc
	var yyhl1901 bool = l >= 0
	for yyj1901 := 0; ; yyj1901++ {
		if yyhl1901 {
			if yyj1901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1901Slc = r.DecodeBytes(yys1901Slc, true, true)
		yys1901 := string(yys1901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1901 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1902 := &x.ObjectMeta
				yyv1902.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1903 := &x.Status
				yyv1903.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1901)
		} // end switch yys1901
	} // end for yyj1901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1906 int
	var yyb1906 bool
	var yyhl1906 bool = l >= 0
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1907 := &x.ObjectMeta
		yyv1907.CodecDecodeSelf(d)
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1908 := &x.Status
		yyv1908.CodecDecodeSelf(d)
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj1906++
		if yyhl1906 {
			yyb1906 = yyj1906 > l
		} else {
			yyb1906 = r.CheckBreak()
		}
		if yyb1906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1911 := z.EncBinary()
		_ = yym1911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1912 := !z.EncBinary()
			yy2arr1912 := z.EncBasicHandle().StructToArray
			var yyq1912 [5]bool
			_, _, _ = yysep1912, yyq1912, yy2arr1912
			const yyr1912 bool = false
			yyq1912[0] = true
			yyq1912[1] = true
			yyq1912[2] = true
			yyq1912[3] = x.Kind != ""
			yyq1912[4] = x.APIVersion != ""
			var yynn1912 int
			if yyr1912 || yy2arr1912 {
				r.EncodeArrayStart(5)
			} else {
				yynn1912 = 0
				for _, b := range yyq1912 {
					if b {
						yynn1912++
					}
				}
				r.EncodeMapStart(yynn1912)
				yynn1912 = 0
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1912[0] {
					yy1914 := &x.ObjectMeta
					yy1914.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1912[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1915 := &x.ObjectMeta
					yy1915.CodecEncodeSelf(e)
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1912[1] {
					yy1917 := &x.Spec
					yy1917.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1912[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1918 := &x.Spec
					yy1918.CodecEncodeSelf(e)
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1912[2] {
					yy1920 := &x.Status
					yy1920.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1912[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1921 := &x.Status
					yy1921.CodecEncodeSelf(e)
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1912[3] {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1912[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1924 := z.EncBinary()
					_ = yym1924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1912[4] {
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1912[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1927 := z.EncBinary()
					_ = yym1927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1912 || yy2arr1912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1928 := z.DecBinary()
	_ = yym1928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1929 := r.ContainerType()
		if yyct1929 == codecSelferValueTypeMap1234 {
			yyl1929 := r.ReadMapStart()
			if yyl1929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1929, d)
			}
		} else if yyct1929 == codecSelferValueTypeArray1234 {
			yyl1929 := r.ReadArrayStart()
			if yyl1929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1930Slc
	var yyhl1930 bool = l >= 0
	for yyj1930 := 0; ; yyj1930++ {
		if yyhl1930 {
			if yyj1930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1930Slc = r.DecodeBytes(yys1930Slc, true, true)
		yys1930 := string(yys1930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1930 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1931 := &x.ObjectMeta
				yyv1931.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1932 := &x.Spec
				yyv1932.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1933 := &x.Status
				yyv1933.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1930)
		} // end switch yys1930
	} // end for yyj1930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1936 int
	var yyb1936 bool
	var yyhl1936 bool = l >= 0
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1937 := &x.ObjectMeta
		yyv1937.CodecDecodeSelf(d)
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1938 := &x.Spec
		yyv1938.CodecDecodeSelf(d)
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1939 := &x.Status
		yyv1939.CodecDecodeSelf(d)
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1936++
	if yyhl1936 {
		yyb1936 = yyj1936 > l
	} else {
		yyb1936 = r.CheckBreak()
	}
	if yyb1936 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj1936++
		if yyhl1936 {
			yyb1936 = yyj1936 > l
		} else {
			yyb1936 = r.CheckBreak()
		}
		if yyb1936 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1936-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1942 := z.EncBinary()
		_ = yym1942
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1943 := !z.EncBinary()
			yy2arr1943 := z.EncBasicHandle().StructToArray
			var yyq1943 [4]bool
			_, _, _ = yysep1943, yyq1943, yy2arr1943
			const yyr1943 bool = false
			yyq1943[0] = true
			yyq1943[2] = x.Kind != ""
			yyq1943[3] = x.APIVersion != ""
			var yynn1943 int
			if yyr1943 || yy2arr1943 {
				r.EncodeArrayStart(4)
			} else {
				yynn1943 = 1
				for _, b := range yyq1943 {
					if b {
						yynn1943++
					}
				}
				r.EncodeMapStart(yynn1943)
				yynn1943 = 0
			}
			if yyr1943 || yy2arr1943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1943[0] {
					yy1945 := &x.ListMeta
					yym1946 := z.EncBinary()
					_ = yym1946
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1945) {
					} else {
						z.EncFallback(yy1945)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1943[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1947 := &x.ListMeta
					yym1948 := z.EncBinary()
					_ = yym1948
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1947) {
					} else {
						z.EncFallback(yy1947)
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1950 := z.EncBinary()
					_ = yym1950
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1951 := z.EncBinary()
					_ = yym1951
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1943[2] {
					yym1953 := z.EncBinary()
					_ = yym1953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1943[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1954 := z.EncBinary()
					_ = yym1954
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1943[3] {
					yym1956 := z.EncBinary()
					_ = yym1956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1943[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1957 := z.EncBinary()
					_ = yym1957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1943 || yy2arr1943 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1958 := z.DecBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1959 := r.ContainerType()
		if yyct1959 == codecSelferValueTypeMap1234 {
			yyl1959 := r.ReadMapStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1959, d)
			}
		} else if yyct1959 == codecSelferValueTypeArray1234 {
			yyl1959 := r.ReadArrayStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1960Slc
	var yyhl1960 bool = l >= 0
	for yyj1960 := 0; ; yyj1960++ {
		if yyhl1960 {
			if yyj1960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1960Slc = r.DecodeBytes(yys1960Slc, true, true)
		yys1960 := string(yys1960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1960 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1961 := &x.ListMeta
				yym1962 := z.DecBinary()
				_ = yym1962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1961) {
				} else {
					z.DecFallback(yyv1961, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1963 := &x.Items
				yym1964 := z.DecBinary()
				_ = yym1964
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1963), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1960)
		} // end switch yys1960
	} // end for yyj1960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1967 int
	var yyb1967 bool
	var yyhl1967 bool = l >= 0
	yyj1967++
	if yyhl1967 {
		yyb1967 = yyj1967 > l
	} else {
		yyb1967 = r.CheckBreak()
	}
	if yyb1967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1968 := &x.ListMeta
		yym1969 := z.DecBinary()
		_ = yym1969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1968) {
		} else {
			z.DecFallback(yyv1968, false)
		}
	}
	yyj1967++
	if yyhl1967 {
		yyb1967 = yyj1967 > l
	} else {
		yyb1967 = r.CheckBreak()
	}
	if yyb1967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1970 := &x.Items
		yym1971 := z.DecBinary()
		_ = yym1971
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1970), d)
		}
	}
	yyj1967++
	if yyhl1967 {
		yyb1967 = yyj1967 > l
	} else {
		yyb1967 = r.CheckBreak()
	}
	if yyb1967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1967++
	if yyhl1967 {
		yyb1967 = yyj1967 > l
	} else {
		yyb1967 = r.CheckBreak()
	}
	if yyb1967 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj1967++
		if yyhl1967 {
			yyb1967 = yyj1967 > l
		} else {
			yyb1967 = r.CheckBreak()
		}
		if yyb1967 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1967-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1974 := z.EncBinary()
		_ = yym1974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1975 := !z.EncBinary()
			yy2arr1975 := z.EncBasicHandle().StructToArray
			var yyq1975 [2]bool
			_, _, _ = yysep1975, yyq1975, yy2arr1975
			const yyr1975 bool = false
			yyq1975[0] = true
			yyq1975[1] = true
			var yynn1975 int
			if yyr1975 || yy2arr1975 {
				r.EncodeArrayStart(2)
			} else {
				yynn1975 = 0
				for _, b := range yyq1975 {
					if b {
						yynn1975++
					}
				}
				r.EncodeMapStart(yynn1975)
				yynn1975 = 0
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1975[0] {
					yy1977 := &x.ObjectMeta
					yy1977.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1978 := &x.ObjectMeta
					yy1978.CodecEncodeSelf(e)
				}
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1975[1] {
					yy1980 := &x.Spec
					yy1980.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1975[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1981 := &x.Spec
					yy1981.CodecEncodeSelf(e)
				}
			}
			if yyr1975 || yy2arr1975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1982 := z.DecBinary()
	_ = yym1982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1983 := r.ContainerType()
		if yyct1983 == codecSelferValueTypeMap1234 {
			yyl1983 := r.ReadMapStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1983, d)
			}
		} else if yyct1983 == codecSelferValueTypeArray1234 {
			yyl1983 := r.ReadArrayStart()
			if yyl1983 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1984Slc
	var yyhl1984 bool = l >= 0
	for yyj1984 := 0; ; yyj1984++ {
		if yyhl1984 {
			if yyj1984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1984Slc = r.DecodeBytes(yys1984Slc, true, true)
		yys1984 := string(yys1984Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1984 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1985 := &x.ObjectMeta
				yyv1985.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1986 := &x.Spec
				yyv1986.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1984)
		} // end switch yys1984
	} // end for yyj1984
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1987 int
	var yyb1987 bool
	var yyhl1987 bool = l >= 0
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1988 := &x.ObjectMeta
		yyv1988.CodecDecodeSelf(d)
	}
	yyj1987++
	if yyhl1987 {
		yyb1987 = yyj1987 > l
	} else {
		yyb1987 = r.CheckBreak()
	}
	if yyb1987 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1989 := &x.Spec
		yyv1989.CodecDecodeSelf(d)
	}
	for {
		yyj1987++
		if yyhl1987 {
			yyb1987 = yyj1987 > l
		} else {
			yyb1987 = r.CheckBreak()
		}
		if yyb1987 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1987-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1990 := z.EncBinary()
		_ = yym1990
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1991 := !z.EncBinary()
			yy2arr1991 := z.EncBasicHandle().StructToArray
			var yyq1991 [4]bool
			_, _, _ = yysep1991, yyq1991, yy2arr1991
			const yyr1991 bool = false
			yyq1991[0] = true
			yyq1991[1] = true
			yyq1991[2] = x.Kind != ""
			yyq1991[3] = x.APIVersion != ""
			var yynn1991 int
			if yyr1991 || yy2arr1991 {
				r.EncodeArrayStart(4)
			} else {
				yynn1991 = 0
				for _, b := range yyq1991 {
					if b {
						yynn1991++
					}
				}
				r.EncodeMapStart(yynn1991)
				yynn1991 = 0
			}
			if yyr1991 || yy2arr1991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1991[0] {
					yy1993 := &x.ObjectMeta
					yy1993.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1991[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1994 := &x.ObjectMeta
					yy1994.CodecEncodeSelf(e)
				}
			}
			if yyr1991 || yy2arr1991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1991[1] {
					yy1996 := &x.Template
					yy1996.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1991[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1997 := &x.Template
					yy1997.CodecEncodeSelf(e)
				}
			}
			if yyr1991 || yy2arr1991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1991[2] {
					yym1999 := z.EncBinary()
					_ = yym1999
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1991[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2000 := z.EncBinary()
					_ = yym2000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1991 || yy2arr1991 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1991[3] {
					yym2002 := z.EncBinary()
					_ = yym2002
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1991[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2003 := z.EncBinary()
					_ = yym2003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1991 || yy2arr1991 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2004 := z.DecBinary()
	_ = yym2004
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2005 := r.ContainerType()
		if yyct2005 == codecSelferValueTypeMap1234 {
			yyl2005 := r.ReadMapStart()
			if yyl2005 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2005, d)
			}
		} else if yyct2005 == codecSelferValueTypeArray1234 {
			yyl2005 := r.ReadArrayStart()
			if yyl2005 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2005, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2006Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2006Slc
	var yyhl2006 bool = l >= 0
	for yyj2006 := 0; ; yyj2006++ {
		if yyhl2006 {
			if yyj2006 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2006Slc = r.DecodeBytes(yys2006Slc, true, true)
		yys2006 := string(yys2006Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2006 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2007 := &x.ObjectMeta
				yyv2007.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2008 := &x.Template
				yyv2008.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2006)
		} // end switch yys2006
	} // end for yyj2006
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2011 int
	var yyb2011 bool
	var yyhl2011 bool = l >= 0
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2012 := &x.ObjectMeta
		yyv2012.CodecDecodeSelf(d)
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2013 := &x.Template
		yyv2013.CodecDecodeSelf(d)
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2011++
	if yyhl2011 {
		yyb2011 = yyj2011 > l
	} else {
		yyb2011 = r.CheckBreak()
	}
	if yyb2011 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2011++
		if yyhl2011 {
			yyb2011 = yyj2011 > l
		} else {
			yyb2011 = r.CheckBreak()
		}
		if yyb2011 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2011-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2016 := z.EncBinary()
		_ = yym2016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2017 := !z.EncBinary()
			yy2arr2017 := z.EncBasicHandle().StructToArray
			var yyq2017 [4]bool
			_, _, _ = yysep2017, yyq2017, yy2arr2017
			const yyr2017 bool = false
			yyq2017[0] = true
			yyq2017[2] = x.Kind != ""
			yyq2017[3] = x.APIVersion != ""
			var yynn2017 int
			if yyr2017 || yy2arr2017 {
				r.EncodeArrayStart(4)
			} else {
				yynn2017 = 1
				for _, b := range yyq2017 {
					if b {
						yynn2017++
					}
				}
				r.EncodeMapStart(yynn2017)
				yynn2017 = 0
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[0] {
					yy2019 := &x.ListMeta
					yym2020 := z.EncBinary()
					_ = yym2020
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2019) {
					} else {
						z.EncFallback(yy2019)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2017[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2021 := &x.ListMeta
					yym2022 := z.EncBinary()
					_ = yym2022
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2021) {
					} else {
						z.EncFallback(yy2021)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2024 := z.EncBinary()
					_ = yym2024
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[2] {
					yym2027 := z.EncBinary()
					_ = yym2027
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2017[3] {
					yym2030 := z.EncBinary()
					_ = yym2030
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2017[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2031 := z.EncBinary()
					_ = yym2031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2017 || yy2arr2017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2032 := z.DecBinary()
	_ = yym2032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2033 := r.ContainerType()
		if yyct2033 == codecSelferValueTypeMap1234 {
			yyl2033 := r.ReadMapStart()
			if yyl2033 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2033, d)
			}
		} else if yyct2033 == codecSelferValueTypeArray1234 {
			yyl2033 := r.ReadArrayStart()
			if yyl2033 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2034Slc
	var yyhl2034 bool = l >= 0
	for yyj2034 := 0; ; yyj2034++ {
		if yyhl2034 {
			if yyj2034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2034Slc = r.DecodeBytes(yys2034Slc, true, true)
		yys2034 := string(yys2034Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2034 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2035 := &x.ListMeta
				yym2036 := z.DecBinary()
				_ = yym2036
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2035) {
				} else {
					z.DecFallback(yyv2035, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2037 := &x.Items
				yym2038 := z.DecBinary()
				_ = yym2038
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2037), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2034)
		} // end switch yys2034
	} // end for yyj2034
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2041 int
	var yyb2041 bool
	var yyhl2041 bool = l >= 0
	yyj2041++
	if yyhl2041 {
		yyb2041 = yyj2041 > l
	} else {
		yyb2041 = r.CheckBreak()
	}
	if yyb2041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2042 := &x.ListMeta
		yym2043 := z.DecBinary()
		_ = yym2043
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2042) {
		} else {
			z.DecFallback(yyv2042, false)
		}
	}
	yyj2041++
	if yyhl2041 {
		yyb2041 = yyj2041 > l
	} else {
		yyb2041 = r.CheckBreak()
	}
	if yyb2041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2044 := &x.Items
		yym2045 := z.DecBinary()
		_ = yym2045
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2044), d)
		}
	}
	yyj2041++
	if yyhl2041 {
		yyb2041 = yyj2041 > l
	} else {
		yyb2041 = r.CheckBreak()
	}
	if yyb2041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2041++
	if yyhl2041 {
		yyb2041 = yyj2041 > l
	} else {
		yyb2041 = r.CheckBreak()
	}
	if yyb2041 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2041++
		if yyhl2041 {
			yyb2041 = yyj2041 > l
		} else {
			yyb2041 = r.CheckBreak()
		}
		if yyb2041 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2041-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2048 := z.EncBinary()
		_ = yym2048
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2049 := !z.EncBinary()
			yy2arr2049 := z.EncBasicHandle().StructToArray
			var yyq2049 [3]bool
			_, _, _ = yysep2049, yyq2049, yy2arr2049
			const yyr2049 bool = false
			yyq2049[0] = x.Replicas != nil
			yyq2049[1] = len(x.Selector) != 0
			yyq2049[2] = x.Template != nil
			var yynn2049 int
			if yyr2049 || yy2arr2049 {
				r.EncodeArrayStart(3)
			} else {
				yynn2049 = 0
				for _, b := range yyq2049 {
					if b {
						yynn2049++
					}
				}
				r.EncodeMapStart(yynn2049)
				yynn2049 = 0
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2049[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2051 := *x.Replicas
						yym2052 := z.EncBinary()
						_ = yym2052
						if false {
						} else {
							r.EncodeInt(int64(yy2051))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2049[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy2053 := *x.Replicas
						yym2054 := z.EncBinary()
						_ = yym2054
						if false {
						} else {
							r.EncodeInt(int64(yy2053))
						}
					}
				}
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2049[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2056 := z.EncBinary()
						_ = yym2056
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2049[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2057 := z.EncBinary()
						_ = yym2057
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2049[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2049[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2049 || yy2arr2049 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2059 := z.DecBinary()
	_ = yym2059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2060 := r.ContainerType()
		if yyct2060 == codecSelferValueTypeMap1234 {
			yyl2060 := r.ReadMapStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2060, d)
			}
		} else if yyct2060 == codecSelferValueTypeArray1234 {
			yyl2060 := r.ReadArrayStart()
			if yyl2060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2061Slc
	var yyhl2061 bool = l >= 0
	for yyj2061 := 0; ; yyj2061++ {
		if yyhl2061 {
			if yyj2061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2061Slc = r.DecodeBytes(yys2061Slc, true, true)
		yys2061 := string(yys2061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2061 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym2063 := z.DecBinary()
				_ = yym2063
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2064 := &x.Selector
				yym2065 := z.DecBinary()
				_ = yym2065
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2064, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2061)
		} // end switch yys2061
	} // end for yyj2061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2067 int
	var yyb2067 bool
	var yyhl2067 bool = l >= 0
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym2069 := z.DecBinary()
		_ = yym2069
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2070 := &x.Selector
		yym2071 := z.DecBinary()
		_ = yym2071
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2070, false, d)
		}
	}
	yyj2067++
	if yyhl2067 {
		yyb2067 = yyj2067 > l
	} else {
		yyb2067 = r.CheckBreak()
	}
	if yyb2067 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2067++
		if yyhl2067 {
			yyb2067 = yyj2067 > l
		} else {
			yyb2067 = r.CheckBreak()
		}
		if yyb2067 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2067-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2073 := z.EncBinary()
		_ = yym2073
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2074 := !z.EncBinary()
			yy2arr2074 := z.EncBasicHandle().StructToArray
			var yyq2074 [2]bool
			_, _, _ = yysep2074, yyq2074, yy2arr2074
			const yyr2074 bool = false
			yyq2074[1] = x.ObservedGeneration != 0
			var yynn2074 int
			if yyr2074 || yy2arr2074 {
				r.EncodeArrayStart(2)
			} else {
				yynn2074 = 1
				for _, b := range yyq2074 {
					if b {
						yynn2074++
					}
				}
				r.EncodeMapStart(yynn2074)
				yynn2074 = 0
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2076 := z.EncBinary()
				_ = yym2076
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2077 := z.EncBinary()
				_ = yym2077
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2074[1] {
					yym2079 := z.EncBinary()
					_ = yym2079
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2074[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2080 := z.EncBinary()
					_ = yym2080
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2074 || yy2arr2074 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2081 := z.DecBinary()
	_ = yym2081
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2082 := r.ContainerType()
		if yyct2082 == codecSelferValueTypeMap1234 {
			yyl2082 := r.ReadMapStart()
			if yyl2082 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2082, d)
			}
		} else if yyct2082 == codecSelferValueTypeArray1234 {
			yyl2082 := r.ReadArrayStart()
			if yyl2082 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2082, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2083Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2083Slc
	var yyhl2083 bool = l >= 0
	for yyj2083 := 0; ; yyj2083++ {
		if yyhl2083 {
			if yyj2083 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2083Slc = r.DecodeBytes(yys2083Slc, true, true)
		yys2083 := string(yys2083Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2083 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2083)
		} // end switch yys2083
	} // end for yyj2083
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2086 int
	var yyb2086 bool
	var yyhl2086 bool = l >= 0
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2086++
	if yyhl2086 {
		yyb2086 = yyj2086 > l
	} else {
		yyb2086 = r.CheckBreak()
	}
	if yyb2086 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2086++
		if yyhl2086 {
			yyb2086 = yyj2086 > l
		} else {
			yyb2086 = r.CheckBreak()
		}
		if yyb2086 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2086-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [5]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			yyq2090[0] = true
			yyq2090[1] = true
			yyq2090[2] = true
			yyq2090[3] = x.Kind != ""
			yyq2090[4] = x.APIVersion != ""
			var yynn2090 int
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(5)
			} else {
				yynn2090 = 0
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
				yynn2090 = 0
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[0] {
					yy2092 := &x.ObjectMeta
					yy2092.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2093 := &x.ObjectMeta
					yy2093.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[1] {
					yy2095 := &x.Spec
					yy2095.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2096 := &x.Spec
					yy2096.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[2] {
					yy2098 := &x.Status
					yy2098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2099 := &x.Status
					yy2099.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[3] {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[4] {
					yym2104 := z.EncBinary()
					_ = yym2104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2105 := z.EncBinary()
					_ = yym2105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2106 := z.DecBinary()
	_ = yym2106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2107 := r.ContainerType()
		if yyct2107 == codecSelferValueTypeMap1234 {
			yyl2107 := r.ReadMapStart()
			if yyl2107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2107, d)
			}
		} else if yyct2107 == codecSelferValueTypeArray1234 {
			yyl2107 := r.ReadArrayStart()
			if yyl2107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2108Slc
	var yyhl2108 bool = l >= 0
	for yyj2108 := 0; ; yyj2108++ {
		if yyhl2108 {
			if yyj2108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2108Slc = r.DecodeBytes(yys2108Slc, true, true)
		yys2108 := string(yys2108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2108 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2109 := &x.ObjectMeta
				yyv2109.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2110 := &x.Spec
				yyv2110.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2111 := &x.Status
				yyv2111.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2108)
		} // end switch yys2108
	} // end for yyj2108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2114 int
	var yyb2114 bool
	var yyhl2114 bool = l >= 0
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2115 := &x.ObjectMeta
		yyv2115.CodecDecodeSelf(d)
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2116 := &x.Spec
		yyv2116.CodecDecodeSelf(d)
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2117 := &x.Status
		yyv2117.CodecDecodeSelf(d)
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2114++
	if yyhl2114 {
		yyb2114 = yyj2114 > l
	} else {
		yyb2114 = r.CheckBreak()
	}
	if yyb2114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2114++
		if yyhl2114 {
			yyb2114 = yyj2114 > l
		} else {
			yyb2114 = r.CheckBreak()
		}
		if yyb2114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2120 := z.EncBinary()
		_ = yym2120
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2121 := !z.EncBinary()
			yy2arr2121 := z.EncBasicHandle().StructToArray
			var yyq2121 [4]bool
			_, _, _ = yysep2121, yyq2121, yy2arr2121
			const yyr2121 bool = false
			yyq2121[0] = true
			yyq2121[2] = x.Kind != ""
			yyq2121[3] = x.APIVersion != ""
			var yynn2121 int
			if yyr2121 || yy2arr2121 {
				r.EncodeArrayStart(4)
			} else {
				yynn2121 = 1
				for _, b := range yyq2121 {
					if b {
						yynn2121++
					}
				}
				r.EncodeMapStart(yynn2121)
				yynn2121 = 0
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[0] {
					yy2123 := &x.ListMeta
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2123) {
					} else {
						z.EncFallback(yy2123)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2121[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2125 := &x.ListMeta
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2125) {
					} else {
						z.EncFallback(yy2125)
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2128 := z.EncBinary()
					_ = yym2128
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2129 := z.EncBinary()
					_ = yym2129
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[2] {
					yym2131 := z.EncBinary()
					_ = yym2131
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2121[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2132 := z.EncBinary()
					_ = yym2132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2121[3] {
					yym2134 := z.EncBinary()
					_ = yym2134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2121[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2135 := z.EncBinary()
					_ = yym2135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2121 || yy2arr2121 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2136 := z.DecBinary()
	_ = yym2136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2137 := r.ContainerType()
		if yyct2137 == codecSelferValueTypeMap1234 {
			yyl2137 := r.ReadMapStart()
			if yyl2137 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2137, d)
			}
		} else if yyct2137 == codecSelferValueTypeArray1234 {
			yyl2137 := r.ReadArrayStart()
			if yyl2137 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2138Slc
	var yyhl2138 bool = l >= 0
	for yyj2138 := 0; ; yyj2138++ {
		if yyhl2138 {
			if yyj2138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2138Slc = r.DecodeBytes(yys2138Slc, true, true)
		yys2138 := string(yys2138Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2138 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2139 := &x.ListMeta
				yym2140 := z.DecBinary()
				_ = yym2140
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2139) {
				} else {
					z.DecFallback(yyv2139, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2141 := &x.Items
				yym2142 := z.DecBinary()
				_ = yym2142
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2141), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2138)
		} // end switch yys2138
	} // end for yyj2138
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2145 int
	var yyb2145 bool
	var yyhl2145 bool = l >= 0
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2146 := &x.ListMeta
		yym2147 := z.DecBinary()
		_ = yym2147
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2146) {
		} else {
			z.DecFallback(yyv2146, false)
		}
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2148 := &x.Items
		yym2149 := z.DecBinary()
		_ = yym2149
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2148), d)
		}
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2145++
	if yyhl2145 {
		yyb2145 = yyj2145 > l
	} else {
		yyb2145 = r.CheckBreak()
	}
	if yyb2145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2145++
		if yyhl2145 {
			yyb2145 = yyj2145 > l
		} else {
			yyb2145 = r.CheckBreak()
		}
		if yyb2145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2152 := z.EncBinary()
	_ = yym2152
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2153 := z.DecBinary()
	_ = yym2153
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2154 := z.EncBinary()
	_ = yym2154
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2155 := z.DecBinary()
	_ = yym2155
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2156 := z.EncBinary()
		_ = yym2156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2157 := !z.EncBinary()
			yy2arr2157 := z.EncBasicHandle().StructToArray
			var yyq2157 [1]bool
			_, _, _ = yysep2157, yyq2157, yy2arr2157
			const yyr2157 bool = false
			yyq2157[0] = true
			var yynn2157 int
			if yyr2157 || yy2arr2157 {
				r.EncodeArrayStart(1)
			} else {
				yynn2157 = 0
				for _, b := range yyq2157 {
					if b {
						yynn2157++
					}
				}
				r.EncodeMapStart(yynn2157)
				yynn2157 = 0
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2157[0] {
					yy2159 := &x.LoadBalancer
					yy2159.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2157[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2160 := &x.LoadBalancer
					yy2160.CodecEncodeSelf(e)
				}
			}
			if yyr2157 || yy2arr2157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2161 := z.DecBinary()
	_ = yym2161
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2162 := r.ContainerType()
		if yyct2162 == codecSelferValueTypeMap1234 {
			yyl2162 := r.ReadMapStart()
			if yyl2162 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2162, d)
			}
		} else if yyct2162 == codecSelferValueTypeArray1234 {
			yyl2162 := r.ReadArrayStart()
			if yyl2162 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2162, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2163Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2163Slc
	var yyhl2163 bool = l >= 0
	for yyj2163 := 0; ; yyj2163++ {
		if yyhl2163 {
			if yyj2163 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2163Slc = r.DecodeBytes(yys2163Slc, true, true)
		yys2163 := string(yys2163Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2163 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2164 := &x.LoadBalancer
				yyv2164.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2163)
		} // end switch yys2163
	} // end for yyj2163
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2165 int
	var yyb2165 bool
	var yyhl2165 bool = l >= 0
	yyj2165++
	if yyhl2165 {
		yyb2165 = yyj2165 > l
	} else {
		yyb2165 = r.CheckBreak()
	}
	if yyb2165 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2166 := &x.LoadBalancer
		yyv2166.CodecDecodeSelf(d)
	}
	for {
		yyj2165++
		if yyhl2165 {
			yyb2165 = yyj2165 > l
		} else {
			yyb2165 = r.CheckBreak()
		}
		if yyb2165 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2165-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2167 := z.EncBinary()
		_ = yym2167
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2168 := !z.EncBinary()
			yy2arr2168 := z.EncBasicHandle().StructToArray
			var yyq2168 [1]bool
			_, _, _ = yysep2168, yyq2168, yy2arr2168
			const yyr2168 bool = false
			yyq2168[0] = len(x.Ingress) != 0
			var yynn2168 int
			if yyr2168 || yy2arr2168 {
				r.EncodeArrayStart(1)
			} else {
				yynn2168 = 0
				for _, b := range yyq2168 {
					if b {
						yynn2168++
					}
				}
				r.EncodeMapStart(yynn2168)
				yynn2168 = 0
			}
			if yyr2168 || yy2arr2168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2168[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2170 := z.EncBinary()
						_ = yym2170
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2168[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2171 := z.EncBinary()
						_ = yym2171
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2168 || yy2arr2168 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2172 := z.DecBinary()
	_ = yym2172
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2173 := r.ContainerType()
		if yyct2173 == codecSelferValueTypeMap1234 {
			yyl2173 := r.ReadMapStart()
			if yyl2173 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2173, d)
			}
		} else if yyct2173 == codecSelferValueTypeArray1234 {
			yyl2173 := r.ReadArrayStart()
			if yyl2173 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2173, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2174Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2174Slc
	var yyhl2174 bool = l >= 0
	for yyj2174 := 0; ; yyj2174++ {
		if yyhl2174 {
			if yyj2174 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2174Slc = r.DecodeBytes(yys2174Slc, true, true)
		yys2174 := string(yys2174Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2174 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2175 := &x.Ingress
				yym2176 := z.DecBinary()
				_ = yym2176
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2175), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2174)
		} // end switch yys2174
	} // end for yyj2174
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2177 int
	var yyb2177 bool
	var yyhl2177 bool = l >= 0
	yyj2177++
	if yyhl2177 {
		yyb2177 = yyj2177 > l
	} else {
		yyb2177 = r.CheckBreak()
	}
	if yyb2177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2178 := &x.Ingress
		yym2179 := z.DecBinary()
		_ = yym2179
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2178), d)
		}
	}
	for {
		yyj2177++
		if yyhl2177 {
			yyb2177 = yyj2177 > l
		} else {
			yyb2177 = r.CheckBreak()
		}
		if yyb2177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2180 := z.EncBinary()
		_ = yym2180
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2181 := !z.EncBinary()
			yy2arr2181 := z.EncBasicHandle().StructToArray
			var yyq2181 [2]bool
			_, _, _ = yysep2181, yyq2181, yy2arr2181
			const yyr2181 bool = false
			yyq2181[0] = x.IP != ""
			yyq2181[1] = x.Hostname != ""
			var yynn2181 int
			if yyr2181 || yy2arr2181 {
				r.EncodeArrayStart(2)
			} else {
				yynn2181 = 0
				for _, b := range yyq2181 {
					if b {
						yynn2181++
					}
				}
				r.EncodeMapStart(yynn2181)
				yynn2181 = 0
			}
			if yyr2181 || yy2arr2181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2181[0] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2181[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2181 || yy2arr2181 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2181[1] {
					yym2186 := z.EncBinary()
					_ = yym2186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2181[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2181 || yy2arr2181 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2188 := z.DecBinary()
	_ = yym2188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2189 := r.ContainerType()
		if yyct2189 == codecSelferValueTypeMap1234 {
			yyl2189 := r.ReadMapStart()
			if yyl2189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2189, d)
			}
		} else if yyct2189 == codecSelferValueTypeArray1234 {
			yyl2189 := r.ReadArrayStart()
			if yyl2189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2190Slc
	var yyhl2190 bool = l >= 0
	for yyj2190 := 0; ; yyj2190++ {
		if yyhl2190 {
			if yyj2190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2190Slc = r.DecodeBytes(yys2190Slc, true, true)
		yys2190 := string(yys2190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2190 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2190)
		} // end switch yys2190
	} // end for yyj2190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2193 int
	var yyb2193 bool
	var yyhl2193 bool = l >= 0
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2193++
	if yyhl2193 {
		yyb2193 = yyj2193 > l
	} else {
		yyb2193 = r.CheckBreak()
	}
	if yyb2193 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2193++
		if yyhl2193 {
			yyb2193 = yyj2193 > l
		} else {
			yyb2193 = r.CheckBreak()
		}
		if yyb2193 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2193-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2196 := z.EncBinary()
		_ = yym2196
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2197 := !z.EncBinary()
			yy2arr2197 := z.EncBasicHandle().StructToArray
			var yyq2197 [8]bool
			_, _, _ = yysep2197, yyq2197, yy2arr2197
			const yyr2197 bool = false
			yyq2197[1] = len(x.Selector) != 0
			yyq2197[2] = x.ClusterIP != ""
			yyq2197[3] = x.Type != ""
			yyq2197[4] = len(x.ExternalIPs) != 0
			yyq2197[5] = len(x.DeprecatedPublicIPs) != 0
			yyq2197[6] = x.SessionAffinity != ""
			yyq2197[7] = x.LoadBalancerIP != ""
			var yynn2197 int
			if yyr2197 || yy2arr2197 {
				r.EncodeArrayStart(8)
			} else {
				yynn2197 = 1
				for _, b := range yyq2197 {
					if b {
						yynn2197++
					}
				}
				r.EncodeMapStart(yynn2197)
				yynn2197 = 0
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2199 := z.EncBinary()
					_ = yym2199
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2200 := z.EncBinary()
					_ = yym2200
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2202 := z.EncBinary()
						_ = yym2202
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2197[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym2203 := z.EncBinary()
						_ = yym2203
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[2] {
					yym2205 := z.EncBinary()
					_ = yym2205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[3] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2209 := z.EncBinary()
						_ = yym2209
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2197[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2210 := z.EncBinary()
						_ = yym2210
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[5] {
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2212 := z.EncBinary()
						_ = yym2212
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2197[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deprecatedPublicIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeprecatedPublicIPs == nil {
						r.EncodeNil()
					} else {
						yym2213 := z.EncBinary()
						_ = yym2213
						if false {
						} else {
							z.F.EncSliceStringV(x.DeprecatedPublicIPs, false, e)
						}
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2197[7] {
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2197[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2217 := z.EncBinary()
					_ = yym2217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2197 || yy2arr2197 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2218 := z.DecBinary()
	_ = yym2218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2219 := r.ContainerType()
		if yyct2219 == codecSelferValueTypeMap1234 {
			yyl2219 := r.ReadMapStart()
			if yyl2219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2219, d)
			}
		} else if yyct2219 == codecSelferValueTypeArray1234 {
			yyl2219 := r.ReadArrayStart()
			if yyl2219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2220Slc
	var yyhl2220 bool = l >= 0
	for yyj2220 := 0; ; yyj2220++ {
		if yyhl2220 {
			if yyj2220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2220Slc = r.DecodeBytes(yys2220Slc, true, true)
		yys2220 := string(yys2220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2220 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2221 := &x.Ports
				yym2222 := z.DecBinary()
				_ = yym2222
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2221), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2223 := &x.Selector
				yym2224 := z.DecBinary()
				_ = yym2224
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2223, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2227 := &x.ExternalIPs
				yym2228 := z.DecBinary()
				_ = yym2228
				if false {
				} else {
					z.F.DecSliceStringX(yyv2227, false, d)
				}
			}
		case "deprecatedPublicIPs":
			if r.TryDecodeAsNil() {
				x.DeprecatedPublicIPs = nil
			} else {
				yyv2229 := &x.DeprecatedPublicIPs
				yym2230 := z.DecBinary()
				_ = yym2230
				if false {
				} else {
					z.F.DecSliceStringX(yyv2229, false, d)
				}
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2220)
		} // end switch yys2220
	} // end for yyj2220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2233 int
	var yyb2233 bool
	var yyhl2233 bool = l >= 0
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2234 := &x.Ports
		yym2235 := z.DecBinary()
		_ = yym2235
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2234), d)
		}
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2236 := &x.Selector
		yym2237 := z.DecBinary()
		_ = yym2237
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2236, false, d)
		}
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2240 := &x.ExternalIPs
		yym2241 := z.DecBinary()
		_ = yym2241
		if false {
		} else {
			z.F.DecSliceStringX(yyv2240, false, d)
		}
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DeprecatedPublicIPs = nil
	} else {
		yyv2242 := &x.DeprecatedPublicIPs
		yym2243 := z.DecBinary()
		_ = yym2243
		if false {
		} else {
			z.F.DecSliceStringX(yyv2242, false, d)
		}
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2233++
	if yyhl2233 {
		yyb2233 = yyj2233 > l
	} else {
		yyb2233 = r.CheckBreak()
	}
	if yyb2233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	for {
		yyj2233++
		if yyhl2233 {
			yyb2233 = yyj2233 > l
		} else {
			yyb2233 = r.CheckBreak()
		}
		if yyb2233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [5]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			yyq2247[0] = x.Name != ""
			yyq2247[1] = x.Protocol != ""
			yyq2247[3] = true
			yyq2247[4] = x.NodePort != 0
			var yynn2247 int
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(5)
			} else {
				yynn2247 = 1
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
				yynn2247 = 0
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[0] {
					yym2249 := z.EncBinary()
					_ = yym2249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2250 := z.EncBinary()
					_ = yym2250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[1] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2247[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2253 := z.EncBinary()
				_ = yym2253
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2254 := z.EncBinary()
				_ = yym2254
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[3] {
					yy2256 := &x.TargetPort
					yym2257 := z.EncBinary()
					_ = yym2257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2256) {
					} else if !yym2257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2256)
					} else {
						z.EncFallback(yy2256)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2258 := &x.TargetPort
					yym2259 := z.EncBinary()
					_ = yym2259
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2258) {
					} else if !yym2259 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2258)
					} else {
						z.EncFallback(yy2258)
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[4] {
					yym2261 := z.EncBinary()
					_ = yym2261
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2247[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2262 := z.EncBinary()
					_ = yym2262
					if false {
					} else {
						r.EncodeInt(int64(x.NodePort))
					}
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2263 := z.DecBinary()
	_ = yym2263
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2264 := r.ContainerType()
		if yyct2264 == codecSelferValueTypeMap1234 {
			yyl2264 := r.ReadMapStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2264, d)
			}
		} else if yyct2264 == codecSelferValueTypeArray1234 {
			yyl2264 := r.ReadArrayStart()
			if yyl2264 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2264, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2265Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2265Slc
	var yyhl2265 bool = l >= 0
	for yyj2265 := 0; ; yyj2265++ {
		if yyhl2265 {
			if yyj2265 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2265Slc = r.DecodeBytes(yys2265Slc, true, true)
		yys2265 := string(yys2265Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2265 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv2269 := &x.TargetPort
				yym2270 := z.DecBinary()
				_ = yym2270
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2269) {
				} else if !yym2270 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2269)
				} else {
					z.DecFallback(yyv2269, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2265)
		} // end switch yys2265
	} // end for yyj2265
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2272 int
	var yyb2272 bool
	var yyhl2272 bool = l >= 0
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv2276 := &x.TargetPort
		yym2277 := z.DecBinary()
		_ = yym2277
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2276) {
		} else if !yym2277 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2276)
		} else {
			z.DecFallback(yyv2276, false)
		}
	}
	yyj2272++
	if yyhl2272 {
		yyb2272 = yyj2272 > l
	} else {
		yyb2272 = r.CheckBreak()
	}
	if yyb2272 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2272++
		if yyhl2272 {
			yyb2272 = yyj2272 > l
		} else {
			yyb2272 = r.CheckBreak()
		}
		if yyb2272 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2272-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2279 := z.EncBinary()
		_ = yym2279
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2280 := !z.EncBinary()
			yy2arr2280 := z.EncBasicHandle().StructToArray
			var yyq2280 [5]bool
			_, _, _ = yysep2280, yyq2280, yy2arr2280
			const yyr2280 bool = false
			yyq2280[0] = true
			yyq2280[1] = true
			yyq2280[2] = true
			yyq2280[3] = x.Kind != ""
			yyq2280[4] = x.APIVersion != ""
			var yynn2280 int
			if yyr2280 || yy2arr2280 {
				r.EncodeArrayStart(5)
			} else {
				yynn2280 = 0
				for _, b := range yyq2280 {
					if b {
						yynn2280++
					}
				}
				r.EncodeMapStart(yynn2280)
				yynn2280 = 0
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[0] {
					yy2282 := &x.ObjectMeta
					yy2282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2283 := &x.ObjectMeta
					yy2283.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[1] {
					yy2285 := &x.Spec
					yy2285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2286 := &x.Spec
					yy2286.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[2] {
					yy2288 := &x.Status
					yy2288.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2280[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2289 := &x.Status
					yy2289.CodecEncodeSelf(e)
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[3] {
					yym2291 := z.EncBinary()
					_ = yym2291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2280[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2292 := z.EncBinary()
					_ = yym2292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2280[4] {
					yym2294 := z.EncBinary()
					_ = yym2294
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2280[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2295 := z.EncBinary()
					_ = yym2295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2280 || yy2arr2280 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2296 := z.DecBinary()
	_ = yym2296
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2297 := r.ContainerType()
		if yyct2297 == codecSelferValueTypeMap1234 {
			yyl2297 := r.ReadMapStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2297, d)
			}
		} else if yyct2297 == codecSelferValueTypeArray1234 {
			yyl2297 := r.ReadArrayStart()
			if yyl2297 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2297, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2298Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2298Slc
	var yyhl2298 bool = l >= 0
	for yyj2298 := 0; ; yyj2298++ {
		if yyhl2298 {
			if yyj2298 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2298Slc = r.DecodeBytes(yys2298Slc, true, true)
		yys2298 := string(yys2298Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2298 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2299 := &x.ObjectMeta
				yyv2299.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2300 := &x.Spec
				yyv2300.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2301 := &x.Status
				yyv2301.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2298)
		} // end switch yys2298
	} // end for yyj2298
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2304 int
	var yyb2304 bool
	var yyhl2304 bool = l >= 0
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2305 := &x.ObjectMeta
		yyv2305.CodecDecodeSelf(d)
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2306 := &x.Spec
		yyv2306.CodecDecodeSelf(d)
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2307 := &x.Status
		yyv2307.CodecDecodeSelf(d)
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2304++
	if yyhl2304 {
		yyb2304 = yyj2304 > l
	} else {
		yyb2304 = r.CheckBreak()
	}
	if yyb2304 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2304++
		if yyhl2304 {
			yyb2304 = yyj2304 > l
		} else {
			yyb2304 = r.CheckBreak()
		}
		if yyb2304 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2304-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2310 := z.EncBinary()
		_ = yym2310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2311 := !z.EncBinary()
			yy2arr2311 := z.EncBasicHandle().StructToArray
			var yyq2311 [4]bool
			_, _, _ = yysep2311, yyq2311, yy2arr2311
			const yyr2311 bool = false
			yyq2311[0] = true
			yyq2311[2] = x.Kind != ""
			yyq2311[3] = x.APIVersion != ""
			var yynn2311 int
			if yyr2311 || yy2arr2311 {
				r.EncodeArrayStart(4)
			} else {
				yynn2311 = 1
				for _, b := range yyq2311 {
					if b {
						yynn2311++
					}
				}
				r.EncodeMapStart(yynn2311)
				yynn2311 = 0
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[0] {
					yy2313 := &x.ListMeta
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2313) {
					} else {
						z.EncFallback(yy2313)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2311[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2315 := &x.ListMeta
					yym2316 := z.EncBinary()
					_ = yym2316
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2315) {
					} else {
						z.EncFallback(yy2315)
					}
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2318 := z.EncBinary()
					_ = yym2318
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2319 := z.EncBinary()
					_ = yym2319
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[2] {
					yym2321 := z.EncBinary()
					_ = yym2321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2311[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2322 := z.EncBinary()
					_ = yym2322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2311[3] {
					yym2324 := z.EncBinary()
					_ = yym2324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2325 := z.EncBinary()
					_ = yym2325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2311 || yy2arr2311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2326 := z.DecBinary()
	_ = yym2326
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2327 := r.ContainerType()
		if yyct2327 == codecSelferValueTypeMap1234 {
			yyl2327 := r.ReadMapStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2327, d)
			}
		} else if yyct2327 == codecSelferValueTypeArray1234 {
			yyl2327 := r.ReadArrayStart()
			if yyl2327 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2327, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2328Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2328Slc
	var yyhl2328 bool = l >= 0
	for yyj2328 := 0; ; yyj2328++ {
		if yyhl2328 {
			if yyj2328 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2328Slc = r.DecodeBytes(yys2328Slc, true, true)
		yys2328 := string(yys2328Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2328 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2329 := &x.ListMeta
				yym2330 := z.DecBinary()
				_ = yym2330
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2329) {
				} else {
					z.DecFallback(yyv2329, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2331 := &x.Items
				yym2332 := z.DecBinary()
				_ = yym2332
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2331), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2328)
		} // end switch yys2328
	} // end for yyj2328
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2335 int
	var yyb2335 bool
	var yyhl2335 bool = l >= 0
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2336 := &x.ListMeta
		yym2337 := z.DecBinary()
		_ = yym2337
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2336) {
		} else {
			z.DecFallback(yyv2336, false)
		}
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2338 := &x.Items
		yym2339 := z.DecBinary()
		_ = yym2339
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2338), d)
		}
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2335++
	if yyhl2335 {
		yyb2335 = yyj2335 > l
	} else {
		yyb2335 = r.CheckBreak()
	}
	if yyb2335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2335++
		if yyhl2335 {
			yyb2335 = yyj2335 > l
		} else {
			yyb2335 = r.CheckBreak()
		}
		if yyb2335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2342 := z.EncBinary()
		_ = yym2342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2343 := !z.EncBinary()
			yy2arr2343 := z.EncBasicHandle().StructToArray
			var yyq2343 [5]bool
			_, _, _ = yysep2343, yyq2343, yy2arr2343
			const yyr2343 bool = false
			yyq2343[0] = true
			yyq2343[1] = len(x.Secrets) != 0
			yyq2343[2] = len(x.ImagePullSecrets) != 0
			yyq2343[3] = x.Kind != ""
			yyq2343[4] = x.APIVersion != ""
			var yynn2343 int
			if yyr2343 || yy2arr2343 {
				r.EncodeArrayStart(5)
			} else {
				yynn2343 = 0
				for _, b := range yyq2343 {
					if b {
						yynn2343++
					}
				}
				r.EncodeMapStart(yynn2343)
				yynn2343 = 0
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2343[0] {
					yy2345 := &x.ObjectMeta
					yy2345.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2346 := &x.ObjectMeta
					yy2346.CodecEncodeSelf(e)
				}
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2343[1] {
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2348 := z.EncBinary()
						_ = yym2348
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secrets == nil {
						r.EncodeNil()
					} else {
						yym2349 := z.EncBinary()
						_ = yym2349
						if false {
						} else {
							h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
						}
					}
				}
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2343[2] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2351 := z.EncBinary()
						_ = yym2351
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2343[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2352 := z.EncBinary()
						_ = yym2352
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2343[3] {
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2343[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2355 := z.EncBinary()
					_ = yym2355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2343[4] {
					yym2357 := z.EncBinary()
					_ = yym2357
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2343[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2343 || yy2arr2343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2359 := z.DecBinary()
	_ = yym2359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2360 := r.ContainerType()
		if yyct2360 == codecSelferValueTypeMap1234 {
			yyl2360 := r.ReadMapStart()
			if yyl2360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2360, d)
			}
		} else if yyct2360 == codecSelferValueTypeArray1234 {
			yyl2360 := r.ReadArrayStart()
			if yyl2360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2361Slc
	var yyhl2361 bool = l >= 0
	for yyj2361 := 0; ; yyj2361++ {
		if yyhl2361 {
			if yyj2361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2361Slc = r.DecodeBytes(yys2361Slc, true, true)
		yys2361 := string(yys2361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2361 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2362 := &x.ObjectMeta
				yyv2362.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2363 := &x.Secrets
				yym2364 := z.DecBinary()
				_ = yym2364
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2363), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2365 := &x.ImagePullSecrets
				yym2366 := z.DecBinary()
				_ = yym2366
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2365), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2361)
		} // end switch yys2361
	} // end for yyj2361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2369 int
	var yyb2369 bool
	var yyhl2369 bool = l >= 0
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2370 := &x.ObjectMeta
		yyv2370.CodecDecodeSelf(d)
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2371 := &x.Secrets
		yym2372 := z.DecBinary()
		_ = yym2372
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2371), d)
		}
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2373 := &x.ImagePullSecrets
		yym2374 := z.DecBinary()
		_ = yym2374
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2373), d)
		}
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2369++
		if yyhl2369 {
			yyb2369 = yyj2369 > l
		} else {
			yyb2369 = r.CheckBreak()
		}
		if yyb2369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2377 := z.EncBinary()
		_ = yym2377
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2378 := !z.EncBinary()
			yy2arr2378 := z.EncBasicHandle().StructToArray
			var yyq2378 [4]bool
			_, _, _ = yysep2378, yyq2378, yy2arr2378
			const yyr2378 bool = false
			yyq2378[0] = true
			yyq2378[2] = x.Kind != ""
			yyq2378[3] = x.APIVersion != ""
			var yynn2378 int
			if yyr2378 || yy2arr2378 {
				r.EncodeArrayStart(4)
			} else {
				yynn2378 = 1
				for _, b := range yyq2378 {
					if b {
						yynn2378++
					}
				}
				r.EncodeMapStart(yynn2378)
				yynn2378 = 0
			}
			if yyr2378 || yy2arr2378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2378[0] {
					yy2380 := &x.ListMeta
					yym2381 := z.EncBinary()
					_ = yym2381
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2380) {
					} else {
						z.EncFallback(yy2380)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2378[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2382 := &x.ListMeta
					yym2383 := z.EncBinary()
					_ = yym2383
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2382) {
					} else {
						z.EncFallback(yy2382)
					}
				}
			}
			if yyr2378 || yy2arr2378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2385 := z.EncBinary()
					_ = yym2385
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2386 := z.EncBinary()
					_ = yym2386
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2378 || yy2arr2378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2378[2] {
					yym2388 := z.EncBinary()
					_ = yym2388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2378[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2389 := z.EncBinary()
					_ = yym2389
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2378 || yy2arr2378 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2378[3] {
					yym2391 := z.EncBinary()
					_ = yym2391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2378[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2392 := z.EncBinary()
					_ = yym2392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2378 || yy2arr2378 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2393 := z.DecBinary()
	_ = yym2393
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2394 := r.ContainerType()
		if yyct2394 == codecSelferValueTypeMap1234 {
			yyl2394 := r.ReadMapStart()
			if yyl2394 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2394, d)
			}
		} else if yyct2394 == codecSelferValueTypeArray1234 {
			yyl2394 := r.ReadArrayStart()
			if yyl2394 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2394, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2395Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2395Slc
	var yyhl2395 bool = l >= 0
	for yyj2395 := 0; ; yyj2395++ {
		if yyhl2395 {
			if yyj2395 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2395Slc = r.DecodeBytes(yys2395Slc, true, true)
		yys2395 := string(yys2395Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2395 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2396 := &x.ListMeta
				yym2397 := z.DecBinary()
				_ = yym2397
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2396) {
				} else {
					z.DecFallback(yyv2396, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2398 := &x.Items
				yym2399 := z.DecBinary()
				_ = yym2399
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2398), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2395)
		} // end switch yys2395
	} // end for yyj2395
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2402 int
	var yyb2402 bool
	var yyhl2402 bool = l >= 0
	yyj2402++
	if yyhl2402 {
		yyb2402 = yyj2402 > l
	} else {
		yyb2402 = r.CheckBreak()
	}
	if yyb2402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2403 := &x.ListMeta
		yym2404 := z.DecBinary()
		_ = yym2404
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2403) {
		} else {
			z.DecFallback(yyv2403, false)
		}
	}
	yyj2402++
	if yyhl2402 {
		yyb2402 = yyj2402 > l
	} else {
		yyb2402 = r.CheckBreak()
	}
	if yyb2402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2405 := &x.Items
		yym2406 := z.DecBinary()
		_ = yym2406
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2405), d)
		}
	}
	yyj2402++
	if yyhl2402 {
		yyb2402 = yyj2402 > l
	} else {
		yyb2402 = r.CheckBreak()
	}
	if yyb2402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2402++
	if yyhl2402 {
		yyb2402 = yyj2402 > l
	} else {
		yyb2402 = r.CheckBreak()
	}
	if yyb2402 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2402++
		if yyhl2402 {
			yyb2402 = yyj2402 > l
		} else {
			yyb2402 = r.CheckBreak()
		}
		if yyb2402 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2402-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2409 := z.EncBinary()
		_ = yym2409
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2410 := !z.EncBinary()
			yy2arr2410 := z.EncBasicHandle().StructToArray
			var yyq2410 [4]bool
			_, _, _ = yysep2410, yyq2410, yy2arr2410
			const yyr2410 bool = false
			yyq2410[0] = true
			yyq2410[2] = x.Kind != ""
			yyq2410[3] = x.APIVersion != ""
			var yynn2410 int
			if yyr2410 || yy2arr2410 {
				r.EncodeArrayStart(4)
			} else {
				yynn2410 = 1
				for _, b := range yyq2410 {
					if b {
						yynn2410++
					}
				}
				r.EncodeMapStart(yynn2410)
				yynn2410 = 0
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[0] {
					yy2412 := &x.ObjectMeta
					yy2412.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2410[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2413 := &x.ObjectMeta
					yy2413.CodecEncodeSelf(e)
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[2] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2410[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2410[3] {
					yym2421 := z.EncBinary()
					_ = yym2421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2410[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2422 := z.EncBinary()
					_ = yym2422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2410 || yy2arr2410 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2423 := z.DecBinary()
	_ = yym2423
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2424 := r.ContainerType()
		if yyct2424 == codecSelferValueTypeMap1234 {
			yyl2424 := r.ReadMapStart()
			if yyl2424 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2424, d)
			}
		} else if yyct2424 == codecSelferValueTypeArray1234 {
			yyl2424 := r.ReadArrayStart()
			if yyl2424 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2424, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2425Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2425Slc
	var yyhl2425 bool = l >= 0
	for yyj2425 := 0; ; yyj2425++ {
		if yyhl2425 {
			if yyj2425 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2425Slc = r.DecodeBytes(yys2425Slc, true, true)
		yys2425 := string(yys2425Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2425 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2426 := &x.ObjectMeta
				yyv2426.CodecDecodeSelf(d)
			}
		case "subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2427 := &x.Subsets
				yym2428 := z.DecBinary()
				_ = yym2428
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2427), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2425)
		} // end switch yys2425
	} // end for yyj2425
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2431 int
	var yyb2431 bool
	var yyhl2431 bool = l >= 0
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2432 := &x.ObjectMeta
		yyv2432.CodecDecodeSelf(d)
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2433 := &x.Subsets
		yym2434 := z.DecBinary()
		_ = yym2434
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2433), d)
		}
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2431++
	if yyhl2431 {
		yyb2431 = yyj2431 > l
	} else {
		yyb2431 = r.CheckBreak()
	}
	if yyb2431 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2431++
		if yyhl2431 {
			yyb2431 = yyj2431 > l
		} else {
			yyb2431 = r.CheckBreak()
		}
		if yyb2431 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2431-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2437 := z.EncBinary()
		_ = yym2437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2438 := !z.EncBinary()
			yy2arr2438 := z.EncBasicHandle().StructToArray
			var yyq2438 [3]bool
			_, _, _ = yysep2438, yyq2438, yy2arr2438
			const yyr2438 bool = false
			yyq2438[0] = len(x.Addresses) != 0
			yyq2438[1] = len(x.NotReadyAddresses) != 0
			yyq2438[2] = len(x.Ports) != 0
			var yynn2438 int
			if yyr2438 || yy2arr2438 {
				r.EncodeArrayStart(3)
			} else {
				yynn2438 = 0
				for _, b := range yyq2438 {
					if b {
						yynn2438++
					}
				}
				r.EncodeMapStart(yynn2438)
				yynn2438 = 0
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[0] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2440 := z.EncBinary()
						_ = yym2440
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2441 := z.EncBinary()
						_ = yym2441
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[1] {
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2443 := z.EncBinary()
						_ = yym2443
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("notReadyAddresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NotReadyAddresses == nil {
						r.EncodeNil()
					} else {
						yym2444 := z.EncBinary()
						_ = yym2444
						if false {
						} else {
							h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
						}
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2438[2] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2446 := z.EncBinary()
						_ = yym2446
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym2447 := z.EncBinary()
						_ = yym2447
						if false {
						} else {
							h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr2438 || yy2arr2438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2448 := z.DecBinary()
	_ = yym2448
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2449 := r.ContainerType()
		if yyct2449 == codecSelferValueTypeMap1234 {
			yyl2449 := r.ReadMapStart()
			if yyl2449 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2449, d)
			}
		} else if yyct2449 == codecSelferValueTypeArray1234 {
			yyl2449 := r.ReadArrayStart()
			if yyl2449 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2449, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2450Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2450Slc
	var yyhl2450 bool = l >= 0
	for yyj2450 := 0; ; yyj2450++ {
		if yyhl2450 {
			if yyj2450 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2450Slc = r.DecodeBytes(yys2450Slc, true, true)
		yys2450 := string(yys2450Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2450 {
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2451 := &x.Addresses
				yym2452 := z.DecBinary()
				_ = yym2452
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2451), d)
				}
			}
		case "notReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2453 := &x.NotReadyAddresses
				yym2454 := z.DecBinary()
				_ = yym2454
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2453), d)
				}
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2455 := &x.Ports
				yym2456 := z.DecBinary()
				_ = yym2456
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2450)
		} // end switch yys2450
	} // end for yyj2450
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2457 int
	var yyb2457 bool
	var yyhl2457 bool = l >= 0
	yyj2457++
	if yyhl2457 {
		yyb2457 = yyj2457 > l
	} else {
		yyb2457 = r.CheckBreak()
	}
	if yyb2457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2458 := &x.Addresses
		yym2459 := z.DecBinary()
		_ = yym2459
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2458), d)
		}
	}
	yyj2457++
	if yyhl2457 {
		yyb2457 = yyj2457 > l
	} else {
		yyb2457 = r.CheckBreak()
	}
	if yyb2457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2460 := &x.NotReadyAddresses
		yym2461 := z.DecBinary()
		_ = yym2461
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2460), d)
		}
	}
	yyj2457++
	if yyhl2457 {
		yyb2457 = yyj2457 > l
	} else {
		yyb2457 = r.CheckBreak()
	}
	if yyb2457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2462 := &x.Ports
		yym2463 := z.DecBinary()
		_ = yym2463
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2462), d)
		}
	}
	for {
		yyj2457++
		if yyhl2457 {
			yyb2457 = yyj2457 > l
		} else {
			yyb2457 = r.CheckBreak()
		}
		if yyb2457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2464 := z.EncBinary()
		_ = yym2464
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2465 := !z.EncBinary()
			yy2arr2465 := z.EncBasicHandle().StructToArray
			var yyq2465 [2]bool
			_, _, _ = yysep2465, yyq2465, yy2arr2465
			const yyr2465 bool = false
			yyq2465[1] = x.TargetRef != nil
			var yynn2465 int
			if yyr2465 || yy2arr2465 {
				r.EncodeArrayStart(2)
			} else {
				yynn2465 = 1
				for _, b := range yyq2465 {
					if b {
						yynn2465++
					}
				}
				r.EncodeMapStart(yynn2465)
				yynn2465 = 0
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2467 := z.EncBinary()
				_ = yym2467
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ip"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2468 := z.EncBinary()
				_ = yym2468
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2465[1] {
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2465[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetRef == nil {
						r.EncodeNil()
					} else {
						x.TargetRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2465 || yy2arr2465 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2470 := z.DecBinary()
	_ = yym2470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2471 := r.ContainerType()
		if yyct2471 == codecSelferValueTypeMap1234 {
			yyl2471 := r.ReadMapStart()
			if yyl2471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2471, d)
			}
		} else if yyct2471 == codecSelferValueTypeArray1234 {
			yyl2471 := r.ReadArrayStart()
			if yyl2471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2472Slc
	var yyhl2472 bool = l >= 0
	for yyj2472 := 0; ; yyj2472++ {
		if yyhl2472 {
			if yyj2472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2472Slc = r.DecodeBytes(yys2472Slc, true, true)
		yys2472 := string(yys2472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2472 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "targetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2472)
		} // end switch yys2472
	} // end for yyj2472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2475 int
	var yyb2475 bool
	var yyhl2475 bool = l >= 0
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2475++
	if yyhl2475 {
		yyb2475 = yyj2475 > l
	} else {
		yyb2475 = r.CheckBreak()
	}
	if yyb2475 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2475++
		if yyhl2475 {
			yyb2475 = yyj2475 > l
		} else {
			yyb2475 = r.CheckBreak()
		}
		if yyb2475 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2475-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2478 := z.EncBinary()
		_ = yym2478
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2479 := !z.EncBinary()
			yy2arr2479 := z.EncBasicHandle().StructToArray
			var yyq2479 [3]bool
			_, _, _ = yysep2479, yyq2479, yy2arr2479
			const yyr2479 bool = false
			yyq2479[0] = x.Name != ""
			yyq2479[2] = x.Protocol != ""
			var yynn2479 int
			if yyr2479 || yy2arr2479 {
				r.EncodeArrayStart(3)
			} else {
				yynn2479 = 1
				for _, b := range yyq2479 {
					if b {
						yynn2479++
					}
				}
				r.EncodeMapStart(yynn2479)
				yynn2479 = 0
			}
			if yyr2479 || yy2arr2479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2479[0] {
					yym2481 := z.EncBinary()
					_ = yym2481
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2479[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2482 := z.EncBinary()
					_ = yym2482
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2479 || yy2arr2479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2484 := z.EncBinary()
				_ = yym2484
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2485 := z.EncBinary()
				_ = yym2485
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2479 || yy2arr2479 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2479[2] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2479[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr2479 || yy2arr2479 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2487 := z.DecBinary()
	_ = yym2487
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2488 := r.ContainerType()
		if yyct2488 == codecSelferValueTypeMap1234 {
			yyl2488 := r.ReadMapStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2488, d)
			}
		} else if yyct2488 == codecSelferValueTypeArray1234 {
			yyl2488 := r.ReadArrayStart()
			if yyl2488 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2488, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2489Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2489Slc
	var yyhl2489 bool = l >= 0
	for yyj2489 := 0; ; yyj2489++ {
		if yyhl2489 {
			if yyj2489 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2489Slc = r.DecodeBytes(yys2489Slc, true, true)
		yys2489 := string(yys2489Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2489 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2489)
		} // end switch yys2489
	} // end for yyj2489
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2493 int
	var yyb2493 bool
	var yyhl2493 bool = l >= 0
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2493++
		if yyhl2493 {
			yyb2493 = yyj2493 > l
		} else {
			yyb2493 = r.CheckBreak()
		}
		if yyb2493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2497 := z.EncBinary()
		_ = yym2497
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2498 := !z.EncBinary()
			yy2arr2498 := z.EncBasicHandle().StructToArray
			var yyq2498 [4]bool
			_, _, _ = yysep2498, yyq2498, yy2arr2498
			const yyr2498 bool = false
			yyq2498[0] = true
			yyq2498[2] = x.Kind != ""
			yyq2498[3] = x.APIVersion != ""
			var yynn2498 int
			if yyr2498 || yy2arr2498 {
				r.EncodeArrayStart(4)
			} else {
				yynn2498 = 1
				for _, b := range yyq2498 {
					if b {
						yynn2498++
					}
				}
				r.EncodeMapStart(yynn2498)
				yynn2498 = 0
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[0] {
					yy2500 := &x.ListMeta
					yym2501 := z.EncBinary()
					_ = yym2501
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2500) {
					} else {
						z.EncFallback(yy2500)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2498[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2502 := &x.ListMeta
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2502) {
					} else {
						z.EncFallback(yy2502)
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2506 := z.EncBinary()
					_ = yym2506
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[2] {
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2498[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2509 := z.EncBinary()
					_ = yym2509
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2498[3] {
					yym2511 := z.EncBinary()
					_ = yym2511
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2498[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2512 := z.EncBinary()
					_ = yym2512
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2498 || yy2arr2498 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2513 := z.DecBinary()
	_ = yym2513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2514 := r.ContainerType()
		if yyct2514 == codecSelferValueTypeMap1234 {
			yyl2514 := r.ReadMapStart()
			if yyl2514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2514, d)
			}
		} else if yyct2514 == codecSelferValueTypeArray1234 {
			yyl2514 := r.ReadArrayStart()
			if yyl2514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2515Slc
	var yyhl2515 bool = l >= 0
	for yyj2515 := 0; ; yyj2515++ {
		if yyhl2515 {
			if yyj2515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2515Slc = r.DecodeBytes(yys2515Slc, true, true)
		yys2515 := string(yys2515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2515 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2516 := &x.ListMeta
				yym2517 := z.DecBinary()
				_ = yym2517
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2516) {
				} else {
					z.DecFallback(yyv2516, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2518 := &x.Items
				yym2519 := z.DecBinary()
				_ = yym2519
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2518), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2515)
		} // end switch yys2515
	} // end for yyj2515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2522 int
	var yyb2522 bool
	var yyhl2522 bool = l >= 0
	yyj2522++
	if yyhl2522 {
		yyb2522 = yyj2522 > l
	} else {
		yyb2522 = r.CheckBreak()
	}
	if yyb2522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2523 := &x.ListMeta
		yym2524 := z.DecBinary()
		_ = yym2524
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2523) {
		} else {
			z.DecFallback(yyv2523, false)
		}
	}
	yyj2522++
	if yyhl2522 {
		yyb2522 = yyj2522 > l
	} else {
		yyb2522 = r.CheckBreak()
	}
	if yyb2522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2525 := &x.Items
		yym2526 := z.DecBinary()
		_ = yym2526
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2525), d)
		}
	}
	yyj2522++
	if yyhl2522 {
		yyb2522 = yyj2522 > l
	} else {
		yyb2522 = r.CheckBreak()
	}
	if yyb2522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2522++
	if yyhl2522 {
		yyb2522 = yyj2522 > l
	} else {
		yyb2522 = r.CheckBreak()
	}
	if yyb2522 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2522++
		if yyhl2522 {
			yyb2522 = yyj2522 > l
		} else {
			yyb2522 = r.CheckBreak()
		}
		if yyb2522 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2522-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2529 := z.EncBinary()
		_ = yym2529
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2530 := !z.EncBinary()
			yy2arr2530 := z.EncBasicHandle().StructToArray
			var yyq2530 [4]bool
			_, _, _ = yysep2530, yyq2530, yy2arr2530
			const yyr2530 bool = false
			yyq2530[0] = x.PodCIDR != ""
			yyq2530[1] = x.ExternalID != ""
			yyq2530[2] = x.ProviderID != ""
			yyq2530[3] = x.Unschedulable != false
			var yynn2530 int
			if yyr2530 || yy2arr2530 {
				r.EncodeArrayStart(4)
			} else {
				yynn2530 = 0
				for _, b := range yyq2530 {
					if b {
						yynn2530++
					}
				}
				r.EncodeMapStart(yynn2530)
				yynn2530 = 0
			}
			if yyr2530 || yy2arr2530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2530[0] {
					yym2532 := z.EncBinary()
					_ = yym2532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2530[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2533 := z.EncBinary()
					_ = yym2533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2530 || yy2arr2530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2530[1] {
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2530[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2530 || yy2arr2530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2530[2] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2530[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2530 || yy2arr2530 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2530[3] {
					yym2541 := z.EncBinary()
					_ = yym2541
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2530[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2530 || yy2arr2530 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2543 := z.DecBinary()
	_ = yym2543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2544 := r.ContainerType()
		if yyct2544 == codecSelferValueTypeMap1234 {
			yyl2544 := r.ReadMapStart()
			if yyl2544 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2544, d)
			}
		} else if yyct2544 == codecSelferValueTypeArray1234 {
			yyl2544 := r.ReadArrayStart()
			if yyl2544 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2544, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2545Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2545Slc
	var yyhl2545 bool = l >= 0
	for yyj2545 := 0; ; yyj2545++ {
		if yyhl2545 {
			if yyj2545 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2545Slc = r.DecodeBytes(yys2545Slc, true, true)
		yys2545 := string(yys2545Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2545 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2545)
		} // end switch yys2545
	} // end for yyj2545
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2550 int
	var yyb2550 bool
	var yyhl2550 bool = l >= 0
	yyj2550++
	if yyhl2550 {
		yyb2550 = yyj2550 > l
	} else {
		yyb2550 = r.CheckBreak()
	}
	if yyb2550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2550++
	if yyhl2550 {
		yyb2550 = yyj2550 > l
	} else {
		yyb2550 = r.CheckBreak()
	}
	if yyb2550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2550++
	if yyhl2550 {
		yyb2550 = yyj2550 > l
	} else {
		yyb2550 = r.CheckBreak()
	}
	if yyb2550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2550++
	if yyhl2550 {
		yyb2550 = yyj2550 > l
	} else {
		yyb2550 = r.CheckBreak()
	}
	if yyb2550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2550++
		if yyhl2550 {
			yyb2550 = yyj2550 > l
		} else {
			yyb2550 = r.CheckBreak()
		}
		if yyb2550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2555 := z.EncBinary()
		_ = yym2555
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2556 := !z.EncBinary()
			yy2arr2556 := z.EncBasicHandle().StructToArray
			var yyq2556 [1]bool
			_, _, _ = yysep2556, yyq2556, yy2arr2556
			const yyr2556 bool = false
			var yynn2556 int
			if yyr2556 || yy2arr2556 {
				r.EncodeArrayStart(1)
			} else {
				yynn2556 = 1
				for _, b := range yyq2556 {
					if b {
						yynn2556++
					}
				}
				r.EncodeMapStart(yynn2556)
				yynn2556 = 0
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2558 := z.EncBinary()
				_ = yym2558
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2559 := z.EncBinary()
				_ = yym2559
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2556 || yy2arr2556 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2560 := z.DecBinary()
	_ = yym2560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2561 := r.ContainerType()
		if yyct2561 == codecSelferValueTypeMap1234 {
			yyl2561 := r.ReadMapStart()
			if yyl2561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2561, d)
			}
		} else if yyct2561 == codecSelferValueTypeArray1234 {
			yyl2561 := r.ReadArrayStart()
			if yyl2561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2562Slc
	var yyhl2562 bool = l >= 0
	for yyj2562 := 0; ; yyj2562++ {
		if yyhl2562 {
			if yyj2562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2562Slc = r.DecodeBytes(yys2562Slc, true, true)
		yys2562 := string(yys2562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2562 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2562)
		} // end switch yys2562
	} // end for yyj2562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2564 int
	var yyb2564 bool
	var yyhl2564 bool = l >= 0
	yyj2564++
	if yyhl2564 {
		yyb2564 = yyj2564 > l
	} else {
		yyb2564 = r.CheckBreak()
	}
	if yyb2564 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2564++
		if yyhl2564 {
			yyb2564 = yyj2564 > l
		} else {
			yyb2564 = r.CheckBreak()
		}
		if yyb2564 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2564-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2566 := z.EncBinary()
		_ = yym2566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2567 := !z.EncBinary()
			yy2arr2567 := z.EncBasicHandle().StructToArray
			var yyq2567 [1]bool
			_, _, _ = yysep2567, yyq2567, yy2arr2567
			const yyr2567 bool = false
			yyq2567[0] = true
			var yynn2567 int
			if yyr2567 || yy2arr2567 {
				r.EncodeArrayStart(1)
			} else {
				yynn2567 = 0
				for _, b := range yyq2567 {
					if b {
						yynn2567++
					}
				}
				r.EncodeMapStart(yynn2567)
				yynn2567 = 0
			}
			if yyr2567 || yy2arr2567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2567[0] {
					yy2569 := &x.KubeletEndpoint
					yy2569.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2570 := &x.KubeletEndpoint
					yy2570.CodecEncodeSelf(e)
				}
			}
			if yyr2567 || yy2arr2567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2571 := z.DecBinary()
	_ = yym2571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2572 := r.ContainerType()
		if yyct2572 == codecSelferValueTypeMap1234 {
			yyl2572 := r.ReadMapStart()
			if yyl2572 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2572, d)
			}
		} else if yyct2572 == codecSelferValueTypeArray1234 {
			yyl2572 := r.ReadArrayStart()
			if yyl2572 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2572, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2573Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2573Slc
	var yyhl2573 bool = l >= 0
	for yyj2573 := 0; ; yyj2573++ {
		if yyhl2573 {
			if yyj2573 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2573Slc = r.DecodeBytes(yys2573Slc, true, true)
		yys2573 := string(yys2573Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2573 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2574 := &x.KubeletEndpoint
				yyv2574.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2573)
		} // end switch yys2573
	} // end for yyj2573
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2575 int
	var yyb2575 bool
	var yyhl2575 bool = l >= 0
	yyj2575++
	if yyhl2575 {
		yyb2575 = yyj2575 > l
	} else {
		yyb2575 = r.CheckBreak()
	}
	if yyb2575 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2576 := &x.KubeletEndpoint
		yyv2576.CodecDecodeSelf(d)
	}
	for {
		yyj2575++
		if yyhl2575 {
			yyb2575 = yyj2575 > l
		} else {
			yyb2575 = r.CheckBreak()
		}
		if yyb2575 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2575-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2577 := z.EncBinary()
		_ = yym2577
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2578 := !z.EncBinary()
			yy2arr2578 := z.EncBasicHandle().StructToArray
			var yyq2578 [8]bool
			_, _, _ = yysep2578, yyq2578, yy2arr2578
			const yyr2578 bool = false
			var yynn2578 int
			if yyr2578 || yy2arr2578 {
				r.EncodeArrayStart(8)
			} else {
				yynn2578 = 8
				for _, b := range yyq2578 {
					if b {
						yynn2578++
					}
				}
				r.EncodeMapStart(yynn2578)
				yynn2578 = 0
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2580 := z.EncBinary()
				_ = yym2580
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2581 := z.EncBinary()
				_ = yym2581
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2583 := z.EncBinary()
				_ = yym2583
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2584 := z.EncBinary()
				_ = yym2584
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2586 := z.EncBinary()
				_ = yym2586
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2587 := z.EncBinary()
				_ = yym2587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2589 := z.EncBinary()
				_ = yym2589
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2590 := z.EncBinary()
				_ = yym2590
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2592 := z.EncBinary()
				_ = yym2592
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2593 := z.EncBinary()
				_ = yym2593
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2595 := z.EncBinary()
				_ = yym2595
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2596 := z.EncBinary()
				_ = yym2596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2598 := z.EncBinary()
				_ = yym2598
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2599 := z.EncBinary()
				_ = yym2599
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2601 := z.EncBinary()
				_ = yym2601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2602 := z.EncBinary()
				_ = yym2602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2578 || yy2arr2578 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2603 := z.DecBinary()
	_ = yym2603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2604 := r.ContainerType()
		if yyct2604 == codecSelferValueTypeMap1234 {
			yyl2604 := r.ReadMapStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2604, d)
			}
		} else if yyct2604 == codecSelferValueTypeArray1234 {
			yyl2604 := r.ReadArrayStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2605Slc
	var yyhl2605 bool = l >= 0
	for yyj2605 := 0; ; yyj2605++ {
		if yyhl2605 {
			if yyj2605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2605Slc = r.DecodeBytes(yys2605Slc, true, true)
		yys2605 := string(yys2605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2605 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2605)
		} // end switch yys2605
	} // end for yyj2605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2614 int
	var yyb2614 bool
	var yyhl2614 bool = l >= 0
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2614++
	if yyhl2614 {
		yyb2614 = yyj2614 > l
	} else {
		yyb2614 = r.CheckBreak()
	}
	if yyb2614 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2614++
		if yyhl2614 {
			yyb2614 = yyj2614 > l
		} else {
			yyb2614 = r.CheckBreak()
		}
		if yyb2614 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2614-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2623 := z.EncBinary()
		_ = yym2623
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2624 := !z.EncBinary()
			yy2arr2624 := z.EncBasicHandle().StructToArray
			var yyq2624 [8]bool
			_, _, _ = yysep2624, yyq2624, yy2arr2624
			const yyr2624 bool = false
			yyq2624[0] = len(x.Capacity) != 0
			yyq2624[1] = len(x.Allocatable) != 0
			yyq2624[2] = x.Phase != ""
			yyq2624[3] = len(x.Conditions) != 0
			yyq2624[4] = len(x.Addresses) != 0
			yyq2624[5] = true
			yyq2624[6] = true
			var yynn2624 int
			if yyr2624 || yy2arr2624 {
				r.EncodeArrayStart(8)
			} else {
				yynn2624 = 1
				for _, b := range yyq2624 {
					if b {
						yynn2624++
					}
				}
				r.EncodeMapStart(yynn2624)
				yynn2624 = 0
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2624[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2629 := z.EncBinary()
						_ = yym2629
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2630 := z.EncBinary()
						_ = yym2630
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2632 := z.EncBinary()
						_ = yym2632
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2633 := z.EncBinary()
						_ = yym2633
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[5] {
					yy2635 := &x.DaemonEndpoints
					yy2635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2636 := &x.DaemonEndpoints
					yy2636.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2624[6] {
					yy2638 := &x.NodeInfo
					yy2638.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2624[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2639 := &x.NodeInfo
					yy2639.CodecEncodeSelf(e)
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2641 := z.EncBinary()
					_ = yym2641
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("images"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Images == nil {
					r.EncodeNil()
				} else {
					yym2642 := z.EncBinary()
					_ = yym2642
					if false {
					} else {
						h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
					}
				}
			}
			if yyr2624 || yy2arr2624 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2643 := z.DecBinary()
	_ = yym2643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2644 := r.ContainerType()
		if yyct2644 == codecSelferValueTypeMap1234 {
			yyl2644 := r.ReadMapStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2644, d)
			}
		} else if yyct2644 == codecSelferValueTypeArray1234 {
			yyl2644 := r.ReadArrayStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2645Slc
	var yyhl2645 bool = l >= 0
	for yyj2645 := 0; ; yyj2645++ {
		if yyhl2645 {
			if yyj2645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2645Slc = r.DecodeBytes(yys2645Slc, true, true)
		yys2645 := string(yys2645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2645 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2646 := &x.Capacity
				yyv2646.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2647 := &x.Allocatable
				yyv2647.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2649 := &x.Conditions
				yym2650 := z.DecBinary()
				_ = yym2650
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2649), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2651 := &x.Addresses
				yym2652 := z.DecBinary()
				_ = yym2652
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2651), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2653 := &x.DaemonEndpoints
				yyv2653.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2654 := &x.NodeInfo
				yyv2654.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2655 := &x.Images
				yym2656 := z.DecBinary()
				_ = yym2656
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2655), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2645)
		} // end switch yys2645
	} // end for yyj2645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2657 int
	var yyb2657 bool
	var yyhl2657 bool = l >= 0
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2658 := &x.Capacity
		yyv2658.CodecDecodeSelf(d)
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2659 := &x.Allocatable
		yyv2659.CodecDecodeSelf(d)
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2661 := &x.Conditions
		yym2662 := z.DecBinary()
		_ = yym2662
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2661), d)
		}
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2663 := &x.Addresses
		yym2664 := z.DecBinary()
		_ = yym2664
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2663), d)
		}
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2665 := &x.DaemonEndpoints
		yyv2665.CodecDecodeSelf(d)
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2666 := &x.NodeInfo
		yyv2666.CodecDecodeSelf(d)
	}
	yyj2657++
	if yyhl2657 {
		yyb2657 = yyj2657 > l
	} else {
		yyb2657 = r.CheckBreak()
	}
	if yyb2657 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2667 := &x.Images
		yym2668 := z.DecBinary()
		_ = yym2668
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2667), d)
		}
	}
	for {
		yyj2657++
		if yyhl2657 {
			yyb2657 = yyj2657 > l
		} else {
			yyb2657 = r.CheckBreak()
		}
		if yyb2657 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2657-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2669 := z.EncBinary()
		_ = yym2669
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2670 := !z.EncBinary()
			yy2arr2670 := z.EncBasicHandle().StructToArray
			var yyq2670 [2]bool
			_, _, _ = yysep2670, yyq2670, yy2arr2670
			const yyr2670 bool = false
			yyq2670[1] = x.Size != 0
			var yynn2670 int
			if yyr2670 || yy2arr2670 {
				r.EncodeArrayStart(2)
			} else {
				yynn2670 = 1
				for _, b := range yyq2670 {
					if b {
						yynn2670++
					}
				}
				r.EncodeMapStart(yynn2670)
				yynn2670 = 0
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2672 := z.EncBinary()
					_ = yym2672
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repoTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.RepoTags == nil {
					r.EncodeNil()
				} else {
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else {
						z.F.EncSliceStringV(x.RepoTags, false, e)
					}
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2670[1] {
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2670[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("size"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						r.EncodeInt(int64(x.Size))
					}
				}
			}
			if yyr2670 || yy2arr2670 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2677 := z.DecBinary()
	_ = yym2677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2678 := r.ContainerType()
		if yyct2678 == codecSelferValueTypeMap1234 {
			yyl2678 := r.ReadMapStart()
			if yyl2678 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2678, d)
			}
		} else if yyct2678 == codecSelferValueTypeArray1234 {
			yyl2678 := r.ReadArrayStart()
			if yyl2678 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2679Slc
	var yyhl2679 bool = l >= 0
	for yyj2679 := 0; ; yyj2679++ {
		if yyhl2679 {
			if yyj2679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2679Slc = r.DecodeBytes(yys2679Slc, true, true)
		yys2679 := string(yys2679Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2679 {
		case "repoTags":
			if r.TryDecodeAsNil() {
				x.RepoTags = nil
			} else {
				yyv2680 := &x.RepoTags
				yym2681 := z.DecBinary()
				_ = yym2681
				if false {
				} else {
					z.F.DecSliceStringX(yyv2680, false, d)
				}
			}
		case "size":
			if r.TryDecodeAsNil() {
				x.Size = 0
			} else {
				x.Size = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2679)
		} // end switch yys2679
	} // end for yyj2679
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2683 int
	var yyb2683 bool
	var yyhl2683 bool = l >= 0
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RepoTags = nil
	} else {
		yyv2684 := &x.RepoTags
		yym2685 := z.DecBinary()
		_ = yym2685
		if false {
		} else {
			z.F.DecSliceStringX(yyv2684, false, d)
		}
	}
	yyj2683++
	if yyhl2683 {
		yyb2683 = yyj2683 > l
	} else {
		yyb2683 = r.CheckBreak()
	}
	if yyb2683 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Size = 0
	} else {
		x.Size = int64(r.DecodeInt(64))
	}
	for {
		yyj2683++
		if yyhl2683 {
			yyb2683 = yyj2683 > l
		} else {
			yyb2683 = r.CheckBreak()
		}
		if yyb2683 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2683-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2687 := z.EncBinary()
	_ = yym2687
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2688 := z.DecBinary()
	_ = yym2688
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2689 := z.EncBinary()
	_ = yym2689
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2690 := z.DecBinary()
	_ = yym2690
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2691 := z.EncBinary()
		_ = yym2691
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2692 := !z.EncBinary()
			yy2arr2692 := z.EncBasicHandle().StructToArray
			var yyq2692 [6]bool
			_, _, _ = yysep2692, yyq2692, yy2arr2692
			const yyr2692 bool = false
			yyq2692[2] = true
			yyq2692[3] = true
			yyq2692[4] = x.Reason != ""
			yyq2692[5] = x.Message != ""
			var yynn2692 int
			if yyr2692 || yy2arr2692 {
				r.EncodeArrayStart(6)
			} else {
				yynn2692 = 2
				for _, b := range yyq2692 {
					if b {
						yynn2692++
					}
				}
				r.EncodeMapStart(yynn2692)
				yynn2692 = 0
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2692[2] {
					yy2696 := &x.LastHeartbeatTime
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2696) {
					} else if yym2697 {
						z.EncBinaryMarshal(yy2696)
					} else if !yym2697 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2696)
					} else {
						z.EncFallback(yy2696)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2692[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2698 := &x.LastHeartbeatTime
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2698) {
					} else if yym2699 {
						z.EncBinaryMarshal(yy2698)
					} else if !yym2699 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2698)
					} else {
						z.EncFallback(yy2698)
					}
				}
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2692[3] {
					yy2701 := &x.LastTransitionTime
					yym2702 := z.EncBinary()
					_ = yym2702
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2701) {
					} else if yym2702 {
						z.EncBinaryMarshal(yy2701)
					} else if !yym2702 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2701)
					} else {
						z.EncFallback(yy2701)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2692[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2703 := &x.LastTransitionTime
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2703) {
					} else if yym2704 {
						z.EncBinaryMarshal(yy2703)
					} else if !yym2704 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2703)
					} else {
						z.EncFallback(yy2703)
					}
				}
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2692[4] {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2692[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2692[5] {
					yym2709 := z.EncBinary()
					_ = yym2709
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2692[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2710 := z.EncBinary()
					_ = yym2710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2692 || yy2arr2692 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2711 := z.DecBinary()
	_ = yym2711
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2712 := r.ContainerType()
		if yyct2712 == codecSelferValueTypeMap1234 {
			yyl2712 := r.ReadMapStart()
			if yyl2712 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2712, d)
			}
		} else if yyct2712 == codecSelferValueTypeArray1234 {
			yyl2712 := r.ReadArrayStart()
			if yyl2712 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2712, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2713Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2713Slc
	var yyhl2713 bool = l >= 0
	for yyj2713 := 0; ; yyj2713++ {
		if yyhl2713 {
			if yyj2713 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2713Slc = r.DecodeBytes(yys2713Slc, true, true)
		yys2713 := string(yys2713Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2713 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2716 := &x.LastHeartbeatTime
				yym2717 := z.DecBinary()
				_ = yym2717
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2716) {
				} else if yym2717 {
					z.DecBinaryUnmarshal(yyv2716)
				} else if !yym2717 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2716)
				} else {
					z.DecFallback(yyv2716, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2718 := &x.LastTransitionTime
				yym2719 := z.DecBinary()
				_ = yym2719
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2718) {
				} else if yym2719 {
					z.DecBinaryUnmarshal(yyv2718)
				} else if !yym2719 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2718)
				} else {
					z.DecFallback(yyv2718, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2713)
		} // end switch yys2713
	} // end for yyj2713
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2722 int
	var yyb2722 bool
	var yyhl2722 bool = l >= 0
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2725 := &x.LastHeartbeatTime
		yym2726 := z.DecBinary()
		_ = yym2726
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2725) {
		} else if yym2726 {
			z.DecBinaryUnmarshal(yyv2725)
		} else if !yym2726 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2725)
		} else {
			z.DecFallback(yyv2725, false)
		}
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2727 := &x.LastTransitionTime
		yym2728 := z.DecBinary()
		_ = yym2728
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2727) {
		} else if yym2728 {
			z.DecBinaryUnmarshal(yyv2727)
		} else if !yym2728 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2727)
		} else {
			z.DecFallback(yyv2727, false)
		}
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2722++
	if yyhl2722 {
		yyb2722 = yyj2722 > l
	} else {
		yyb2722 = r.CheckBreak()
	}
	if yyb2722 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2722++
		if yyhl2722 {
			yyb2722 = yyj2722 > l
		} else {
			yyb2722 = r.CheckBreak()
		}
		if yyb2722 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2722-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2731 := z.EncBinary()
	_ = yym2731
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2732 := z.DecBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2733 := z.EncBinary()
		_ = yym2733
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2734 := !z.EncBinary()
			yy2arr2734 := z.EncBasicHandle().StructToArray
			var yyq2734 [2]bool
			_, _, _ = yysep2734, yyq2734, yy2arr2734
			const yyr2734 bool = false
			var yynn2734 int
			if yyr2734 || yy2arr2734 {
				r.EncodeArrayStart(2)
			} else {
				yynn2734 = 2
				for _, b := range yyq2734 {
					if b {
						yynn2734++
					}
				}
				r.EncodeMapStart(yynn2734)
				yynn2734 = 0
			}
			if yyr2734 || yy2arr2734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2734 || yy2arr2734 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2737 := z.EncBinary()
				_ = yym2737
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2738 := z.EncBinary()
				_ = yym2738
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2734 || yy2arr2734 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2739 := z.DecBinary()
	_ = yym2739
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2740 := r.ContainerType()
		if yyct2740 == codecSelferValueTypeMap1234 {
			yyl2740 := r.ReadMapStart()
			if yyl2740 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2740, d)
			}
		} else if yyct2740 == codecSelferValueTypeArray1234 {
			yyl2740 := r.ReadArrayStart()
			if yyl2740 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2740, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2741Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2741Slc
	var yyhl2741 bool = l >= 0
	for yyj2741 := 0; ; yyj2741++ {
		if yyhl2741 {
			if yyj2741 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2741Slc = r.DecodeBytes(yys2741Slc, true, true)
		yys2741 := string(yys2741Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2741 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2741)
		} // end switch yys2741
	} // end for yyj2741
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2744 int
	var yyb2744 bool
	var yyhl2744 bool = l >= 0
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2744++
	if yyhl2744 {
		yyb2744 = yyj2744 > l
	} else {
		yyb2744 = r.CheckBreak()
	}
	if yyb2744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2744++
		if yyhl2744 {
			yyb2744 = yyj2744 > l
		} else {
			yyb2744 = r.CheckBreak()
		}
		if yyb2744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2747 := z.EncBinary()
	_ = yym2747
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2748 := z.DecBinary()
	_ = yym2748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2749 := z.EncBinary()
		_ = yym2749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2750 := z.DecBinary()
	_ = yym2750
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2751 := z.EncBinary()
		_ = yym2751
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2752 := !z.EncBinary()
			yy2arr2752 := z.EncBasicHandle().StructToArray
			var yyq2752 [5]bool
			_, _, _ = yysep2752, yyq2752, yy2arr2752
			const yyr2752 bool = false
			yyq2752[0] = true
			yyq2752[1] = true
			yyq2752[2] = true
			yyq2752[3] = x.Kind != ""
			yyq2752[4] = x.APIVersion != ""
			var yynn2752 int
			if yyr2752 || yy2arr2752 {
				r.EncodeArrayStart(5)
			} else {
				yynn2752 = 0
				for _, b := range yyq2752 {
					if b {
						yynn2752++
					}
				}
				r.EncodeMapStart(yynn2752)
				yynn2752 = 0
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[0] {
					yy2754 := &x.ObjectMeta
					yy2754.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2752[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2755 := &x.ObjectMeta
					yy2755.CodecEncodeSelf(e)
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[1] {
					yy2757 := &x.Spec
					yy2757.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2752[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2758 := &x.Spec
					yy2758.CodecEncodeSelf(e)
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[2] {
					yy2760 := &x.Status
					yy2760.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2752[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2761 := &x.Status
					yy2761.CodecEncodeSelf(e)
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[3] {
					yym2763 := z.EncBinary()
					_ = yym2763
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2764 := z.EncBinary()
					_ = yym2764
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2752[4] {
					yym2766 := z.EncBinary()
					_ = yym2766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2752[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2767 := z.EncBinary()
					_ = yym2767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2752 || yy2arr2752 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2768 := z.DecBinary()
	_ = yym2768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2769 := r.ContainerType()
		if yyct2769 == codecSelferValueTypeMap1234 {
			yyl2769 := r.ReadMapStart()
			if yyl2769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2769, d)
			}
		} else if yyct2769 == codecSelferValueTypeArray1234 {
			yyl2769 := r.ReadArrayStart()
			if yyl2769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2770Slc
	var yyhl2770 bool = l >= 0
	for yyj2770 := 0; ; yyj2770++ {
		if yyhl2770 {
			if yyj2770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2770Slc = r.DecodeBytes(yys2770Slc, true, true)
		yys2770 := string(yys2770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2770 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2771 := &x.ObjectMeta
				yyv2771.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2772 := &x.Spec
				yyv2772.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2773 := &x.Status
				yyv2773.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2770)
		} // end switch yys2770
	} // end for yyj2770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2776 int
	var yyb2776 bool
	var yyhl2776 bool = l >= 0
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2777 := &x.ObjectMeta
		yyv2777.CodecDecodeSelf(d)
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2778 := &x.Spec
		yyv2778.CodecDecodeSelf(d)
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2779 := &x.Status
		yyv2779.CodecDecodeSelf(d)
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2776++
	if yyhl2776 {
		yyb2776 = yyj2776 > l
	} else {
		yyb2776 = r.CheckBreak()
	}
	if yyb2776 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2776++
		if yyhl2776 {
			yyb2776 = yyj2776 > l
		} else {
			yyb2776 = r.CheckBreak()
		}
		if yyb2776 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2776-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2782 := z.EncBinary()
		_ = yym2782
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2783 := !z.EncBinary()
			yy2arr2783 := z.EncBasicHandle().StructToArray
			var yyq2783 [4]bool
			_, _, _ = yysep2783, yyq2783, yy2arr2783
			const yyr2783 bool = false
			yyq2783[0] = true
			yyq2783[2] = x.Kind != ""
			yyq2783[3] = x.APIVersion != ""
			var yynn2783 int
			if yyr2783 || yy2arr2783 {
				r.EncodeArrayStart(4)
			} else {
				yynn2783 = 1
				for _, b := range yyq2783 {
					if b {
						yynn2783++
					}
				}
				r.EncodeMapStart(yynn2783)
				yynn2783 = 0
			}
			if yyr2783 || yy2arr2783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2783[0] {
					yy2785 := &x.ListMeta
					yym2786 := z.EncBinary()
					_ = yym2786
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2785) {
					} else {
						z.EncFallback(yy2785)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2783[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2787 := &x.ListMeta
					yym2788 := z.EncBinary()
					_ = yym2788
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2787) {
					} else {
						z.EncFallback(yy2787)
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2790 := z.EncBinary()
					_ = yym2790
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2791 := z.EncBinary()
					_ = yym2791
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2783[2] {
					yym2793 := z.EncBinary()
					_ = yym2793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2783[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2794 := z.EncBinary()
					_ = yym2794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2783[3] {
					yym2796 := z.EncBinary()
					_ = yym2796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2783[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2797 := z.EncBinary()
					_ = yym2797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2783 || yy2arr2783 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2798 := z.DecBinary()
	_ = yym2798
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2799 := r.ContainerType()
		if yyct2799 == codecSelferValueTypeMap1234 {
			yyl2799 := r.ReadMapStart()
			if yyl2799 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2799, d)
			}
		} else if yyct2799 == codecSelferValueTypeArray1234 {
			yyl2799 := r.ReadArrayStart()
			if yyl2799 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2799, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2800Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2800Slc
	var yyhl2800 bool = l >= 0
	for yyj2800 := 0; ; yyj2800++ {
		if yyhl2800 {
			if yyj2800 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2800Slc = r.DecodeBytes(yys2800Slc, true, true)
		yys2800 := string(yys2800Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2800 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2801 := &x.ListMeta
				yym2802 := z.DecBinary()
				_ = yym2802
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2801) {
				} else {
					z.DecFallback(yyv2801, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2803 := &x.Items
				yym2804 := z.DecBinary()
				_ = yym2804
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2803), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2800)
		} // end switch yys2800
	} // end for yyj2800
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2807 int
	var yyb2807 bool
	var yyhl2807 bool = l >= 0
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2808 := &x.ListMeta
		yym2809 := z.DecBinary()
		_ = yym2809
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2808) {
		} else {
			z.DecFallback(yyv2808, false)
		}
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2810 := &x.Items
		yym2811 := z.DecBinary()
		_ = yym2811
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2810), d)
		}
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2807++
	if yyhl2807 {
		yyb2807 = yyj2807 > l
	} else {
		yyb2807 = r.CheckBreak()
	}
	if yyb2807 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2807++
		if yyhl2807 {
			yyb2807 = yyj2807 > l
		} else {
			yyb2807 = r.CheckBreak()
		}
		if yyb2807 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2807-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2814 := z.EncBinary()
	_ = yym2814
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2815 := z.DecBinary()
	_ = yym2815
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2816 := z.EncBinary()
		_ = yym2816
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2817 := !z.EncBinary()
			yy2arr2817 := z.EncBasicHandle().StructToArray
			var yyq2817 [1]bool
			_, _, _ = yysep2817, yyq2817, yy2arr2817
			const yyr2817 bool = false
			yyq2817[0] = len(x.Finalizers) != 0
			var yynn2817 int
			if yyr2817 || yy2arr2817 {
				r.EncodeArrayStart(1)
			} else {
				yynn2817 = 0
				for _, b := range yyq2817 {
					if b {
						yynn2817++
					}
				}
				r.EncodeMapStart(yynn2817)
				yynn2817 = 0
			}
			if yyr2817 || yy2arr2817 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2817[0] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2819 := z.EncBinary()
						_ = yym2819
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2817[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym2820 := z.EncBinary()
						_ = yym2820
						if false {
						} else {
							h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
						}
					}
				}
			}
			if yyr2817 || yy2arr2817 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2821 := z.DecBinary()
	_ = yym2821
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2822 := r.ContainerType()
		if yyct2822 == codecSelferValueTypeMap1234 {
			yyl2822 := r.ReadMapStart()
			if yyl2822 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2822, d)
			}
		} else if yyct2822 == codecSelferValueTypeArray1234 {
			yyl2822 := r.ReadArrayStart()
			if yyl2822 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2822, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2823Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2823Slc
	var yyhl2823 bool = l >= 0
	for yyj2823 := 0; ; yyj2823++ {
		if yyhl2823 {
			if yyj2823 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2823Slc = r.DecodeBytes(yys2823Slc, true, true)
		yys2823 := string(yys2823Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2823 {
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2824 := &x.Finalizers
				yym2825 := z.DecBinary()
				_ = yym2825
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2824), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2823)
		} // end switch yys2823
	} // end for yyj2823
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2826 int
	var yyb2826 bool
	var yyhl2826 bool = l >= 0
	yyj2826++
	if yyhl2826 {
		yyb2826 = yyj2826 > l
	} else {
		yyb2826 = r.CheckBreak()
	}
	if yyb2826 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2827 := &x.Finalizers
		yym2828 := z.DecBinary()
		_ = yym2828
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2827), d)
		}
	}
	for {
		yyj2826++
		if yyhl2826 {
			yyb2826 = yyj2826 > l
		} else {
			yyb2826 = r.CheckBreak()
		}
		if yyb2826 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2826-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2829 := z.EncBinary()
		_ = yym2829
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2830 := !z.EncBinary()
			yy2arr2830 := z.EncBasicHandle().StructToArray
			var yyq2830 [1]bool
			_, _, _ = yysep2830, yyq2830, yy2arr2830
			const yyr2830 bool = false
			yyq2830[0] = x.Phase != ""
			var yynn2830 int
			if yyr2830 || yy2arr2830 {
				r.EncodeArrayStart(1)
			} else {
				yynn2830 = 0
				for _, b := range yyq2830 {
					if b {
						yynn2830++
					}
				}
				r.EncodeMapStart(yynn2830)
				yynn2830 = 0
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2830[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2830[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2830 || yy2arr2830 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2832 := z.DecBinary()
	_ = yym2832
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2833 := r.ContainerType()
		if yyct2833 == codecSelferValueTypeMap1234 {
			yyl2833 := r.ReadMapStart()
			if yyl2833 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2833, d)
			}
		} else if yyct2833 == codecSelferValueTypeArray1234 {
			yyl2833 := r.ReadArrayStart()
			if yyl2833 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2833, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2834Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2834Slc
	var yyhl2834 bool = l >= 0
	for yyj2834 := 0; ; yyj2834++ {
		if yyhl2834 {
			if yyj2834 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2834Slc = r.DecodeBytes(yys2834Slc, true, true)
		yys2834 := string(yys2834Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2834 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2834)
		} // end switch yys2834
	} // end for yyj2834
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2836 int
	var yyb2836 bool
	var yyhl2836 bool = l >= 0
	yyj2836++
	if yyhl2836 {
		yyb2836 = yyj2836 > l
	} else {
		yyb2836 = r.CheckBreak()
	}
	if yyb2836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2836++
		if yyhl2836 {
			yyb2836 = yyj2836 > l
		} else {
			yyb2836 = r.CheckBreak()
		}
		if yyb2836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2838 := z.EncBinary()
	_ = yym2838
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2839 := z.DecBinary()
	_ = yym2839
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2840 := z.EncBinary()
		_ = yym2840
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2841 := !z.EncBinary()
			yy2arr2841 := z.EncBasicHandle().StructToArray
			var yyq2841 [5]bool
			_, _, _ = yysep2841, yyq2841, yy2arr2841
			const yyr2841 bool = false
			yyq2841[0] = true
			yyq2841[1] = true
			yyq2841[2] = true
			yyq2841[3] = x.Kind != ""
			yyq2841[4] = x.APIVersion != ""
			var yynn2841 int
			if yyr2841 || yy2arr2841 {
				r.EncodeArrayStart(5)
			} else {
				yynn2841 = 0
				for _, b := range yyq2841 {
					if b {
						yynn2841++
					}
				}
				r.EncodeMapStart(yynn2841)
				yynn2841 = 0
			}
			if yyr2841 || yy2arr2841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2841[0] {
					yy2843 := &x.ObjectMeta
					yy2843.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2841[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2844 := &x.ObjectMeta
					yy2844.CodecEncodeSelf(e)
				}
			}
			if yyr2841 || yy2arr2841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2841[1] {
					yy2846 := &x.Spec
					yy2846.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2841[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2847 := &x.Spec
					yy2847.CodecEncodeSelf(e)
				}
			}
			if yyr2841 || yy2arr2841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2841[2] {
					yy2849 := &x.Status
					yy2849.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2841[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2850 := &x.Status
					yy2850.CodecEncodeSelf(e)
				}
			}
			if yyr2841 || yy2arr2841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2841[3] {
					yym2852 := z.EncBinary()
					_ = yym2852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2841[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2841 || yy2arr2841 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2841[4] {
					yym2855 := z.EncBinary()
					_ = yym2855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2841[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2856 := z.EncBinary()
					_ = yym2856
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2841 || yy2arr2841 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2857 := z.DecBinary()
	_ = yym2857
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2858 := r.ContainerType()
		if yyct2858 == codecSelferValueTypeMap1234 {
			yyl2858 := r.ReadMapStart()
			if yyl2858 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2858, d)
			}
		} else if yyct2858 == codecSelferValueTypeArray1234 {
			yyl2858 := r.ReadArrayStart()
			if yyl2858 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2858, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2859Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2859Slc
	var yyhl2859 bool = l >= 0
	for yyj2859 := 0; ; yyj2859++ {
		if yyhl2859 {
			if yyj2859 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2859Slc = r.DecodeBytes(yys2859Slc, true, true)
		yys2859 := string(yys2859Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2859 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2860 := &x.ObjectMeta
				yyv2860.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2861 := &x.Spec
				yyv2861.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2862 := &x.Status
				yyv2862.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2859)
		} // end switch yys2859
	} // end for yyj2859
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2865 int
	var yyb2865 bool
	var yyhl2865 bool = l >= 0
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2866 := &x.ObjectMeta
		yyv2866.CodecDecodeSelf(d)
	}
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2867 := &x.Spec
		yyv2867.CodecDecodeSelf(d)
	}
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2868 := &x.Status
		yyv2868.CodecDecodeSelf(d)
	}
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2865++
	if yyhl2865 {
		yyb2865 = yyj2865 > l
	} else {
		yyb2865 = r.CheckBreak()
	}
	if yyb2865 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2865++
		if yyhl2865 {
			yyb2865 = yyj2865 > l
		} else {
			yyb2865 = r.CheckBreak()
		}
		if yyb2865 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2865-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2871 := z.EncBinary()
		_ = yym2871
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2872 := !z.EncBinary()
			yy2arr2872 := z.EncBasicHandle().StructToArray
			var yyq2872 [4]bool
			_, _, _ = yysep2872, yyq2872, yy2arr2872
			const yyr2872 bool = false
			yyq2872[0] = true
			yyq2872[2] = x.Kind != ""
			yyq2872[3] = x.APIVersion != ""
			var yynn2872 int
			if yyr2872 || yy2arr2872 {
				r.EncodeArrayStart(4)
			} else {
				yynn2872 = 1
				for _, b := range yyq2872 {
					if b {
						yynn2872++
					}
				}
				r.EncodeMapStart(yynn2872)
				yynn2872 = 0
			}
			if yyr2872 || yy2arr2872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2872[0] {
					yy2874 := &x.ListMeta
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2874) {
					} else {
						z.EncFallback(yy2874)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2872[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2876 := &x.ListMeta
					yym2877 := z.EncBinary()
					_ = yym2877
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2876) {
					} else {
						z.EncFallback(yy2876)
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2879 := z.EncBinary()
					_ = yym2879
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2880 := z.EncBinary()
					_ = yym2880
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2872[2] {
					yym2882 := z.EncBinary()
					_ = yym2882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2872[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2883 := z.EncBinary()
					_ = yym2883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2872[3] {
					yym2885 := z.EncBinary()
					_ = yym2885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2872[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2886 := z.EncBinary()
					_ = yym2886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2872 || yy2arr2872 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2887 := z.DecBinary()
	_ = yym2887
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2888 := r.ContainerType()
		if yyct2888 == codecSelferValueTypeMap1234 {
			yyl2888 := r.ReadMapStart()
			if yyl2888 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2888, d)
			}
		} else if yyct2888 == codecSelferValueTypeArray1234 {
			yyl2888 := r.ReadArrayStart()
			if yyl2888 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2888, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2889Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2889Slc
	var yyhl2889 bool = l >= 0
	for yyj2889 := 0; ; yyj2889++ {
		if yyhl2889 {
			if yyj2889 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2889Slc = r.DecodeBytes(yys2889Slc, true, true)
		yys2889 := string(yys2889Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2889 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2890 := &x.ListMeta
				yym2891 := z.DecBinary()
				_ = yym2891
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2890) {
				} else {
					z.DecFallback(yyv2890, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2892 := &x.Items
				yym2893 := z.DecBinary()
				_ = yym2893
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2892), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2889)
		} // end switch yys2889
	} // end for yyj2889
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2896 int
	var yyb2896 bool
	var yyhl2896 bool = l >= 0
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2897 := &x.ListMeta
		yym2898 := z.DecBinary()
		_ = yym2898
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2897) {
		} else {
			z.DecFallback(yyv2897, false)
		}
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2899 := &x.Items
		yym2900 := z.DecBinary()
		_ = yym2900
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2899), d)
		}
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2896++
	if yyhl2896 {
		yyb2896 = yyj2896 > l
	} else {
		yyb2896 = r.CheckBreak()
	}
	if yyb2896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2896++
		if yyhl2896 {
			yyb2896 = yyj2896 > l
		} else {
			yyb2896 = r.CheckBreak()
		}
		if yyb2896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2903 := z.EncBinary()
		_ = yym2903
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2904 := !z.EncBinary()
			yy2arr2904 := z.EncBasicHandle().StructToArray
			var yyq2904 [4]bool
			_, _, _ = yysep2904, yyq2904, yy2arr2904
			const yyr2904 bool = false
			yyq2904[0] = true
			yyq2904[2] = x.Kind != ""
			yyq2904[3] = x.APIVersion != ""
			var yynn2904 int
			if yyr2904 || yy2arr2904 {
				r.EncodeArrayStart(4)
			} else {
				yynn2904 = 1
				for _, b := range yyq2904 {
					if b {
						yynn2904++
					}
				}
				r.EncodeMapStart(yynn2904)
				yynn2904 = 0
			}
			if yyr2904 || yy2arr2904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2904[0] {
					yy2906 := &x.ObjectMeta
					yy2906.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2904[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2907 := &x.ObjectMeta
					yy2907.CodecEncodeSelf(e)
				}
			}
			if yyr2904 || yy2arr2904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2909 := &x.Target
				yy2909.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2910 := &x.Target
				yy2910.CodecEncodeSelf(e)
			}
			if yyr2904 || yy2arr2904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2904[2] {
					yym2912 := z.EncBinary()
					_ = yym2912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2904[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2913 := z.EncBinary()
					_ = yym2913
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2904 || yy2arr2904 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2904[3] {
					yym2915 := z.EncBinary()
					_ = yym2915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2904[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2904 || yy2arr2904 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2917 := z.DecBinary()
	_ = yym2917
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2918 := r.ContainerType()
		if yyct2918 == codecSelferValueTypeMap1234 {
			yyl2918 := r.ReadMapStart()
			if yyl2918 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2918, d)
			}
		} else if yyct2918 == codecSelferValueTypeArray1234 {
			yyl2918 := r.ReadArrayStart()
			if yyl2918 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2918, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2919Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2919Slc
	var yyhl2919 bool = l >= 0
	for yyj2919 := 0; ; yyj2919++ {
		if yyhl2919 {
			if yyj2919 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2919Slc = r.DecodeBytes(yys2919Slc, true, true)
		yys2919 := string(yys2919Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2919 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2920 := &x.ObjectMeta
				yyv2920.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2921 := &x.Target
				yyv2921.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2919)
		} // end switch yys2919
	} // end for yyj2919
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2924 int
	var yyb2924 bool
	var yyhl2924 bool = l >= 0
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2925 := &x.ObjectMeta
		yyv2925.CodecDecodeSelf(d)
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2926 := &x.Target
		yyv2926.CodecDecodeSelf(d)
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2924++
	if yyhl2924 {
		yyb2924 = yyj2924 > l
	} else {
		yyb2924 = r.CheckBreak()
	}
	if yyb2924 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2924++
		if yyhl2924 {
			yyb2924 = yyj2924 > l
		} else {
			yyb2924 = r.CheckBreak()
		}
		if yyb2924 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2924-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2929 := z.EncBinary()
		_ = yym2929
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2930 := !z.EncBinary()
			yy2arr2930 := z.EncBasicHandle().StructToArray
			var yyq2930 [3]bool
			_, _, _ = yysep2930, yyq2930, yy2arr2930
			const yyr2930 bool = false
			yyq2930[1] = x.Kind != ""
			yyq2930[2] = x.APIVersion != ""
			var yynn2930 int
			if yyr2930 || yy2arr2930 {
				r.EncodeArrayStart(3)
			} else {
				yynn2930 = 1
				for _, b := range yyq2930 {
					if b {
						yynn2930++
					}
				}
				r.EncodeMapStart(yynn2930)
				yynn2930 = 0
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2932 := *x.GracePeriodSeconds
					yym2933 := z.EncBinary()
					_ = yym2933
					if false {
					} else {
						r.EncodeInt(int64(yy2932))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2934 := *x.GracePeriodSeconds
					yym2935 := z.EncBinary()
					_ = yym2935
					if false {
					} else {
						r.EncodeInt(int64(yy2934))
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2930[1] {
					yym2937 := z.EncBinary()
					_ = yym2937
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2930[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2938 := z.EncBinary()
					_ = yym2938
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2930[2] {
					yym2940 := z.EncBinary()
					_ = yym2940
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2930[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2941 := z.EncBinary()
					_ = yym2941
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2930 || yy2arr2930 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2942 := z.DecBinary()
	_ = yym2942
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2943 := r.ContainerType()
		if yyct2943 == codecSelferValueTypeMap1234 {
			yyl2943 := r.ReadMapStart()
			if yyl2943 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2943, d)
			}
		} else if yyct2943 == codecSelferValueTypeArray1234 {
			yyl2943 := r.ReadArrayStart()
			if yyl2943 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2943, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2944Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2944Slc
	var yyhl2944 bool = l >= 0
	for yyj2944 := 0; ; yyj2944++ {
		if yyhl2944 {
			if yyj2944 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2944Slc = r.DecodeBytes(yys2944Slc, true, true)
		yys2944 := string(yys2944Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2944 {
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2946 := z.DecBinary()
				_ = yym2946
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2944)
		} // end switch yys2944
	} // end for yyj2944
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2949 int
	var yyb2949 bool
	var yyhl2949 bool = l >= 0
	yyj2949++
	if yyhl2949 {
		yyb2949 = yyj2949 > l
	} else {
		yyb2949 = r.CheckBreak()
	}
	if yyb2949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2951 := z.DecBinary()
		_ = yym2951
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2949++
	if yyhl2949 {
		yyb2949 = yyj2949 > l
	} else {
		yyb2949 = r.CheckBreak()
	}
	if yyb2949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2949++
	if yyhl2949 {
		yyb2949 = yyj2949 > l
	} else {
		yyb2949 = r.CheckBreak()
	}
	if yyb2949 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2949++
		if yyhl2949 {
			yyb2949 = yyj2949 > l
		} else {
			yyb2949 = r.CheckBreak()
		}
		if yyb2949 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2949-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2954 := z.EncBinary()
		_ = yym2954
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2955 := !z.EncBinary()
			yy2arr2955 := z.EncBasicHandle().StructToArray
			var yyq2955 [4]bool
			_, _, _ = yysep2955, yyq2955, yy2arr2955
			const yyr2955 bool = false
			yyq2955[2] = x.Kind != ""
			yyq2955[3] = x.APIVersion != ""
			var yynn2955 int
			if yyr2955 || yy2arr2955 {
				r.EncodeArrayStart(4)
			} else {
				yynn2955 = 2
				for _, b := range yyq2955 {
					if b {
						yynn2955++
					}
				}
				r.EncodeMapStart(yynn2955)
				yynn2955 = 0
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2957 := z.EncBinary()
				_ = yym2957
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2958 := z.EncBinary()
				_ = yym2958
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2960 := z.EncBinary()
				_ = yym2960
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2961 := z.EncBinary()
				_ = yym2961
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[2] {
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2955[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2964 := z.EncBinary()
					_ = yym2964
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2955[3] {
					yym2966 := z.EncBinary()
					_ = yym2966
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2955[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2955 || yy2arr2955 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2968 := z.DecBinary()
	_ = yym2968
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2969 := r.ContainerType()
		if yyct2969 == codecSelferValueTypeMap1234 {
			yyl2969 := r.ReadMapStart()
			if yyl2969 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2969, d)
			}
		} else if yyct2969 == codecSelferValueTypeArray1234 {
			yyl2969 := r.ReadArrayStart()
			if yyl2969 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2969, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2970Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2970Slc
	var yyhl2970 bool = l >= 0
	for yyj2970 := 0; ; yyj2970++ {
		if yyhl2970 {
			if yyj2970 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2970Slc = r.DecodeBytes(yys2970Slc, true, true)
		yys2970 := string(yys2970Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2970 {
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2970)
		} // end switch yys2970
	} // end for yyj2970
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2975 int
	var yyb2975 bool
	var yyhl2975 bool = l >= 0
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj2975++
		if yyhl2975 {
			yyb2975 = yyj2975 > l
		} else {
			yyb2975 = r.CheckBreak()
		}
		if yyb2975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2980 := z.EncBinary()
		_ = yym2980
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2981 := !z.EncBinary()
			yy2arr2981 := z.EncBasicHandle().StructToArray
			var yyq2981 [7]bool
			_, _, _ = yysep2981, yyq2981, yy2arr2981
			const yyr2981 bool = false
			yyq2981[0] = x.LabelSelector != ""
			yyq2981[1] = x.FieldSelector != ""
			yyq2981[2] = x.Watch != false
			yyq2981[3] = x.ResourceVersion != ""
			yyq2981[4] = x.TimeoutSeconds != nil
			yyq2981[5] = x.Kind != ""
			yyq2981[6] = x.APIVersion != ""
			var yynn2981 int
			if yyr2981 || yy2arr2981 {
				r.EncodeArrayStart(7)
			} else {
				yynn2981 = 0
				for _, b := range yyq2981 {
					if b {
						yynn2981++
					}
				}
				r.EncodeMapStart(yynn2981)
				yynn2981 = 0
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[0] {
					yym2983 := z.EncBinary()
					_ = yym2983
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2984 := z.EncBinary()
					_ = yym2984
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LabelSelector))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[1] {
					yym2986 := z.EncBinary()
					_ = yym2986
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2987 := z.EncBinary()
					_ = yym2987
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldSelector))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[2] {
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2981[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("watch"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2990 := z.EncBinary()
					_ = yym2990
					if false {
					} else {
						r.EncodeBool(bool(x.Watch))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[3] {
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2993 := z.EncBinary()
					_ = yym2993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[4] {
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2995 := *x.TimeoutSeconds
						yym2996 := z.EncBinary()
						_ = yym2996
						if false {
						} else {
							r.EncodeInt(int64(yy2995))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2981[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TimeoutSeconds == nil {
						r.EncodeNil()
					} else {
						yy2997 := *x.TimeoutSeconds
						yym2998 := z.EncBinary()
						_ = yym2998
						if false {
						} else {
							r.EncodeInt(int64(yy2997))
						}
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[5] {
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3001 := z.EncBinary()
					_ = yym3001
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2981[6] {
					yym3003 := z.EncBinary()
					_ = yym3003
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2981[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3004 := z.EncBinary()
					_ = yym3004
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2981 || yy2arr2981 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3005 := z.DecBinary()
	_ = yym3005
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3006 := r.ContainerType()
		if yyct3006 == codecSelferValueTypeMap1234 {
			yyl3006 := r.ReadMapStart()
			if yyl3006 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3006, d)
			}
		} else if yyct3006 == codecSelferValueTypeArray1234 {
			yyl3006 := r.ReadArrayStart()
			if yyl3006 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3006, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3007Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3007Slc
	var yyhl3007 bool = l >= 0
	for yyj3007 := 0; ; yyj3007++ {
		if yyhl3007 {
			if yyj3007 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3007Slc = r.DecodeBytes(yys3007Slc, true, true)
		yys3007 := string(yys3007Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3007 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = ""
			} else {
				x.LabelSelector = string(r.DecodeString())
			}
		case "fieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = ""
			} else {
				x.FieldSelector = string(r.DecodeString())
			}
		case "watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3013 := z.DecBinary()
				_ = yym3013
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3007)
		} // end switch yys3007
	} // end for yyj3007
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3016 int
	var yyb3016 bool
	var yyhl3016 bool = l >= 0
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = ""
	} else {
		x.LabelSelector = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = ""
	} else {
		x.FieldSelector = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3022 := z.DecBinary()
		_ = yym3022
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3016++
	if yyhl3016 {
		yyb3016 = yyj3016 > l
	} else {
		yyb3016 = r.CheckBreak()
	}
	if yyb3016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3016++
		if yyhl3016 {
			yyb3016 = yyj3016 > l
		} else {
			yyb3016 = r.CheckBreak()
		}
		if yyb3016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3025 := z.EncBinary()
		_ = yym3025
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3026 := !z.EncBinary()
			yy2arr3026 := z.EncBasicHandle().StructToArray
			var yyq3026 [10]bool
			_, _, _ = yysep3026, yyq3026, yy2arr3026
			const yyr3026 bool = false
			yyq3026[0] = x.Container != ""
			yyq3026[1] = x.Follow != false
			yyq3026[2] = x.Previous != false
			yyq3026[3] = x.SinceSeconds != nil
			yyq3026[4] = x.SinceTime != nil
			yyq3026[5] = x.Timestamps != false
			yyq3026[6] = x.TailLines != nil
			yyq3026[7] = x.LimitBytes != nil
			yyq3026[8] = x.Kind != ""
			yyq3026[9] = x.APIVersion != ""
			var yynn3026 int
			if yyr3026 || yy2arr3026 {
				r.EncodeArrayStart(10)
			} else {
				yynn3026 = 0
				for _, b := range yyq3026 {
					if b {
						yynn3026++
					}
				}
				r.EncodeMapStart(yynn3026)
				yynn3026 = 0
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[0] {
					yym3028 := z.EncBinary()
					_ = yym3028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[1] {
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3026[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("follow"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeBool(bool(x.Follow))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[2] {
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3026[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("previous"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeBool(bool(x.Previous))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[3] {
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3037 := *x.SinceSeconds
						yym3038 := z.EncBinary()
						_ = yym3038
						if false {
						} else {
							r.EncodeInt(int64(yy3037))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3026[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceSeconds == nil {
						r.EncodeNil()
					} else {
						yy3039 := *x.SinceSeconds
						yym3040 := z.EncBinary()
						_ = yym3040
						if false {
						} else {
							r.EncodeInt(int64(yy3039))
						}
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[4] {
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3042 := z.EncBinary()
						_ = yym3042
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3042 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3042 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3026[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sinceTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SinceTime == nil {
						r.EncodeNil()
					} else {
						yym3043 := z.EncBinary()
						_ = yym3043
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
						} else if yym3043 {
							z.EncBinaryMarshal(x.SinceTime)
						} else if !yym3043 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.SinceTime)
						} else {
							z.EncFallback(x.SinceTime)
						}
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[5] {
					yym3045 := z.EncBinary()
					_ = yym3045
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3026[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timestamps"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						r.EncodeBool(bool(x.Timestamps))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[6] {
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3048 := *x.TailLines
						yym3049 := z.EncBinary()
						_ = yym3049
						if false {
						} else {
							r.EncodeInt(int64(yy3048))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3026[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tailLines"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TailLines == nil {
						r.EncodeNil()
					} else {
						yy3050 := *x.TailLines
						yym3051 := z.EncBinary()
						_ = yym3051
						if false {
						} else {
							r.EncodeInt(int64(yy3050))
						}
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[7] {
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3053 := *x.LimitBytes
						yym3054 := z.EncBinary()
						_ = yym3054
						if false {
						} else {
							r.EncodeInt(int64(yy3053))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3026[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limitBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LimitBytes == nil {
						r.EncodeNil()
					} else {
						yy3055 := *x.LimitBytes
						yym3056 := z.EncBinary()
						_ = yym3056
						if false {
						} else {
							r.EncodeInt(int64(yy3055))
						}
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[8] {
					yym3058 := z.EncBinary()
					_ = yym3058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3026[9] {
					yym3061 := z.EncBinary()
					_ = yym3061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3026[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3026 || yy2arr3026 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3063 := z.DecBinary()
	_ = yym3063
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3064 := r.ContainerType()
		if yyct3064 == codecSelferValueTypeMap1234 {
			yyl3064 := r.ReadMapStart()
			if yyl3064 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3064, d)
			}
		} else if yyct3064 == codecSelferValueTypeArray1234 {
			yyl3064 := r.ReadArrayStart()
			if yyl3064 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3064, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3065Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3065Slc
	var yyhl3065 bool = l >= 0
	for yyj3065 := 0; ; yyj3065++ {
		if yyhl3065 {
			if yyj3065 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3065Slc = r.DecodeBytes(yys3065Slc, true, true)
		yys3065 := string(yys3065Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3065 {
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "sinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3070 := z.DecBinary()
				_ = yym3070
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "sinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3072 := z.DecBinary()
				_ = yym3072
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3072 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3072 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "tailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3075 := z.DecBinary()
				_ = yym3075
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "limitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3077 := z.DecBinary()
				_ = yym3077
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3065)
		} // end switch yys3065
	} // end for yyj3065
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3080 int
	var yyb3080 bool
	var yyhl3080 bool = l >= 0
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3085 := z.DecBinary()
		_ = yym3085
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3087 := z.DecBinary()
		_ = yym3087
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3087 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3087 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3090 := z.DecBinary()
		_ = yym3090
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3092 := z.DecBinary()
		_ = yym3092
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3080++
	if yyhl3080 {
		yyb3080 = yyj3080 > l
	} else {
		yyb3080 = r.CheckBreak()
	}
	if yyb3080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3080++
		if yyhl3080 {
			yyb3080 = yyj3080 > l
		} else {
			yyb3080 = r.CheckBreak()
		}
		if yyb3080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3095 := z.EncBinary()
		_ = yym3095
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3096 := !z.EncBinary()
			yy2arr3096 := z.EncBasicHandle().StructToArray
			var yyq3096 [7]bool
			_, _, _ = yysep3096, yyq3096, yy2arr3096
			const yyr3096 bool = false
			yyq3096[0] = x.Stdin != false
			yyq3096[1] = x.Stdout != false
			yyq3096[2] = x.Stderr != false
			yyq3096[3] = x.TTY != false
			yyq3096[4] = x.Container != ""
			yyq3096[5] = x.Kind != ""
			yyq3096[6] = x.APIVersion != ""
			var yynn3096 int
			if yyr3096 || yy2arr3096 {
				r.EncodeArrayStart(7)
			} else {
				yynn3096 = 0
				for _, b := range yyq3096 {
					if b {
						yynn3096++
					}
				}
				r.EncodeMapStart(yynn3096)
				yynn3096 = 0
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[0] {
					yym3098 := z.EncBinary()
					_ = yym3098
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3096[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[1] {
					yym3101 := z.EncBinary()
					_ = yym3101
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3096[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3102 := z.EncBinary()
					_ = yym3102
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[2] {
					yym3104 := z.EncBinary()
					_ = yym3104
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3096[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3105 := z.EncBinary()
					_ = yym3105
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[3] {
					yym3107 := z.EncBinary()
					_ = yym3107
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3096[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3108 := z.EncBinary()
					_ = yym3108
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[4] {
					yym3110 := z.EncBinary()
					_ = yym3110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3096[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3111 := z.EncBinary()
					_ = yym3111
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[5] {
					yym3113 := z.EncBinary()
					_ = yym3113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3096[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3114 := z.EncBinary()
					_ = yym3114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3096[6] {
					yym3116 := z.EncBinary()
					_ = yym3116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3096[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3117 := z.EncBinary()
					_ = yym3117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3096 || yy2arr3096 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3118 := z.DecBinary()
	_ = yym3118
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3119 := r.ContainerType()
		if yyct3119 == codecSelferValueTypeMap1234 {
			yyl3119 := r.ReadMapStart()
			if yyl3119 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3119, d)
			}
		} else if yyct3119 == codecSelferValueTypeArray1234 {
			yyl3119 := r.ReadArrayStart()
			if yyl3119 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3119, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3120Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3120Slc
	var yyhl3120 bool = l >= 0
	for yyj3120 := 0; ; yyj3120++ {
		if yyhl3120 {
			if yyj3120 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3120Slc = r.DecodeBytes(yys3120Slc, true, true)
		yys3120 := string(yys3120Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3120 {
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3120)
		} // end switch yys3120
	} // end for yyj3120
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3128 int
	var yyb3128 bool
	var yyhl3128 bool = l >= 0
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3128++
	if yyhl3128 {
		yyb3128 = yyj3128 > l
	} else {
		yyb3128 = r.CheckBreak()
	}
	if yyb3128 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3128++
		if yyhl3128 {
			yyb3128 = yyj3128 > l
		} else {
			yyb3128 = r.CheckBreak()
		}
		if yyb3128 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3128-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3136 := z.EncBinary()
		_ = yym3136
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3137 := !z.EncBinary()
			yy2arr3137 := z.EncBasicHandle().StructToArray
			var yyq3137 [8]bool
			_, _, _ = yysep3137, yyq3137, yy2arr3137
			const yyr3137 bool = false
			yyq3137[0] = x.Stdin != false
			yyq3137[1] = x.Stdout != false
			yyq3137[2] = x.Stderr != false
			yyq3137[3] = x.TTY != false
			yyq3137[4] = x.Container != ""
			yyq3137[6] = x.Kind != ""
			yyq3137[7] = x.APIVersion != ""
			var yynn3137 int
			if yyr3137 || yy2arr3137 {
				r.EncodeArrayStart(8)
			} else {
				yynn3137 = 1
				for _, b := range yyq3137 {
					if b {
						yynn3137++
					}
				}
				r.EncodeMapStart(yynn3137)
				yynn3137 = 0
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[0] {
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3137[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3140 := z.EncBinary()
					_ = yym3140
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[1] {
					yym3142 := z.EncBinary()
					_ = yym3142
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3137[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3143 := z.EncBinary()
					_ = yym3143
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[2] {
					yym3145 := z.EncBinary()
					_ = yym3145
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3137[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3146 := z.EncBinary()
					_ = yym3146
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[3] {
					yym3148 := z.EncBinary()
					_ = yym3148
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3137[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3149 := z.EncBinary()
					_ = yym3149
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[4] {
					yym3151 := z.EncBinary()
					_ = yym3151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3137[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3152 := z.EncBinary()
					_ = yym3152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3155 := z.EncBinary()
					_ = yym3155
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[6] {
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3137[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3158 := z.EncBinary()
					_ = yym3158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3137[7] {
					yym3160 := z.EncBinary()
					_ = yym3160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3137[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3161 := z.EncBinary()
					_ = yym3161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3137 || yy2arr3137 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3162 := z.DecBinary()
	_ = yym3162
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3163 := r.ContainerType()
		if yyct3163 == codecSelferValueTypeMap1234 {
			yyl3163 := r.ReadMapStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3163, d)
			}
		} else if yyct3163 == codecSelferValueTypeArray1234 {
			yyl3163 := r.ReadArrayStart()
			if yyl3163 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3163, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3164Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3164Slc
	var yyhl3164 bool = l >= 0
	for yyj3164 := 0; ; yyj3164++ {
		if yyhl3164 {
			if yyj3164 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3164Slc = r.DecodeBytes(yys3164Slc, true, true)
		yys3164 := string(yys3164Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3164 {
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3170 := &x.Command
				yym3171 := z.DecBinary()
				_ = yym3171
				if false {
				} else {
					z.F.DecSliceStringX(yyv3170, false, d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3164)
		} // end switch yys3164
	} // end for yyj3164
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3174 int
	var yyb3174 bool
	var yyhl3174 bool = l >= 0
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3180 := &x.Command
		yym3181 := z.DecBinary()
		_ = yym3181
		if false {
		} else {
			z.F.DecSliceStringX(yyv3180, false, d)
		}
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3174++
	if yyhl3174 {
		yyb3174 = yyj3174 > l
	} else {
		yyb3174 = r.CheckBreak()
	}
	if yyb3174 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3174++
		if yyhl3174 {
			yyb3174 = yyj3174 > l
		} else {
			yyb3174 = r.CheckBreak()
		}
		if yyb3174 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3174-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3184 := z.EncBinary()
		_ = yym3184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3185 := !z.EncBinary()
			yy2arr3185 := z.EncBasicHandle().StructToArray
			var yyq3185 [3]bool
			_, _, _ = yysep3185, yyq3185, yy2arr3185
			const yyr3185 bool = false
			yyq3185[0] = x.Path != ""
			yyq3185[1] = x.Kind != ""
			yyq3185[2] = x.APIVersion != ""
			var yynn3185 int
			if yyr3185 || yy2arr3185 {
				r.EncodeArrayStart(3)
			} else {
				yynn3185 = 0
				for _, b := range yyq3185 {
					if b {
						yynn3185++
					}
				}
				r.EncodeMapStart(yynn3185)
				yynn3185 = 0
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[0] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[1] {
					yym3190 := z.EncBinary()
					_ = yym3190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3185[2] {
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3185[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3194 := z.EncBinary()
					_ = yym3194
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3185 || yy2arr3185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3195 := z.DecBinary()
	_ = yym3195
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3196 := r.ContainerType()
		if yyct3196 == codecSelferValueTypeMap1234 {
			yyl3196 := r.ReadMapStart()
			if yyl3196 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3196, d)
			}
		} else if yyct3196 == codecSelferValueTypeArray1234 {
			yyl3196 := r.ReadArrayStart()
			if yyl3196 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3196, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3197Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3197Slc
	var yyhl3197 bool = l >= 0
	for yyj3197 := 0; ; yyj3197++ {
		if yyhl3197 {
			if yyj3197 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3197Slc = r.DecodeBytes(yys3197Slc, true, true)
		yys3197 := string(yys3197Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3197 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3197)
		} // end switch yys3197
	} // end for yyj3197
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3201 int
	var yyb3201 bool
	var yyhl3201 bool = l >= 0
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3201++
	if yyhl3201 {
		yyb3201 = yyj3201 > l
	} else {
		yyb3201 = r.CheckBreak()
	}
	if yyb3201 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3201++
		if yyhl3201 {
			yyb3201 = yyj3201 > l
		} else {
			yyb3201 = r.CheckBreak()
		}
		if yyb3201 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3201-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3205 := z.EncBinary()
		_ = yym3205
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3206 := !z.EncBinary()
			yy2arr3206 := z.EncBasicHandle().StructToArray
			var yyq3206 [7]bool
			_, _, _ = yysep3206, yyq3206, yy2arr3206
			const yyr3206 bool = false
			yyq3206[0] = x.Kind != ""
			yyq3206[1] = x.Namespace != ""
			yyq3206[2] = x.Name != ""
			yyq3206[3] = x.UID != ""
			yyq3206[4] = x.APIVersion != ""
			yyq3206[5] = x.ResourceVersion != ""
			yyq3206[6] = x.FieldPath != ""
			var yynn3206 int
			if yyr3206 || yy2arr3206 {
				r.EncodeArrayStart(7)
			} else {
				yynn3206 = 0
				for _, b := range yyq3206 {
					if b {
						yynn3206++
					}
				}
				r.EncodeMapStart(yynn3206)
				yynn3206 = 0
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[0] {
					yym3208 := z.EncBinary()
					_ = yym3208
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3209 := z.EncBinary()
					_ = yym3209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[1] {
					yym3211 := z.EncBinary()
					_ = yym3211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3212 := z.EncBinary()
					_ = yym3212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[2] {
					yym3214 := z.EncBinary()
					_ = yym3214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3215 := z.EncBinary()
					_ = yym3215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[3] {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3218 := z.EncBinary()
					_ = yym3218
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[4] {
					yym3220 := z.EncBinary()
					_ = yym3220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3221 := z.EncBinary()
					_ = yym3221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[5] {
					yym3223 := z.EncBinary()
					_ = yym3223
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3224 := z.EncBinary()
					_ = yym3224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3206[6] {
					yym3226 := z.EncBinary()
					_ = yym3226
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3206[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3227 := z.EncBinary()
					_ = yym3227
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3206 || yy2arr3206 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3228 := z.DecBinary()
	_ = yym3228
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3229 := r.ContainerType()
		if yyct3229 == codecSelferValueTypeMap1234 {
			yyl3229 := r.ReadMapStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3229, d)
			}
		} else if yyct3229 == codecSelferValueTypeArray1234 {
			yyl3229 := r.ReadArrayStart()
			if yyl3229 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3229, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3230Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3230Slc
	var yyhl3230 bool = l >= 0
	for yyj3230 := 0; ; yyj3230++ {
		if yyhl3230 {
			if yyj3230 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3230Slc = r.DecodeBytes(yys3230Slc, true, true)
		yys3230 := string(yys3230Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3230 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3230)
		} // end switch yys3230
	} // end for yyj3230
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3238 int
	var yyb3238 bool
	var yyhl3238 bool = l >= 0
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3238++
	if yyhl3238 {
		yyb3238 = yyj3238 > l
	} else {
		yyb3238 = r.CheckBreak()
	}
	if yyb3238 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3238++
		if yyhl3238 {
			yyb3238 = yyj3238 > l
		} else {
			yyb3238 = r.CheckBreak()
		}
		if yyb3238 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3238-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3246 := z.EncBinary()
		_ = yym3246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3247 := !z.EncBinary()
			yy2arr3247 := z.EncBasicHandle().StructToArray
			var yyq3247 [1]bool
			_, _, _ = yysep3247, yyq3247, yy2arr3247
			const yyr3247 bool = false
			yyq3247[0] = x.Name != ""
			var yynn3247 int
			if yyr3247 || yy2arr3247 {
				r.EncodeArrayStart(1)
			} else {
				yynn3247 = 0
				for _, b := range yyq3247 {
					if b {
						yynn3247++
					}
				}
				r.EncodeMapStart(yynn3247)
				yynn3247 = 0
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3247[0] {
					yym3249 := z.EncBinary()
					_ = yym3249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3250 := z.EncBinary()
					_ = yym3250
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3247 || yy2arr3247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3251 := z.DecBinary()
	_ = yym3251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3252 := r.ContainerType()
		if yyct3252 == codecSelferValueTypeMap1234 {
			yyl3252 := r.ReadMapStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3252, d)
			}
		} else if yyct3252 == codecSelferValueTypeArray1234 {
			yyl3252 := r.ReadArrayStart()
			if yyl3252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3253Slc
	var yyhl3253 bool = l >= 0
	for yyj3253 := 0; ; yyj3253++ {
		if yyhl3253 {
			if yyj3253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3253Slc = r.DecodeBytes(yys3253Slc, true, true)
		yys3253 := string(yys3253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3253 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3253)
		} // end switch yys3253
	} // end for yyj3253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3255 int
	var yyb3255 bool
	var yyhl3255 bool = l >= 0
	yyj3255++
	if yyhl3255 {
		yyb3255 = yyj3255 > l
	} else {
		yyb3255 = r.CheckBreak()
	}
	if yyb3255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3255++
		if yyhl3255 {
			yyb3255 = yyj3255 > l
		} else {
			yyb3255 = r.CheckBreak()
		}
		if yyb3255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3257 := z.EncBinary()
		_ = yym3257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3258 := !z.EncBinary()
			yy2arr3258 := z.EncBasicHandle().StructToArray
			var yyq3258 [3]bool
			_, _, _ = yysep3258, yyq3258, yy2arr3258
			const yyr3258 bool = false
			yyq3258[0] = true
			yyq3258[1] = x.Kind != ""
			yyq3258[2] = x.APIVersion != ""
			var yynn3258 int
			if yyr3258 || yy2arr3258 {
				r.EncodeArrayStart(3)
			} else {
				yynn3258 = 0
				for _, b := range yyq3258 {
					if b {
						yynn3258++
					}
				}
				r.EncodeMapStart(yynn3258)
				yynn3258 = 0
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[0] {
					yy3260 := &x.Reference
					yy3260.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3258[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3261 := &x.Reference
					yy3261.CodecEncodeSelf(e)
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[1] {
					yym3263 := z.EncBinary()
					_ = yym3263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3258[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3264 := z.EncBinary()
					_ = yym3264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3258[2] {
					yym3266 := z.EncBinary()
					_ = yym3266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3258[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3267 := z.EncBinary()
					_ = yym3267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3258 || yy2arr3258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3268 := z.DecBinary()
	_ = yym3268
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3269 := r.ContainerType()
		if yyct3269 == codecSelferValueTypeMap1234 {
			yyl3269 := r.ReadMapStart()
			if yyl3269 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3269, d)
			}
		} else if yyct3269 == codecSelferValueTypeArray1234 {
			yyl3269 := r.ReadArrayStart()
			if yyl3269 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3269, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3270Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3270Slc
	var yyhl3270 bool = l >= 0
	for yyj3270 := 0; ; yyj3270++ {
		if yyhl3270 {
			if yyj3270 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3270Slc = r.DecodeBytes(yys3270Slc, true, true)
		yys3270 := string(yys3270Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3270 {
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3271 := &x.Reference
				yyv3271.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3270)
		} // end switch yys3270
	} // end for yyj3270
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3274 int
	var yyb3274 bool
	var yyhl3274 bool = l >= 0
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3275 := &x.Reference
		yyv3275.CodecDecodeSelf(d)
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3274++
	if yyhl3274 {
		yyb3274 = yyj3274 > l
	} else {
		yyb3274 = r.CheckBreak()
	}
	if yyb3274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3274++
		if yyhl3274 {
			yyb3274 = yyj3274 > l
		} else {
			yyb3274 = r.CheckBreak()
		}
		if yyb3274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3278 := z.EncBinary()
		_ = yym3278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3279 := !z.EncBinary()
			yy2arr3279 := z.EncBasicHandle().StructToArray
			var yyq3279 [2]bool
			_, _, _ = yysep3279, yyq3279, yy2arr3279
			const yyr3279 bool = false
			yyq3279[0] = x.Component != ""
			yyq3279[1] = x.Host != ""
			var yynn3279 int
			if yyr3279 || yy2arr3279 {
				r.EncodeArrayStart(2)
			} else {
				yynn3279 = 0
				for _, b := range yyq3279 {
					if b {
						yynn3279++
					}
				}
				r.EncodeMapStart(yynn3279)
				yynn3279 = 0
			}
			if yyr3279 || yy2arr3279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3279[0] {
					yym3281 := z.EncBinary()
					_ = yym3281
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3279[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3279 || yy2arr3279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3279[1] {
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3279[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3279 || yy2arr3279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3286 := z.DecBinary()
	_ = yym3286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3287 := r.ContainerType()
		if yyct3287 == codecSelferValueTypeMap1234 {
			yyl3287 := r.ReadMapStart()
			if yyl3287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3287, d)
			}
		} else if yyct3287 == codecSelferValueTypeArray1234 {
			yyl3287 := r.ReadArrayStart()
			if yyl3287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3288Slc
	var yyhl3288 bool = l >= 0
	for yyj3288 := 0; ; yyj3288++ {
		if yyhl3288 {
			if yyj3288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3288Slc = r.DecodeBytes(yys3288Slc, true, true)
		yys3288 := string(yys3288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3288 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3288)
		} // end switch yys3288
	} // end for yyj3288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3291 int
	var yyb3291 bool
	var yyhl3291 bool = l >= 0
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3291++
	if yyhl3291 {
		yyb3291 = yyj3291 > l
	} else {
		yyb3291 = r.CheckBreak()
	}
	if yyb3291 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3291++
		if yyhl3291 {
			yyb3291 = yyj3291 > l
		} else {
			yyb3291 = r.CheckBreak()
		}
		if yyb3291 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3291-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3294 := z.EncBinary()
		_ = yym3294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3295 := !z.EncBinary()
			yy2arr3295 := z.EncBasicHandle().StructToArray
			var yyq3295 [11]bool
			_, _, _ = yysep3295, yyq3295, yy2arr3295
			const yyr3295 bool = false
			yyq3295[2] = x.Reason != ""
			yyq3295[3] = x.Message != ""
			yyq3295[4] = true
			yyq3295[5] = true
			yyq3295[6] = true
			yyq3295[7] = x.Count != 0
			yyq3295[8] = x.Type != ""
			yyq3295[9] = x.Kind != ""
			yyq3295[10] = x.APIVersion != ""
			var yynn3295 int
			if yyr3295 || yy2arr3295 {
				r.EncodeArrayStart(11)
			} else {
				yynn3295 = 2
				for _, b := range yyq3295 {
					if b {
						yynn3295++
					}
				}
				r.EncodeMapStart(yynn3295)
				yynn3295 = 0
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3297 := &x.ObjectMeta
				yy3297.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("metadata"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3298 := &x.ObjectMeta
				yy3298.CodecEncodeSelf(e)
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3300 := &x.InvolvedObject
				yy3300.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3301 := &x.InvolvedObject
				yy3301.CodecEncodeSelf(e)
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[2] {
					yym3303 := z.EncBinary()
					_ = yym3303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3304 := z.EncBinary()
					_ = yym3304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[3] {
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3307 := z.EncBinary()
					_ = yym3307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[4] {
					yy3309 := &x.Source
					yy3309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3310 := &x.Source
					yy3310.CodecEncodeSelf(e)
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[5] {
					yy3312 := &x.FirstTimestamp
					yym3313 := z.EncBinary()
					_ = yym3313
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3312) {
					} else if yym3313 {
						z.EncBinaryMarshal(yy3312)
					} else if !yym3313 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3312)
					} else {
						z.EncFallback(yy3312)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3314 := &x.FirstTimestamp
					yym3315 := z.EncBinary()
					_ = yym3315
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3314) {
					} else if yym3315 {
						z.EncBinaryMarshal(yy3314)
					} else if !yym3315 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3314)
					} else {
						z.EncFallback(yy3314)
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[6] {
					yy3317 := &x.LastTimestamp
					yym3318 := z.EncBinary()
					_ = yym3318
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3317) {
					} else if yym3318 {
						z.EncBinaryMarshal(yy3317)
					} else if !yym3318 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3317)
					} else {
						z.EncFallback(yy3317)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3295[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3319 := &x.LastTimestamp
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3319) {
					} else if yym3320 {
						z.EncBinaryMarshal(yy3319)
					} else if !yym3320 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3319)
					} else {
						z.EncFallback(yy3319)
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[7] {
					yym3322 := z.EncBinary()
					_ = yym3322
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3295[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[8] {
					yym3325 := z.EncBinary()
					_ = yym3325
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3326 := z.EncBinary()
					_ = yym3326
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[9] {
					yym3328 := z.EncBinary()
					_ = yym3328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3295[10] {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3295[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3295 || yy2arr3295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3333 := z.DecBinary()
	_ = yym3333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3334 := r.ContainerType()
		if yyct3334 == codecSelferValueTypeMap1234 {
			yyl3334 := r.ReadMapStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3334, d)
			}
		} else if yyct3334 == codecSelferValueTypeArray1234 {
			yyl3334 := r.ReadArrayStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3334, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3335Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3335Slc
	var yyhl3335 bool = l >= 0
	for yyj3335 := 0; ; yyj3335++ {
		if yyhl3335 {
			if yyj3335 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3335Slc = r.DecodeBytes(yys3335Slc, true, true)
		yys3335 := string(yys3335Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3335 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3336 := &x.ObjectMeta
				yyv3336.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3337 := &x.InvolvedObject
				yyv3337.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3340 := &x.Source
				yyv3340.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3341 := &x.FirstTimestamp
				yym3342 := z.DecBinary()
				_ = yym3342
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3341) {
				} else if yym3342 {
					z.DecBinaryUnmarshal(yyv3341)
				} else if !yym3342 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3341)
				} else {
					z.DecFallback(yyv3341, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3343 := &x.LastTimestamp
				yym3344 := z.DecBinary()
				_ = yym3344
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3343) {
				} else if yym3344 {
					z.DecBinaryUnmarshal(yyv3343)
				} else if !yym3344 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3343)
				} else {
					z.DecFallback(yyv3343, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3335)
		} // end switch yys3335
	} // end for yyj3335
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3349 int
	var yyb3349 bool
	var yyhl3349 bool = l >= 0
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3350 := &x.ObjectMeta
		yyv3350.CodecDecodeSelf(d)
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3351 := &x.InvolvedObject
		yyv3351.CodecDecodeSelf(d)
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3354 := &x.Source
		yyv3354.CodecDecodeSelf(d)
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3355 := &x.FirstTimestamp
		yym3356 := z.DecBinary()
		_ = yym3356
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3355) {
		} else if yym3356 {
			z.DecBinaryUnmarshal(yyv3355)
		} else if !yym3356 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3355)
		} else {
			z.DecFallback(yyv3355, false)
		}
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3357 := &x.LastTimestamp
		yym3358 := z.DecBinary()
		_ = yym3358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3357) {
		} else if yym3358 {
			z.DecBinaryUnmarshal(yyv3357)
		} else if !yym3358 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3357)
		} else {
			z.DecFallback(yyv3357, false)
		}
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3349++
	if yyhl3349 {
		yyb3349 = yyj3349 > l
	} else {
		yyb3349 = r.CheckBreak()
	}
	if yyb3349 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3349++
		if yyhl3349 {
			yyb3349 = yyj3349 > l
		} else {
			yyb3349 = r.CheckBreak()
		}
		if yyb3349 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3349-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3363 := z.EncBinary()
		_ = yym3363
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3364 := !z.EncBinary()
			yy2arr3364 := z.EncBasicHandle().StructToArray
			var yyq3364 [4]bool
			_, _, _ = yysep3364, yyq3364, yy2arr3364
			const yyr3364 bool = false
			yyq3364[0] = true
			yyq3364[2] = x.Kind != ""
			yyq3364[3] = x.APIVersion != ""
			var yynn3364 int
			if yyr3364 || yy2arr3364 {
				r.EncodeArrayStart(4)
			} else {
				yynn3364 = 1
				for _, b := range yyq3364 {
					if b {
						yynn3364++
					}
				}
				r.EncodeMapStart(yynn3364)
				yynn3364 = 0
			}
			if yyr3364 || yy2arr3364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3364[0] {
					yy3366 := &x.ListMeta
					yym3367 := z.EncBinary()
					_ = yym3367
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3366) {
					} else {
						z.EncFallback(yy3366)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3364[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3368 := &x.ListMeta
					yym3369 := z.EncBinary()
					_ = yym3369
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3368) {
					} else {
						z.EncFallback(yy3368)
					}
				}
			}
			if yyr3364 || yy2arr3364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3371 := z.EncBinary()
					_ = yym3371
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3372 := z.EncBinary()
					_ = yym3372
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3364 || yy2arr3364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3364[2] {
					yym3374 := z.EncBinary()
					_ = yym3374
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3364[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3375 := z.EncBinary()
					_ = yym3375
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3364 || yy2arr3364 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3364[3] {
					yym3377 := z.EncBinary()
					_ = yym3377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3364[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3378 := z.EncBinary()
					_ = yym3378
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3364 || yy2arr3364 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3379 := z.DecBinary()
	_ = yym3379
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3380 := r.ContainerType()
		if yyct3380 == codecSelferValueTypeMap1234 {
			yyl3380 := r.ReadMapStart()
			if yyl3380 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3380, d)
			}
		} else if yyct3380 == codecSelferValueTypeArray1234 {
			yyl3380 := r.ReadArrayStart()
			if yyl3380 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3380, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3381Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3381Slc
	var yyhl3381 bool = l >= 0
	for yyj3381 := 0; ; yyj3381++ {
		if yyhl3381 {
			if yyj3381 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3381Slc = r.DecodeBytes(yys3381Slc, true, true)
		yys3381 := string(yys3381Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3381 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3382 := &x.ListMeta
				yym3383 := z.DecBinary()
				_ = yym3383
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3382) {
				} else {
					z.DecFallback(yyv3382, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3384 := &x.Items
				yym3385 := z.DecBinary()
				_ = yym3385
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3384), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3381)
		} // end switch yys3381
	} // end for yyj3381
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3388 int
	var yyb3388 bool
	var yyhl3388 bool = l >= 0
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3389 := &x.ListMeta
		yym3390 := z.DecBinary()
		_ = yym3390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3389) {
		} else {
			z.DecFallback(yyv3389, false)
		}
	}
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3391 := &x.Items
		yym3392 := z.DecBinary()
		_ = yym3392
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3391), d)
		}
	}
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3388++
	if yyhl3388 {
		yyb3388 = yyj3388 > l
	} else {
		yyb3388 = r.CheckBreak()
	}
	if yyb3388 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3388++
		if yyhl3388 {
			yyb3388 = yyj3388 > l
		} else {
			yyb3388 = r.CheckBreak()
		}
		if yyb3388 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3388-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3395 := z.EncBinary()
		_ = yym3395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3396 := !z.EncBinary()
			yy2arr3396 := z.EncBasicHandle().StructToArray
			var yyq3396 [4]bool
			_, _, _ = yysep3396, yyq3396, yy2arr3396
			const yyr3396 bool = false
			yyq3396[0] = true
			yyq3396[2] = x.Kind != ""
			yyq3396[3] = x.APIVersion != ""
			var yynn3396 int
			if yyr3396 || yy2arr3396 {
				r.EncodeArrayStart(4)
			} else {
				yynn3396 = 1
				for _, b := range yyq3396 {
					if b {
						yynn3396++
					}
				}
				r.EncodeMapStart(yynn3396)
				yynn3396 = 0
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3396[0] {
					yy3398 := &x.ListMeta
					yym3399 := z.EncBinary()
					_ = yym3399
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3398) {
					} else {
						z.EncFallback(yy3398)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3400 := &x.ListMeta
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3400) {
					} else {
						z.EncFallback(yy3400)
					}
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3403 := z.EncBinary()
					_ = yym3403
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3404 := z.EncBinary()
					_ = yym3404
					if false {
					} else {
						h.encSliceruntime_RawExtension(([]pkg6_runtime.RawExtension)(x.Items), e)
					}
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3396[2] {
					yym3406 := z.EncBinary()
					_ = yym3406
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3396[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3407 := z.EncBinary()
					_ = yym3407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3396[3] {
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3396[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3396 || yy2arr3396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3411 := z.DecBinary()
	_ = yym3411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3412 := r.ContainerType()
		if yyct3412 == codecSelferValueTypeMap1234 {
			yyl3412 := r.ReadMapStart()
			if yyl3412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3412, d)
			}
		} else if yyct3412 == codecSelferValueTypeArray1234 {
			yyl3412 := r.ReadArrayStart()
			if yyl3412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3413Slc
	var yyhl3413 bool = l >= 0
	for yyj3413 := 0; ; yyj3413++ {
		if yyhl3413 {
			if yyj3413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3413Slc = r.DecodeBytes(yys3413Slc, true, true)
		yys3413 := string(yys3413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3413 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3414 := &x.ListMeta
				yym3415 := z.DecBinary()
				_ = yym3415
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3414) {
				} else {
					z.DecFallback(yyv3414, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3416 := &x.Items
				yym3417 := z.DecBinary()
				_ = yym3417
				if false {
				} else {
					h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3416), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3413)
		} // end switch yys3413
	} // end for yyj3413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3420 int
	var yyb3420 bool
	var yyhl3420 bool = l >= 0
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3421 := &x.ListMeta
		yym3422 := z.DecBinary()
		_ = yym3422
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3421) {
		} else {
			z.DecFallback(yyv3421, false)
		}
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3423 := &x.Items
		yym3424 := z.DecBinary()
		_ = yym3424
		if false {
		} else {
			h.decSliceruntime_RawExtension((*[]pkg6_runtime.RawExtension)(yyv3423), d)
		}
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3420++
	if yyhl3420 {
		yyb3420 = yyj3420 > l
	} else {
		yyb3420 = r.CheckBreak()
	}
	if yyb3420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3420++
		if yyhl3420 {
			yyb3420 = yyj3420 > l
		} else {
			yyb3420 = r.CheckBreak()
		}
		if yyb3420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3427 := z.EncBinary()
	_ = yym3427
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3428 := z.DecBinary()
	_ = yym3428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3429 := z.EncBinary()
		_ = yym3429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3430 := !z.EncBinary()
			yy2arr3430 := z.EncBasicHandle().StructToArray
			var yyq3430 [6]bool
			_, _, _ = yysep3430, yyq3430, yy2arr3430
			const yyr3430 bool = false
			yyq3430[0] = x.Type != ""
			yyq3430[1] = len(x.Max) != 0
			yyq3430[2] = len(x.Min) != 0
			yyq3430[3] = len(x.Default) != 0
			yyq3430[4] = len(x.DefaultRequest) != 0
			yyq3430[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3430 int
			if yyr3430 || yy2arr3430 {
				r.EncodeArrayStart(6)
			} else {
				yynn3430 = 0
				for _, b := range yyq3430 {
					if b {
						yynn3430++
					}
				}
				r.EncodeMapStart(yynn3430)
				yynn3430 = 0
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3430[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3430[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3430[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3430[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3430[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3430[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3430[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3430 || yy2arr3430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3437 := z.DecBinary()
	_ = yym3437
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3438 := r.ContainerType()
		if yyct3438 == codecSelferValueTypeMap1234 {
			yyl3438 := r.ReadMapStart()
			if yyl3438 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3438, d)
			}
		} else if yyct3438 == codecSelferValueTypeArray1234 {
			yyl3438 := r.ReadArrayStart()
			if yyl3438 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3438, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3439Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3439Slc
	var yyhl3439 bool = l >= 0
	for yyj3439 := 0; ; yyj3439++ {
		if yyhl3439 {
			if yyj3439 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3439Slc = r.DecodeBytes(yys3439Slc, true, true)
		yys3439 := string(yys3439Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3439 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3441 := &x.Max
				yyv3441.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3442 := &x.Min
				yyv3442.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3443 := &x.Default
				yyv3443.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3444 := &x.DefaultRequest
				yyv3444.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3445 := &x.MaxLimitRequestRatio
				yyv3445.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3439)
		} // end switch yys3439
	} // end for yyj3439
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3446 int
	var yyb3446 bool
	var yyhl3446 bool = l >= 0
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3448 := &x.Max
		yyv3448.CodecDecodeSelf(d)
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3449 := &x.Min
		yyv3449.CodecDecodeSelf(d)
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3450 := &x.Default
		yyv3450.CodecDecodeSelf(d)
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3451 := &x.DefaultRequest
		yyv3451.CodecDecodeSelf(d)
	}
	yyj3446++
	if yyhl3446 {
		yyb3446 = yyj3446 > l
	} else {
		yyb3446 = r.CheckBreak()
	}
	if yyb3446 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3452 := &x.MaxLimitRequestRatio
		yyv3452.CodecDecodeSelf(d)
	}
	for {
		yyj3446++
		if yyhl3446 {
			yyb3446 = yyj3446 > l
		} else {
			yyb3446 = r.CheckBreak()
		}
		if yyb3446 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3446-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3453 := z.EncBinary()
		_ = yym3453
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3454 := !z.EncBinary()
			yy2arr3454 := z.EncBasicHandle().StructToArray
			var yyq3454 [1]bool
			_, _, _ = yysep3454, yyq3454, yy2arr3454
			const yyr3454 bool = false
			var yynn3454 int
			if yyr3454 || yy2arr3454 {
				r.EncodeArrayStart(1)
			} else {
				yynn3454 = 1
				for _, b := range yyq3454 {
					if b {
						yynn3454++
					}
				}
				r.EncodeMapStart(yynn3454)
				yynn3454 = 0
			}
			if yyr3454 || yy2arr3454 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3456 := z.EncBinary()
					_ = yym3456
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3457 := z.EncBinary()
					_ = yym3457
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3454 || yy2arr3454 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3458 := z.DecBinary()
	_ = yym3458
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3459 := r.ContainerType()
		if yyct3459 == codecSelferValueTypeMap1234 {
			yyl3459 := r.ReadMapStart()
			if yyl3459 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3459, d)
			}
		} else if yyct3459 == codecSelferValueTypeArray1234 {
			yyl3459 := r.ReadArrayStart()
			if yyl3459 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3459, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3460Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3460Slc
	var yyhl3460 bool = l >= 0
	for yyj3460 := 0; ; yyj3460++ {
		if yyhl3460 {
			if yyj3460 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3460Slc = r.DecodeBytes(yys3460Slc, true, true)
		yys3460 := string(yys3460Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3460 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3461 := &x.Limits
				yym3462 := z.DecBinary()
				_ = yym3462
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3461), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3460)
		} // end switch yys3460
	} // end for yyj3460
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3463 int
	var yyb3463 bool
	var yyhl3463 bool = l >= 0
	yyj3463++
	if yyhl3463 {
		yyb3463 = yyj3463 > l
	} else {
		yyb3463 = r.CheckBreak()
	}
	if yyb3463 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3464 := &x.Limits
		yym3465 := z.DecBinary()
		_ = yym3465
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3464), d)
		}
	}
	for {
		yyj3463++
		if yyhl3463 {
			yyb3463 = yyj3463 > l
		} else {
			yyb3463 = r.CheckBreak()
		}
		if yyb3463 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3463-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3466 := z.EncBinary()
		_ = yym3466
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3467 := !z.EncBinary()
			yy2arr3467 := z.EncBasicHandle().StructToArray
			var yyq3467 [4]bool
			_, _, _ = yysep3467, yyq3467, yy2arr3467
			const yyr3467 bool = false
			yyq3467[0] = true
			yyq3467[1] = true
			yyq3467[2] = x.Kind != ""
			yyq3467[3] = x.APIVersion != ""
			var yynn3467 int
			if yyr3467 || yy2arr3467 {
				r.EncodeArrayStart(4)
			} else {
				yynn3467 = 0
				for _, b := range yyq3467 {
					if b {
						yynn3467++
					}
				}
				r.EncodeMapStart(yynn3467)
				yynn3467 = 0
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[0] {
					yy3469 := &x.ObjectMeta
					yy3469.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3467[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3470 := &x.ObjectMeta
					yy3470.CodecEncodeSelf(e)
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[1] {
					yy3472 := &x.Spec
					yy3472.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3467[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3473 := &x.Spec
					yy3473.CodecEncodeSelf(e)
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[2] {
					yym3475 := z.EncBinary()
					_ = yym3475
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3467[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3467[3] {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3467[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3467 || yy2arr3467 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3480 := z.DecBinary()
	_ = yym3480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3481 := r.ContainerType()
		if yyct3481 == codecSelferValueTypeMap1234 {
			yyl3481 := r.ReadMapStart()
			if yyl3481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3481, d)
			}
		} else if yyct3481 == codecSelferValueTypeArray1234 {
			yyl3481 := r.ReadArrayStart()
			if yyl3481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3482Slc
	var yyhl3482 bool = l >= 0
	for yyj3482 := 0; ; yyj3482++ {
		if yyhl3482 {
			if yyj3482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3482Slc = r.DecodeBytes(yys3482Slc, true, true)
		yys3482 := string(yys3482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3482 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3483 := &x.ObjectMeta
				yyv3483.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3484 := &x.Spec
				yyv3484.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3482)
		} // end switch yys3482
	} // end for yyj3482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3487 int
	var yyb3487 bool
	var yyhl3487 bool = l >= 0
	yyj3487++
	if yyhl3487 {
		yyb3487 = yyj3487 > l
	} else {
		yyb3487 = r.CheckBreak()
	}
	if yyb3487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3488 := &x.ObjectMeta
		yyv3488.CodecDecodeSelf(d)
	}
	yyj3487++
	if yyhl3487 {
		yyb3487 = yyj3487 > l
	} else {
		yyb3487 = r.CheckBreak()
	}
	if yyb3487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3489 := &x.Spec
		yyv3489.CodecDecodeSelf(d)
	}
	yyj3487++
	if yyhl3487 {
		yyb3487 = yyj3487 > l
	} else {
		yyb3487 = r.CheckBreak()
	}
	if yyb3487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3487++
	if yyhl3487 {
		yyb3487 = yyj3487 > l
	} else {
		yyb3487 = r.CheckBreak()
	}
	if yyb3487 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3487++
		if yyhl3487 {
			yyb3487 = yyj3487 > l
		} else {
			yyb3487 = r.CheckBreak()
		}
		if yyb3487 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3487-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3492 := z.EncBinary()
		_ = yym3492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3493 := !z.EncBinary()
			yy2arr3493 := z.EncBasicHandle().StructToArray
			var yyq3493 [4]bool
			_, _, _ = yysep3493, yyq3493, yy2arr3493
			const yyr3493 bool = false
			yyq3493[0] = true
			yyq3493[2] = x.Kind != ""
			yyq3493[3] = x.APIVersion != ""
			var yynn3493 int
			if yyr3493 || yy2arr3493 {
				r.EncodeArrayStart(4)
			} else {
				yynn3493 = 1
				for _, b := range yyq3493 {
					if b {
						yynn3493++
					}
				}
				r.EncodeMapStart(yynn3493)
				yynn3493 = 0
			}
			if yyr3493 || yy2arr3493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3493[0] {
					yy3495 := &x.ListMeta
					yym3496 := z.EncBinary()
					_ = yym3496
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3495) {
					} else {
						z.EncFallback(yy3495)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3497 := &x.ListMeta
					yym3498 := z.EncBinary()
					_ = yym3498
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3497) {
					} else {
						z.EncFallback(yy3497)
					}
				}
			}
			if yyr3493 || yy2arr3493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3500 := z.EncBinary()
					_ = yym3500
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3501 := z.EncBinary()
					_ = yym3501
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3493 || yy2arr3493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3493[2] {
					yym3503 := z.EncBinary()
					_ = yym3503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3504 := z.EncBinary()
					_ = yym3504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3493 || yy2arr3493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3493[3] {
					yym3506 := z.EncBinary()
					_ = yym3506
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3493[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3507 := z.EncBinary()
					_ = yym3507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3493 || yy2arr3493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3508 := z.DecBinary()
	_ = yym3508
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3509 := r.ContainerType()
		if yyct3509 == codecSelferValueTypeMap1234 {
			yyl3509 := r.ReadMapStart()
			if yyl3509 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3509, d)
			}
		} else if yyct3509 == codecSelferValueTypeArray1234 {
			yyl3509 := r.ReadArrayStart()
			if yyl3509 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3509, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3510Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3510Slc
	var yyhl3510 bool = l >= 0
	for yyj3510 := 0; ; yyj3510++ {
		if yyhl3510 {
			if yyj3510 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3510Slc = r.DecodeBytes(yys3510Slc, true, true)
		yys3510 := string(yys3510Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3510 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3511 := &x.ListMeta
				yym3512 := z.DecBinary()
				_ = yym3512
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3511) {
				} else {
					z.DecFallback(yyv3511, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3513 := &x.Items
				yym3514 := z.DecBinary()
				_ = yym3514
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3513), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3510)
		} // end switch yys3510
	} // end for yyj3510
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3517 int
	var yyb3517 bool
	var yyhl3517 bool = l >= 0
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3518 := &x.ListMeta
		yym3519 := z.DecBinary()
		_ = yym3519
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3518) {
		} else {
			z.DecFallback(yyv3518, false)
		}
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3520 := &x.Items
		yym3521 := z.DecBinary()
		_ = yym3521
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3520), d)
		}
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3517++
	if yyhl3517 {
		yyb3517 = yyj3517 > l
	} else {
		yyb3517 = r.CheckBreak()
	}
	if yyb3517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3517++
		if yyhl3517 {
			yyb3517 = yyj3517 > l
		} else {
			yyb3517 = r.CheckBreak()
		}
		if yyb3517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3524 := z.EncBinary()
		_ = yym3524
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3525 := !z.EncBinary()
			yy2arr3525 := z.EncBasicHandle().StructToArray
			var yyq3525 [1]bool
			_, _, _ = yysep3525, yyq3525, yy2arr3525
			const yyr3525 bool = false
			yyq3525[0] = len(x.Hard) != 0
			var yynn3525 int
			if yyr3525 || yy2arr3525 {
				r.EncodeArrayStart(1)
			} else {
				yynn3525 = 0
				for _, b := range yyq3525 {
					if b {
						yynn3525++
					}
				}
				r.EncodeMapStart(yynn3525)
				yynn3525 = 0
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3525[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3525[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3525 || yy2arr3525 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3527 := z.DecBinary()
	_ = yym3527
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3528 := r.ContainerType()
		if yyct3528 == codecSelferValueTypeMap1234 {
			yyl3528 := r.ReadMapStart()
			if yyl3528 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3528, d)
			}
		} else if yyct3528 == codecSelferValueTypeArray1234 {
			yyl3528 := r.ReadArrayStart()
			if yyl3528 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3528, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3529Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3529Slc
	var yyhl3529 bool = l >= 0
	for yyj3529 := 0; ; yyj3529++ {
		if yyhl3529 {
			if yyj3529 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3529Slc = r.DecodeBytes(yys3529Slc, true, true)
		yys3529 := string(yys3529Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3529 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3530 := &x.Hard
				yyv3530.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3529)
		} // end switch yys3529
	} // end for yyj3529
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3531 int
	var yyb3531 bool
	var yyhl3531 bool = l >= 0
	yyj3531++
	if yyhl3531 {
		yyb3531 = yyj3531 > l
	} else {
		yyb3531 = r.CheckBreak()
	}
	if yyb3531 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3532 := &x.Hard
		yyv3532.CodecDecodeSelf(d)
	}
	for {
		yyj3531++
		if yyhl3531 {
			yyb3531 = yyj3531 > l
		} else {
			yyb3531 = r.CheckBreak()
		}
		if yyb3531 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3531-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3533 := z.EncBinary()
		_ = yym3533
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3534 := !z.EncBinary()
			yy2arr3534 := z.EncBasicHandle().StructToArray
			var yyq3534 [2]bool
			_, _, _ = yysep3534, yyq3534, yy2arr3534
			const yyr3534 bool = false
			yyq3534[0] = len(x.Hard) != 0
			yyq3534[1] = len(x.Used) != 0
			var yynn3534 int
			if yyr3534 || yy2arr3534 {
				r.EncodeArrayStart(2)
			} else {
				yynn3534 = 0
				for _, b := range yyq3534 {
					if b {
						yynn3534++
					}
				}
				r.EncodeMapStart(yynn3534)
				yynn3534 = 0
			}
			if yyr3534 || yy2arr3534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3534[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3534[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3534 || yy2arr3534 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3534[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3534[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3534 || yy2arr3534 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3537 := z.DecBinary()
	_ = yym3537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3538 := r.ContainerType()
		if yyct3538 == codecSelferValueTypeMap1234 {
			yyl3538 := r.ReadMapStart()
			if yyl3538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3538, d)
			}
		} else if yyct3538 == codecSelferValueTypeArray1234 {
			yyl3538 := r.ReadArrayStart()
			if yyl3538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3539Slc
	var yyhl3539 bool = l >= 0
	for yyj3539 := 0; ; yyj3539++ {
		if yyhl3539 {
			if yyj3539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3539Slc = r.DecodeBytes(yys3539Slc, true, true)
		yys3539 := string(yys3539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3539 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3540 := &x.Hard
				yyv3540.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3541 := &x.Used
				yyv3541.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3539)
		} // end switch yys3539
	} // end for yyj3539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3542 int
	var yyb3542 bool
	var yyhl3542 bool = l >= 0
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3543 := &x.Hard
		yyv3543.CodecDecodeSelf(d)
	}
	yyj3542++
	if yyhl3542 {
		yyb3542 = yyj3542 > l
	} else {
		yyb3542 = r.CheckBreak()
	}
	if yyb3542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3544 := &x.Used
		yyv3544.CodecDecodeSelf(d)
	}
	for {
		yyj3542++
		if yyhl3542 {
			yyb3542 = yyj3542 > l
		} else {
			yyb3542 = r.CheckBreak()
		}
		if yyb3542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3545 := z.EncBinary()
		_ = yym3545
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3546 := !z.EncBinary()
			yy2arr3546 := z.EncBasicHandle().StructToArray
			var yyq3546 [5]bool
			_, _, _ = yysep3546, yyq3546, yy2arr3546
			const yyr3546 bool = false
			yyq3546[0] = true
			yyq3546[1] = true
			yyq3546[2] = true
			yyq3546[3] = x.Kind != ""
			yyq3546[4] = x.APIVersion != ""
			var yynn3546 int
			if yyr3546 || yy2arr3546 {
				r.EncodeArrayStart(5)
			} else {
				yynn3546 = 0
				for _, b := range yyq3546 {
					if b {
						yynn3546++
					}
				}
				r.EncodeMapStart(yynn3546)
				yynn3546 = 0
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[0] {
					yy3548 := &x.ObjectMeta
					yy3548.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3549 := &x.ObjectMeta
					yy3549.CodecEncodeSelf(e)
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[1] {
					yy3551 := &x.Spec
					yy3551.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3552 := &x.Spec
					yy3552.CodecEncodeSelf(e)
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[2] {
					yy3554 := &x.Status
					yy3554.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3546[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3555 := &x.Status
					yy3555.CodecEncodeSelf(e)
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[3] {
					yym3557 := z.EncBinary()
					_ = yym3557
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3546[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3558 := z.EncBinary()
					_ = yym3558
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3546[4] {
					yym3560 := z.EncBinary()
					_ = yym3560
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3546[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3561 := z.EncBinary()
					_ = yym3561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3546 || yy2arr3546 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3562 := z.DecBinary()
	_ = yym3562
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3563 := r.ContainerType()
		if yyct3563 == codecSelferValueTypeMap1234 {
			yyl3563 := r.ReadMapStart()
			if yyl3563 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3563, d)
			}
		} else if yyct3563 == codecSelferValueTypeArray1234 {
			yyl3563 := r.ReadArrayStart()
			if yyl3563 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3563, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3564Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3564Slc
	var yyhl3564 bool = l >= 0
	for yyj3564 := 0; ; yyj3564++ {
		if yyhl3564 {
			if yyj3564 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3564Slc = r.DecodeBytes(yys3564Slc, true, true)
		yys3564 := string(yys3564Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3564 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3565 := &x.ObjectMeta
				yyv3565.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3566 := &x.Spec
				yyv3566.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3567 := &x.Status
				yyv3567.CodecDecodeSelf(d)
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3564)
		} // end switch yys3564
	} // end for yyj3564
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3570 int
	var yyb3570 bool
	var yyhl3570 bool = l >= 0
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3571 := &x.ObjectMeta
		yyv3571.CodecDecodeSelf(d)
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3572 := &x.Spec
		yyv3572.CodecDecodeSelf(d)
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3573 := &x.Status
		yyv3573.CodecDecodeSelf(d)
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3570++
	if yyhl3570 {
		yyb3570 = yyj3570 > l
	} else {
		yyb3570 = r.CheckBreak()
	}
	if yyb3570 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3570++
		if yyhl3570 {
			yyb3570 = yyj3570 > l
		} else {
			yyb3570 = r.CheckBreak()
		}
		if yyb3570 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3570-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3576 := z.EncBinary()
		_ = yym3576
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3577 := !z.EncBinary()
			yy2arr3577 := z.EncBasicHandle().StructToArray
			var yyq3577 [4]bool
			_, _, _ = yysep3577, yyq3577, yy2arr3577
			const yyr3577 bool = false
			yyq3577[0] = true
			yyq3577[2] = x.Kind != ""
			yyq3577[3] = x.APIVersion != ""
			var yynn3577 int
			if yyr3577 || yy2arr3577 {
				r.EncodeArrayStart(4)
			} else {
				yynn3577 = 1
				for _, b := range yyq3577 {
					if b {
						yynn3577++
					}
				}
				r.EncodeMapStart(yynn3577)
				yynn3577 = 0
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3577[0] {
					yy3579 := &x.ListMeta
					yym3580 := z.EncBinary()
					_ = yym3580
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3579) {
					} else {
						z.EncFallback(yy3579)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3577[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3581 := &x.ListMeta
					yym3582 := z.EncBinary()
					_ = yym3582
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3581) {
					} else {
						z.EncFallback(yy3581)
					}
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3584 := z.EncBinary()
					_ = yym3584
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3585 := z.EncBinary()
					_ = yym3585
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3577[2] {
					yym3587 := z.EncBinary()
					_ = yym3587
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3577[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3588 := z.EncBinary()
					_ = yym3588
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3577[3] {
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3577[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3577 || yy2arr3577 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3592 := z.DecBinary()
	_ = yym3592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3593 := r.ContainerType()
		if yyct3593 == codecSelferValueTypeMap1234 {
			yyl3593 := r.ReadMapStart()
			if yyl3593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3593, d)
			}
		} else if yyct3593 == codecSelferValueTypeArray1234 {
			yyl3593 := r.ReadArrayStart()
			if yyl3593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3594Slc
	var yyhl3594 bool = l >= 0
	for yyj3594 := 0; ; yyj3594++ {
		if yyhl3594 {
			if yyj3594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3594Slc = r.DecodeBytes(yys3594Slc, true, true)
		yys3594 := string(yys3594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3594 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3595 := &x.ListMeta
				yym3596 := z.DecBinary()
				_ = yym3596
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3595) {
				} else {
					z.DecFallback(yyv3595, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3597 := &x.Items
				yym3598 := z.DecBinary()
				_ = yym3598
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3597), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3594)
		} // end switch yys3594
	} // end for yyj3594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3601 int
	var yyb3601 bool
	var yyhl3601 bool = l >= 0
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3602 := &x.ListMeta
		yym3603 := z.DecBinary()
		_ = yym3603
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3602) {
		} else {
			z.DecFallback(yyv3602, false)
		}
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3604 := &x.Items
		yym3605 := z.DecBinary()
		_ = yym3605
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3604), d)
		}
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3601++
	if yyhl3601 {
		yyb3601 = yyj3601 > l
	} else {
		yyb3601 = r.CheckBreak()
	}
	if yyb3601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3601++
		if yyhl3601 {
			yyb3601 = yyj3601 > l
		} else {
			yyb3601 = r.CheckBreak()
		}
		if yyb3601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3608 := z.EncBinary()
		_ = yym3608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3609 := !z.EncBinary()
			yy2arr3609 := z.EncBasicHandle().StructToArray
			var yyq3609 [5]bool
			_, _, _ = yysep3609, yyq3609, yy2arr3609
			const yyr3609 bool = false
			yyq3609[0] = true
			yyq3609[1] = len(x.Data) != 0
			yyq3609[2] = x.Type != ""
			yyq3609[3] = x.Kind != ""
			yyq3609[4] = x.APIVersion != ""
			var yynn3609 int
			if yyr3609 || yy2arr3609 {
				r.EncodeArrayStart(5)
			} else {
				yynn3609 = 0
				for _, b := range yyq3609 {
					if b {
						yynn3609++
					}
				}
				r.EncodeMapStart(yynn3609)
				yynn3609 = 0
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[0] {
					yy3611 := &x.ObjectMeta
					yy3611.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3609[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3612 := &x.ObjectMeta
					yy3612.CodecEncodeSelf(e)
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3614 := z.EncBinary()
						_ = yym3614
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3609[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3615 := z.EncBinary()
						_ = yym3615
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[2] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[3] {
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3619 := z.EncBinary()
					_ = yym3619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3609[4] {
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3609[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3622 := z.EncBinary()
					_ = yym3622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3609 || yy2arr3609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3623 := z.DecBinary()
	_ = yym3623
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3624 := r.ContainerType()
		if yyct3624 == codecSelferValueTypeMap1234 {
			yyl3624 := r.ReadMapStart()
			if yyl3624 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3624, d)
			}
		} else if yyct3624 == codecSelferValueTypeArray1234 {
			yyl3624 := r.ReadArrayStart()
			if yyl3624 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3624, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3625Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3625Slc
	var yyhl3625 bool = l >= 0
	for yyj3625 := 0; ; yyj3625++ {
		if yyhl3625 {
			if yyj3625 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3625Slc = r.DecodeBytes(yys3625Slc, true, true)
		yys3625 := string(yys3625Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3625 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3626 := &x.ObjectMeta
				yyv3626.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3627 := &x.Data
				yym3628 := z.DecBinary()
				_ = yym3628
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3627), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3625)
		} // end switch yys3625
	} // end for yyj3625
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3632 int
	var yyb3632 bool
	var yyhl3632 bool = l >= 0
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3633 := &x.ObjectMeta
		yyv3633.CodecDecodeSelf(d)
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3634 := &x.Data
		yym3635 := z.DecBinary()
		_ = yym3635
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3634), d)
		}
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3632++
	if yyhl3632 {
		yyb3632 = yyj3632 > l
	} else {
		yyb3632 = r.CheckBreak()
	}
	if yyb3632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3632++
		if yyhl3632 {
			yyb3632 = yyj3632 > l
		} else {
			yyb3632 = r.CheckBreak()
		}
		if yyb3632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3639 := z.EncBinary()
	_ = yym3639
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3640 := z.DecBinary()
	_ = yym3640
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3641 := z.EncBinary()
		_ = yym3641
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3642 := !z.EncBinary()
			yy2arr3642 := z.EncBasicHandle().StructToArray
			var yyq3642 [4]bool
			_, _, _ = yysep3642, yyq3642, yy2arr3642
			const yyr3642 bool = false
			yyq3642[0] = true
			yyq3642[2] = x.Kind != ""
			yyq3642[3] = x.APIVersion != ""
			var yynn3642 int
			if yyr3642 || yy2arr3642 {
				r.EncodeArrayStart(4)
			} else {
				yynn3642 = 1
				for _, b := range yyq3642 {
					if b {
						yynn3642++
					}
				}
				r.EncodeMapStart(yynn3642)
				yynn3642 = 0
			}
			if yyr3642 || yy2arr3642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3642[0] {
					yy3644 := &x.ListMeta
					yym3645 := z.EncBinary()
					_ = yym3645
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3644) {
					} else {
						z.EncFallback(yy3644)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3642[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3646 := &x.ListMeta
					yym3647 := z.EncBinary()
					_ = yym3647
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3646) {
					} else {
						z.EncFallback(yy3646)
					}
				}
			}
			if yyr3642 || yy2arr3642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3649 := z.EncBinary()
					_ = yym3649
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3650 := z.EncBinary()
					_ = yym3650
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3642 || yy2arr3642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3642[2] {
					yym3652 := z.EncBinary()
					_ = yym3652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3642[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3653 := z.EncBinary()
					_ = yym3653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3642 || yy2arr3642 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3642[3] {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3642[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3642 || yy2arr3642 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3657 := z.DecBinary()
	_ = yym3657
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3658 := r.ContainerType()
		if yyct3658 == codecSelferValueTypeMap1234 {
			yyl3658 := r.ReadMapStart()
			if yyl3658 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3658, d)
			}
		} else if yyct3658 == codecSelferValueTypeArray1234 {
			yyl3658 := r.ReadArrayStart()
			if yyl3658 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3658, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3659Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3659Slc
	var yyhl3659 bool = l >= 0
	for yyj3659 := 0; ; yyj3659++ {
		if yyhl3659 {
			if yyj3659 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3659Slc = r.DecodeBytes(yys3659Slc, true, true)
		yys3659 := string(yys3659Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3659 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3660 := &x.ListMeta
				yym3661 := z.DecBinary()
				_ = yym3661
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3660) {
				} else {
					z.DecFallback(yyv3660, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3662 := &x.Items
				yym3663 := z.DecBinary()
				_ = yym3663
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3662), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3659)
		} // end switch yys3659
	} // end for yyj3659
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3666 int
	var yyb3666 bool
	var yyhl3666 bool = l >= 0
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3667 := &x.ListMeta
		yym3668 := z.DecBinary()
		_ = yym3668
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3667) {
		} else {
			z.DecFallback(yyv3667, false)
		}
	}
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3669 := &x.Items
		yym3670 := z.DecBinary()
		_ = yym3670
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3669), d)
		}
	}
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3666++
	if yyhl3666 {
		yyb3666 = yyj3666 > l
	} else {
		yyb3666 = r.CheckBreak()
	}
	if yyb3666 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3666++
		if yyhl3666 {
			yyb3666 = yyj3666 > l
		} else {
			yyb3666 = r.CheckBreak()
		}
		if yyb3666 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3666-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3673 := z.EncBinary()
		_ = yym3673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3674 := !z.EncBinary()
			yy2arr3674 := z.EncBasicHandle().StructToArray
			var yyq3674 [4]bool
			_, _, _ = yysep3674, yyq3674, yy2arr3674
			const yyr3674 bool = false
			yyq3674[0] = true
			yyq3674[1] = len(x.Data) != 0
			yyq3674[2] = x.Kind != ""
			yyq3674[3] = x.APIVersion != ""
			var yynn3674 int
			if yyr3674 || yy2arr3674 {
				r.EncodeArrayStart(4)
			} else {
				yynn3674 = 0
				for _, b := range yyq3674 {
					if b {
						yynn3674++
					}
				}
				r.EncodeMapStart(yynn3674)
				yynn3674 = 0
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[0] {
					yy3676 := &x.ObjectMeta
					yy3676.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3674[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3677 := &x.ObjectMeta
					yy3677.CodecEncodeSelf(e)
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[1] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3679 := z.EncBinary()
						_ = yym3679
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3674[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3680 := z.EncBinary()
						_ = yym3680
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[2] {
					yym3682 := z.EncBinary()
					_ = yym3682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3683 := z.EncBinary()
					_ = yym3683
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[3] {
					yym3685 := z.EncBinary()
					_ = yym3685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3686 := z.EncBinary()
					_ = yym3686
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3687 := z.DecBinary()
	_ = yym3687
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3688 := r.ContainerType()
		if yyct3688 == codecSelferValueTypeMap1234 {
			yyl3688 := r.ReadMapStart()
			if yyl3688 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3688, d)
			}
		} else if yyct3688 == codecSelferValueTypeArray1234 {
			yyl3688 := r.ReadArrayStart()
			if yyl3688 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3688, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3689Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3689Slc
	var yyhl3689 bool = l >= 0
	for yyj3689 := 0; ; yyj3689++ {
		if yyhl3689 {
			if yyj3689 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3689Slc = r.DecodeBytes(yys3689Slc, true, true)
		yys3689 := string(yys3689Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3689 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3690 := &x.ObjectMeta
				yyv3690.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3691 := &x.Data
				yym3692 := z.DecBinary()
				_ = yym3692
				if false {
				} else {
					z.F.DecMapStringStringX(yyv3691, false, d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3689)
		} // end switch yys3689
	} // end for yyj3689
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3695 int
	var yyb3695 bool
	var yyhl3695 bool = l >= 0
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3696 := &x.ObjectMeta
		yyv3696.CodecDecodeSelf(d)
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3697 := &x.Data
		yym3698 := z.DecBinary()
		_ = yym3698
		if false {
		} else {
			z.F.DecMapStringStringX(yyv3697, false, d)
		}
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3695++
	if yyhl3695 {
		yyb3695 = yyj3695 > l
	} else {
		yyb3695 = r.CheckBreak()
	}
	if yyb3695 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3695++
		if yyhl3695 {
			yyb3695 = yyj3695 > l
		} else {
			yyb3695 = r.CheckBreak()
		}
		if yyb3695 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3695-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3701 := z.EncBinary()
		_ = yym3701
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3702 := !z.EncBinary()
			yy2arr3702 := z.EncBasicHandle().StructToArray
			var yyq3702 [4]bool
			_, _, _ = yysep3702, yyq3702, yy2arr3702
			const yyr3702 bool = false
			yyq3702[0] = true
			yyq3702[1] = len(x.Items) != 0
			yyq3702[2] = x.Kind != ""
			yyq3702[3] = x.APIVersion != ""
			var yynn3702 int
			if yyr3702 || yy2arr3702 {
				r.EncodeArrayStart(4)
			} else {
				yynn3702 = 0
				for _, b := range yyq3702 {
					if b {
						yynn3702++
					}
				}
				r.EncodeMapStart(yynn3702)
				yynn3702 = 0
			}
			if yyr3702 || yy2arr3702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3702[0] {
					yy3704 := &x.ListMeta
					yym3705 := z.EncBinary()
					_ = yym3705
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3704) {
					} else {
						z.EncFallback(yy3704)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3702[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3706 := &x.ListMeta
					yym3707 := z.EncBinary()
					_ = yym3707
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3706) {
					} else {
						z.EncFallback(yy3706)
					}
				}
			}
			if yyr3702 || yy2arr3702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3702[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3709 := z.EncBinary()
						_ = yym3709
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3702[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3710 := z.EncBinary()
						_ = yym3710
						if false {
						} else {
							h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
						}
					}
				}
			}
			if yyr3702 || yy2arr3702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3702[2] {
					yym3712 := z.EncBinary()
					_ = yym3712
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3702[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3713 := z.EncBinary()
					_ = yym3713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3702 || yy2arr3702 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3702[3] {
					yym3715 := z.EncBinary()
					_ = yym3715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3702[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3716 := z.EncBinary()
					_ = yym3716
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3702 || yy2arr3702 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3717 := z.DecBinary()
	_ = yym3717
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3718 := r.ContainerType()
		if yyct3718 == codecSelferValueTypeMap1234 {
			yyl3718 := r.ReadMapStart()
			if yyl3718 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3718, d)
			}
		} else if yyct3718 == codecSelferValueTypeArray1234 {
			yyl3718 := r.ReadArrayStart()
			if yyl3718 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3718, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3719Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3719Slc
	var yyhl3719 bool = l >= 0
	for yyj3719 := 0; ; yyj3719++ {
		if yyhl3719 {
			if yyj3719 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3719Slc = r.DecodeBytes(yys3719Slc, true, true)
		yys3719 := string(yys3719Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3719 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3720 := &x.ListMeta
				yym3721 := z.DecBinary()
				_ = yym3721
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3720) {
				} else {
					z.DecFallback(yyv3720, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3722 := &x.Items
				yym3723 := z.DecBinary()
				_ = yym3723
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv3722), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3719)
		} // end switch yys3719
	} // end for yyj3719
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3726 int
	var yyb3726 bool
	var yyhl3726 bool = l >= 0
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3727 := &x.ListMeta
		yym3728 := z.DecBinary()
		_ = yym3728
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3727) {
		} else {
			z.DecFallback(yyv3727, false)
		}
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3729 := &x.Items
		yym3730 := z.DecBinary()
		_ = yym3730
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv3729), d)
		}
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3726++
	if yyhl3726 {
		yyb3726 = yyj3726 > l
	} else {
		yyb3726 = r.CheckBreak()
	}
	if yyb3726 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3726++
		if yyhl3726 {
			yyb3726 = yyj3726 > l
		} else {
			yyb3726 = r.CheckBreak()
		}
		if yyb3726 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3726-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3733 := z.EncBinary()
	_ = yym3733
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3734 := z.DecBinary()
	_ = yym3734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3735 := z.EncBinary()
		_ = yym3735
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3736 := !z.EncBinary()
			yy2arr3736 := z.EncBasicHandle().StructToArray
			var yyq3736 [4]bool
			_, _, _ = yysep3736, yyq3736, yy2arr3736
			const yyr3736 bool = false
			yyq3736[2] = x.Message != ""
			yyq3736[3] = x.Error != ""
			var yynn3736 int
			if yyr3736 || yy2arr3736 {
				r.EncodeArrayStart(4)
			} else {
				yynn3736 = 2
				for _, b := range yyq3736 {
					if b {
						yynn3736++
					}
				}
				r.EncodeMapStart(yynn3736)
				yynn3736 = 0
			}
			if yyr3736 || yy2arr3736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3736 || yy2arr3736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3736 || yy2arr3736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3736[2] {
					yym3740 := z.EncBinary()
					_ = yym3740
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3736[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3741 := z.EncBinary()
					_ = yym3741
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3736 || yy2arr3736 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3736[3] {
					yym3743 := z.EncBinary()
					_ = yym3743
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3736[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3744 := z.EncBinary()
					_ = yym3744
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3736 || yy2arr3736 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3745 := z.DecBinary()
	_ = yym3745
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3746 := r.ContainerType()
		if yyct3746 == codecSelferValueTypeMap1234 {
			yyl3746 := r.ReadMapStart()
			if yyl3746 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3746, d)
			}
		} else if yyct3746 == codecSelferValueTypeArray1234 {
			yyl3746 := r.ReadArrayStart()
			if yyl3746 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3746, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3747Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3747Slc
	var yyhl3747 bool = l >= 0
	for yyj3747 := 0; ; yyj3747++ {
		if yyhl3747 {
			if yyj3747 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3747Slc = r.DecodeBytes(yys3747Slc, true, true)
		yys3747 := string(yys3747Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3747 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3747)
		} // end switch yys3747
	} // end for yyj3747
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3752 int
	var yyb3752 bool
	var yyhl3752 bool = l >= 0
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3752++
	if yyhl3752 {
		yyb3752 = yyj3752 > l
	} else {
		yyb3752 = r.CheckBreak()
	}
	if yyb3752 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3752++
		if yyhl3752 {
			yyb3752 = yyj3752 > l
		} else {
			yyb3752 = r.CheckBreak()
		}
		if yyb3752 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3752-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3757 := z.EncBinary()
		_ = yym3757
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3758 := !z.EncBinary()
			yy2arr3758 := z.EncBasicHandle().StructToArray
			var yyq3758 [4]bool
			_, _, _ = yysep3758, yyq3758, yy2arr3758
			const yyr3758 bool = false
			yyq3758[0] = true
			yyq3758[1] = len(x.Conditions) != 0
			yyq3758[2] = x.Kind != ""
			yyq3758[3] = x.APIVersion != ""
			var yynn3758 int
			if yyr3758 || yy2arr3758 {
				r.EncodeArrayStart(4)
			} else {
				yynn3758 = 0
				for _, b := range yyq3758 {
					if b {
						yynn3758++
					}
				}
				r.EncodeMapStart(yynn3758)
				yynn3758 = 0
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[0] {
					yy3760 := &x.ObjectMeta
					yy3760.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3758[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3761 := &x.ObjectMeta
					yy3761.CodecEncodeSelf(e)
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3763 := z.EncBinary()
						_ = yym3763
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3758[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3764 := z.EncBinary()
						_ = yym3764
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[2] {
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3767 := z.EncBinary()
					_ = yym3767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3758[3] {
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3758[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3770 := z.EncBinary()
					_ = yym3770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3758 || yy2arr3758 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3771 := z.DecBinary()
	_ = yym3771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3772 := r.ContainerType()
		if yyct3772 == codecSelferValueTypeMap1234 {
			yyl3772 := r.ReadMapStart()
			if yyl3772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3772, d)
			}
		} else if yyct3772 == codecSelferValueTypeArray1234 {
			yyl3772 := r.ReadArrayStart()
			if yyl3772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3773Slc
	var yyhl3773 bool = l >= 0
	for yyj3773 := 0; ; yyj3773++ {
		if yyhl3773 {
			if yyj3773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3773Slc = r.DecodeBytes(yys3773Slc, true, true)
		yys3773 := string(yys3773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3773 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3774 := &x.ObjectMeta
				yyv3774.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3775 := &x.Conditions
				yym3776 := z.DecBinary()
				_ = yym3776
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3775), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3773)
		} // end switch yys3773
	} // end for yyj3773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3779 int
	var yyb3779 bool
	var yyhl3779 bool = l >= 0
	yyj3779++
	if yyhl3779 {
		yyb3779 = yyj3779 > l
	} else {
		yyb3779 = r.CheckBreak()
	}
	if yyb3779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3780 := &x.ObjectMeta
		yyv3780.CodecDecodeSelf(d)
	}
	yyj3779++
	if yyhl3779 {
		yyb3779 = yyj3779 > l
	} else {
		yyb3779 = r.CheckBreak()
	}
	if yyb3779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3781 := &x.Conditions
		yym3782 := z.DecBinary()
		_ = yym3782
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3781), d)
		}
	}
	yyj3779++
	if yyhl3779 {
		yyb3779 = yyj3779 > l
	} else {
		yyb3779 = r.CheckBreak()
	}
	if yyb3779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3779++
	if yyhl3779 {
		yyb3779 = yyj3779 > l
	} else {
		yyb3779 = r.CheckBreak()
	}
	if yyb3779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3779++
		if yyhl3779 {
			yyb3779 = yyj3779 > l
		} else {
			yyb3779 = r.CheckBreak()
		}
		if yyb3779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3785 := z.EncBinary()
		_ = yym3785
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3786 := !z.EncBinary()
			yy2arr3786 := z.EncBasicHandle().StructToArray
			var yyq3786 [4]bool
			_, _, _ = yysep3786, yyq3786, yy2arr3786
			const yyr3786 bool = false
			yyq3786[0] = true
			yyq3786[2] = x.Kind != ""
			yyq3786[3] = x.APIVersion != ""
			var yynn3786 int
			if yyr3786 || yy2arr3786 {
				r.EncodeArrayStart(4)
			} else {
				yynn3786 = 1
				for _, b := range yyq3786 {
					if b {
						yynn3786++
					}
				}
				r.EncodeMapStart(yynn3786)
				yynn3786 = 0
			}
			if yyr3786 || yy2arr3786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3786[0] {
					yy3788 := &x.ListMeta
					yym3789 := z.EncBinary()
					_ = yym3789
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3788) {
					} else {
						z.EncFallback(yy3788)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3786[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3790 := &x.ListMeta
					yym3791 := z.EncBinary()
					_ = yym3791
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3790) {
					} else {
						z.EncFallback(yy3790)
					}
				}
			}
			if yyr3786 || yy2arr3786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3793 := z.EncBinary()
					_ = yym3793
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3794 := z.EncBinary()
					_ = yym3794
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3786 || yy2arr3786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3786[2] {
					yym3796 := z.EncBinary()
					_ = yym3796
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3786[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3797 := z.EncBinary()
					_ = yym3797
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3786 || yy2arr3786 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3786[3] {
					yym3799 := z.EncBinary()
					_ = yym3799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3786[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3800 := z.EncBinary()
					_ = yym3800
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3786 || yy2arr3786 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3801 := z.DecBinary()
	_ = yym3801
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3802 := r.ContainerType()
		if yyct3802 == codecSelferValueTypeMap1234 {
			yyl3802 := r.ReadMapStart()
			if yyl3802 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3802, d)
			}
		} else if yyct3802 == codecSelferValueTypeArray1234 {
			yyl3802 := r.ReadArrayStart()
			if yyl3802 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3802, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3803Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3803Slc
	var yyhl3803 bool = l >= 0
	for yyj3803 := 0; ; yyj3803++ {
		if yyhl3803 {
			if yyj3803 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3803Slc = r.DecodeBytes(yys3803Slc, true, true)
		yys3803 := string(yys3803Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3803 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3804 := &x.ListMeta
				yym3805 := z.DecBinary()
				_ = yym3805
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3804) {
				} else {
					z.DecFallback(yyv3804, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3806 := &x.Items
				yym3807 := z.DecBinary()
				_ = yym3807
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3806), d)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3803)
		} // end switch yys3803
	} // end for yyj3803
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3810 int
	var yyb3810 bool
	var yyhl3810 bool = l >= 0
	yyj3810++
	if yyhl3810 {
		yyb3810 = yyj3810 > l
	} else {
		yyb3810 = r.CheckBreak()
	}
	if yyb3810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3811 := &x.ListMeta
		yym3812 := z.DecBinary()
		_ = yym3812
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3811) {
		} else {
			z.DecFallback(yyv3811, false)
		}
	}
	yyj3810++
	if yyhl3810 {
		yyb3810 = yyj3810 > l
	} else {
		yyb3810 = r.CheckBreak()
	}
	if yyb3810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3813 := &x.Items
		yym3814 := z.DecBinary()
		_ = yym3814
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3813), d)
		}
	}
	yyj3810++
	if yyhl3810 {
		yyb3810 = yyj3810 > l
	} else {
		yyb3810 = r.CheckBreak()
	}
	if yyb3810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3810++
	if yyhl3810 {
		yyb3810 = yyj3810 > l
	} else {
		yyb3810 = r.CheckBreak()
	}
	if yyb3810 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3810++
		if yyhl3810 {
			yyb3810 = yyj3810 > l
		} else {
			yyb3810 = r.CheckBreak()
		}
		if yyb3810 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3810-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3817 := z.EncBinary()
		_ = yym3817
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3818 := !z.EncBinary()
			yy2arr3818 := z.EncBasicHandle().StructToArray
			var yyq3818 [1]bool
			_, _, _ = yysep3818, yyq3818, yy2arr3818
			const yyr3818 bool = false
			yyq3818[0] = len(x.Items) != 0
			var yynn3818 int
			if yyr3818 || yy2arr3818 {
				r.EncodeArrayStart(1)
			} else {
				yynn3818 = 0
				for _, b := range yyq3818 {
					if b {
						yynn3818++
					}
				}
				r.EncodeMapStart(yynn3818)
				yynn3818 = 0
			}
			if yyr3818 || yy2arr3818 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3818[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3820 := z.EncBinary()
						_ = yym3820
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3818[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym3821 := z.EncBinary()
						_ = yym3821
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr3818 || yy2arr3818 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3822 := z.DecBinary()
	_ = yym3822
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3823 := r.ContainerType()
		if yyct3823 == codecSelferValueTypeMap1234 {
			yyl3823 := r.ReadMapStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3823, d)
			}
		} else if yyct3823 == codecSelferValueTypeArray1234 {
			yyl3823 := r.ReadArrayStart()
			if yyl3823 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3823, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3824Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3824Slc
	var yyhl3824 bool = l >= 0
	for yyj3824 := 0; ; yyj3824++ {
		if yyhl3824 {
			if yyj3824 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3824Slc = r.DecodeBytes(yys3824Slc, true, true)
		yys3824 := string(yys3824Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3824 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3825 := &x.Items
				yym3826 := z.DecBinary()
				_ = yym3826
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3825), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3824)
		} // end switch yys3824
	} // end for yyj3824
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3827 int
	var yyb3827 bool
	var yyhl3827 bool = l >= 0
	yyj3827++
	if yyhl3827 {
		yyb3827 = yyj3827 > l
	} else {
		yyb3827 = r.CheckBreak()
	}
	if yyb3827 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3828 := &x.Items
		yym3829 := z.DecBinary()
		_ = yym3829
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv3828), d)
		}
	}
	for {
		yyj3827++
		if yyhl3827 {
			yyb3827 = yyj3827 > l
		} else {
			yyb3827 = r.CheckBreak()
		}
		if yyb3827 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3827-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3830 := z.EncBinary()
		_ = yym3830
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3831 := !z.EncBinary()
			yy2arr3831 := z.EncBasicHandle().StructToArray
			var yyq3831 [2]bool
			_, _, _ = yysep3831, yyq3831, yy2arr3831
			const yyr3831 bool = false
			var yynn3831 int
			if yyr3831 || yy2arr3831 {
				r.EncodeArrayStart(2)
			} else {
				yynn3831 = 2
				for _, b := range yyq3831 {
					if b {
						yynn3831++
					}
				}
				r.EncodeMapStart(yynn3831)
				yynn3831 = 0
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3833 := z.EncBinary()
				_ = yym3833
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3834 := z.EncBinary()
				_ = yym3834
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3836 := &x.FieldRef
				yy3836.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3837 := &x.FieldRef
				yy3837.CodecEncodeSelf(e)
			}
			if yyr3831 || yy2arr3831 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3838 := z.DecBinary()
	_ = yym3838
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3839 := r.ContainerType()
		if yyct3839 == codecSelferValueTypeMap1234 {
			yyl3839 := r.ReadMapStart()
			if yyl3839 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3839, d)
			}
		} else if yyct3839 == codecSelferValueTypeArray1234 {
			yyl3839 := r.ReadArrayStart()
			if yyl3839 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3839, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3840Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3840Slc
	var yyhl3840 bool = l >= 0
	for yyj3840 := 0; ; yyj3840++ {
		if yyhl3840 {
			if yyj3840 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3840Slc = r.DecodeBytes(yys3840Slc, true, true)
		yys3840 := string(yys3840Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3840 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv3842 := &x.FieldRef
				yyv3842.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3840)
		} // end switch yys3840
	} // end for yyj3840
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3843 int
	var yyb3843 bool
	var yyhl3843 bool = l >= 0
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj3843++
	if yyhl3843 {
		yyb3843 = yyj3843 > l
	} else {
		yyb3843 = r.CheckBreak()
	}
	if yyb3843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv3845 := &x.FieldRef
		yyv3845.CodecDecodeSelf(d)
	}
	for {
		yyj3843++
		if yyhl3843 {
			yyb3843 = yyj3843 > l
		} else {
			yyb3843 = r.CheckBreak()
		}
		if yyb3843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3846 := z.EncBinary()
		_ = yym3846
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3847 := !z.EncBinary()
			yy2arr3847 := z.EncBasicHandle().StructToArray
			var yyq3847 [5]bool
			_, _, _ = yysep3847, yyq3847, yy2arr3847
			const yyr3847 bool = false
			yyq3847[0] = x.Capabilities != nil
			yyq3847[1] = x.Privileged != nil
			yyq3847[2] = x.SELinuxOptions != nil
			yyq3847[3] = x.RunAsUser != nil
			yyq3847[4] = x.RunAsNonRoot != nil
			var yynn3847 int
			if yyr3847 || yy2arr3847 {
				r.EncodeArrayStart(5)
			} else {
				yynn3847 = 0
				for _, b := range yyq3847 {
					if b {
						yynn3847++
					}
				}
				r.EncodeMapStart(yynn3847)
				yynn3847 = 0
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3847[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3850 := *x.Privileged
						yym3851 := z.EncBinary()
						_ = yym3851
						if false {
						} else {
							r.EncodeBool(bool(yy3850))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3847[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3852 := *x.Privileged
						yym3853 := z.EncBinary()
						_ = yym3853
						if false {
						} else {
							r.EncodeBool(bool(yy3852))
						}
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3847[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3856 := *x.RunAsUser
						yym3857 := z.EncBinary()
						_ = yym3857
						if false {
						} else {
							r.EncodeInt(int64(yy3856))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3847[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3858 := *x.RunAsUser
						yym3859 := z.EncBinary()
						_ = yym3859
						if false {
						} else {
							r.EncodeInt(int64(yy3858))
						}
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3847[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3861 := *x.RunAsNonRoot
						yym3862 := z.EncBinary()
						_ = yym3862
						if false {
						} else {
							r.EncodeBool(bool(yy3861))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3847[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3863 := *x.RunAsNonRoot
						yym3864 := z.EncBinary()
						_ = yym3864
						if false {
						} else {
							r.EncodeBool(bool(yy3863))
						}
					}
				}
			}
			if yyr3847 || yy2arr3847 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3865 := z.DecBinary()
	_ = yym3865
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3866 := r.ContainerType()
		if yyct3866 == codecSelferValueTypeMap1234 {
			yyl3866 := r.ReadMapStart()
			if yyl3866 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3866, d)
			}
		} else if yyct3866 == codecSelferValueTypeArray1234 {
			yyl3866 := r.ReadArrayStart()
			if yyl3866 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3866, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3867Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3867Slc
	var yyhl3867 bool = l >= 0
	for yyj3867 := 0; ; yyj3867++ {
		if yyhl3867 {
			if yyj3867 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3867Slc = r.DecodeBytes(yys3867Slc, true, true)
		yys3867 := string(yys3867Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3867 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3870 := z.DecBinary()
				_ = yym3870
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3873 := z.DecBinary()
				_ = yym3873
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3875 := z.DecBinary()
				_ = yym3875
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3867)
		} // end switch yys3867
	} // end for yyj3867
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3876 int
	var yyb3876 bool
	var yyhl3876 bool = l >= 0
	yyj3876++
	if yyhl3876 {
		yyb3876 = yyj3876 > l
	} else {
		yyb3876 = r.CheckBreak()
	}
	if yyb3876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3876++
	if yyhl3876 {
		yyb3876 = yyj3876 > l
	} else {
		yyb3876 = r.CheckBreak()
	}
	if yyb3876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3879 := z.DecBinary()
		_ = yym3879
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3876++
	if yyhl3876 {
		yyb3876 = yyj3876 > l
	} else {
		yyb3876 = r.CheckBreak()
	}
	if yyb3876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3876++
	if yyhl3876 {
		yyb3876 = yyj3876 > l
	} else {
		yyb3876 = r.CheckBreak()
	}
	if yyb3876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3882 := z.DecBinary()
		_ = yym3882
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3876++
	if yyhl3876 {
		yyb3876 = yyj3876 > l
	} else {
		yyb3876 = r.CheckBreak()
	}
	if yyb3876 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3884 := z.DecBinary()
		_ = yym3884
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3876++
		if yyhl3876 {
			yyb3876 = yyj3876 > l
		} else {
			yyb3876 = r.CheckBreak()
		}
		if yyb3876 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3876-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3885 := z.EncBinary()
		_ = yym3885
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3886 := !z.EncBinary()
			yy2arr3886 := z.EncBasicHandle().StructToArray
			var yyq3886 [4]bool
			_, _, _ = yysep3886, yyq3886, yy2arr3886
			const yyr3886 bool = false
			yyq3886[0] = x.User != ""
			yyq3886[1] = x.Role != ""
			yyq3886[2] = x.Type != ""
			yyq3886[3] = x.Level != ""
			var yynn3886 int
			if yyr3886 || yy2arr3886 {
				r.EncodeArrayStart(4)
			} else {
				yynn3886 = 0
				for _, b := range yyq3886 {
					if b {
						yynn3886++
					}
				}
				r.EncodeMapStart(yynn3886)
				yynn3886 = 0
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[0] {
					yym3888 := z.EncBinary()
					_ = yym3888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3889 := z.EncBinary()
					_ = yym3889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[1] {
					yym3891 := z.EncBinary()
					_ = yym3891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3892 := z.EncBinary()
					_ = yym3892
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[2] {
					yym3894 := z.EncBinary()
					_ = yym3894
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3895 := z.EncBinary()
					_ = yym3895
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3886[3] {
					yym3897 := z.EncBinary()
					_ = yym3897
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3886[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3898 := z.EncBinary()
					_ = yym3898
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3886 || yy2arr3886 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3899 := z.DecBinary()
	_ = yym3899
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3900 := r.ContainerType()
		if yyct3900 == codecSelferValueTypeMap1234 {
			yyl3900 := r.ReadMapStart()
			if yyl3900 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3900, d)
			}
		} else if yyct3900 == codecSelferValueTypeArray1234 {
			yyl3900 := r.ReadArrayStart()
			if yyl3900 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3900, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3901Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3901Slc
	var yyhl3901 bool = l >= 0
	for yyj3901 := 0; ; yyj3901++ {
		if yyhl3901 {
			if yyj3901 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3901Slc = r.DecodeBytes(yys3901Slc, true, true)
		yys3901 := string(yys3901Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3901 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3901)
		} // end switch yys3901
	} // end for yyj3901
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3906 int
	var yyb3906 bool
	var yyhl3906 bool = l >= 0
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3906++
	if yyhl3906 {
		yyb3906 = yyj3906 > l
	} else {
		yyb3906 = r.CheckBreak()
	}
	if yyb3906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3906++
		if yyhl3906 {
			yyb3906 = yyj3906 > l
		} else {
			yyb3906 = r.CheckBreak()
		}
		if yyb3906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3911 := z.EncBinary()
		_ = yym3911
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3912 := !z.EncBinary()
			yy2arr3912 := z.EncBasicHandle().StructToArray
			var yyq3912 [5]bool
			_, _, _ = yysep3912, yyq3912, yy2arr3912
			const yyr3912 bool = false
			yyq3912[0] = true
			yyq3912[3] = x.Kind != ""
			yyq3912[4] = x.APIVersion != ""
			var yynn3912 int
			if yyr3912 || yy2arr3912 {
				r.EncodeArrayStart(5)
			} else {
				yynn3912 = 2
				for _, b := range yyq3912 {
					if b {
						yynn3912++
					}
				}
				r.EncodeMapStart(yynn3912)
				yynn3912 = 0
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[0] {
					yy3914 := &x.ObjectMeta
					yy3914.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3912[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3915 := &x.ObjectMeta
					yy3915.CodecEncodeSelf(e)
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3917 := z.EncBinary()
				_ = yym3917
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3918 := z.EncBinary()
				_ = yym3918
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3921 := z.EncBinary()
					_ = yym3921
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[3] {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3912[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3924 := z.EncBinary()
					_ = yym3924
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3912[4] {
					yym3926 := z.EncBinary()
					_ = yym3926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3912[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3927 := z.EncBinary()
					_ = yym3927
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3912 || yy2arr3912 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3928 := z.DecBinary()
	_ = yym3928
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3929 := r.ContainerType()
		if yyct3929 == codecSelferValueTypeMap1234 {
			yyl3929 := r.ReadMapStart()
			if yyl3929 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3929, d)
			}
		} else if yyct3929 == codecSelferValueTypeArray1234 {
			yyl3929 := r.ReadArrayStart()
			if yyl3929 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3929, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3930Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3930Slc
	var yyhl3930 bool = l >= 0
	for yyj3930 := 0; ; yyj3930++ {
		if yyhl3930 {
			if yyj3930 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3930Slc = r.DecodeBytes(yys3930Slc, true, true)
		yys3930 := string(yys3930Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3930 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3931 := &x.ObjectMeta
				yyv3931.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3933 := &x.Data
				yym3934 := z.DecBinary()
				_ = yym3934
				if false {
				} else {
					*yyv3933 = r.DecodeBytes(*(*[]byte)(yyv3933), false, false)
				}
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3930)
		} // end switch yys3930
	} // end for yyj3930
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3937 int
	var yyb3937 bool
	var yyhl3937 bool = l >= 0
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3938 := &x.ObjectMeta
		yyv3938.CodecDecodeSelf(d)
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3940 := &x.Data
		yym3941 := z.DecBinary()
		_ = yym3941
		if false {
		} else {
			*yyv3940 = r.DecodeBytes(*(*[]byte)(yyv3940), false, false)
		}
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3937++
	if yyhl3937 {
		yyb3937 = yyj3937 > l
	} else {
		yyb3937 = r.CheckBreak()
	}
	if yyb3937 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj3937++
		if yyhl3937 {
			yyb3937 = yyj3937 > l
		} else {
			yyb3937 = r.CheckBreak()
		}
		if yyb3937 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3937-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3944 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3944.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3945 := *v
	yyh3945, yyl3945 := z.DecSliceHelperStart()
	var yyc3945 bool
	if yyl3945 == 0 {
		if yyv3945 == nil {
			yyv3945 = []PersistentVolumeAccessMode{}
			yyc3945 = true
		} else if len(yyv3945) != 0 {
			yyv3945 = yyv3945[:0]
			yyc3945 = true
		}
	} else if yyl3945 > 0 {
		var yyrr3945, yyrl3945 int
		var yyrt3945 bool
		if yyl3945 > cap(yyv3945) {

			yyrl3945, yyrt3945 = z.DecInferLen(yyl3945, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3945 {
				if yyrl3945 <= cap(yyv3945) {
					yyv3945 = yyv3945[:yyrl3945]
				} else {
					yyv3945 = make([]PersistentVolumeAccessMode, yyrl3945)
				}
			} else {
				yyv3945 = make([]PersistentVolumeAccessMode, yyrl3945)
			}
			yyc3945 = true
			yyrr3945 = len(yyv3945)
		} else if yyl3945 != len(yyv3945) {
			yyv3945 = yyv3945[:yyl3945]
			yyc3945 = true
		}
		yyj3945 := 0
		for ; yyj3945 < yyrr3945; yyj3945++ {
			yyh3945.ElemContainerState(yyj3945)
			if r.TryDecodeAsNil() {
				yyv3945[yyj3945] = ""
			} else {
				yyv3945[yyj3945] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3945 {
			for ; yyj3945 < yyl3945; yyj3945++ {
				yyv3945 = append(yyv3945, "")
				yyh3945.ElemContainerState(yyj3945)
				if r.TryDecodeAsNil() {
					yyv3945[yyj3945] = ""
				} else {
					yyv3945[yyj3945] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3945 := 0
		for ; !r.CheckBreak(); yyj3945++ {

			if yyj3945 >= len(yyv3945) {
				yyv3945 = append(yyv3945, "") // var yyz3945 PersistentVolumeAccessMode
				yyc3945 = true
			}
			yyh3945.ElemContainerState(yyj3945)
			if yyj3945 < len(yyv3945) {
				if r.TryDecodeAsNil() {
					yyv3945[yyj3945] = ""
				} else {
					yyv3945[yyj3945] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3945 < len(yyv3945) {
			yyv3945 = yyv3945[:yyj3945]
			yyc3945 = true
		} else if yyj3945 == 0 && yyv3945 == nil {
			yyv3945 = []PersistentVolumeAccessMode{}
			yyc3945 = true
		}
	}
	yyh3945.End()
	if yyc3945 {
		*v = yyv3945
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeCondition(v []PersistentVolumeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3949 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3950 := &yyv3949
		yy3950.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeCondition(v *[]PersistentVolumeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3951 := *v
	yyh3951, yyl3951 := z.DecSliceHelperStart()
	var yyc3951 bool
	if yyl3951 == 0 {
		if yyv3951 == nil {
			yyv3951 = []PersistentVolumeCondition{}
			yyc3951 = true
		} else if len(yyv3951) != 0 {
			yyv3951 = yyv3951[:0]
			yyc3951 = true
		}
	} else if yyl3951 > 0 {
		var yyrr3951, yyrl3951 int
		var yyrt3951 bool
		if yyl3951 > cap(yyv3951) {

			yyrg3951 := len(yyv3951) > 0
			yyv23951 := yyv3951
			yyrl3951, yyrt3951 = z.DecInferLen(yyl3951, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3951 {
				if yyrl3951 <= cap(yyv3951) {
					yyv3951 = yyv3951[:yyrl3951]
				} else {
					yyv3951 = make([]PersistentVolumeCondition, yyrl3951)
				}
			} else {
				yyv3951 = make([]PersistentVolumeCondition, yyrl3951)
			}
			yyc3951 = true
			yyrr3951 = len(yyv3951)
			if yyrg3951 {
				copy(yyv3951, yyv23951)
			}
		} else if yyl3951 != len(yyv3951) {
			yyv3951 = yyv3951[:yyl3951]
			yyc3951 = true
		}
		yyj3951 := 0
		for ; yyj3951 < yyrr3951; yyj3951++ {
			yyh3951.ElemContainerState(yyj3951)
			if r.TryDecodeAsNil() {
				yyv3951[yyj3951] = PersistentVolumeCondition{}
			} else {
				yyv3952 := &yyv3951[yyj3951]
				yyv3952.CodecDecodeSelf(d)
			}

		}
		if yyrt3951 {
			for ; yyj3951 < yyl3951; yyj3951++ {
				yyv3951 = append(yyv3951, PersistentVolumeCondition{})
				yyh3951.ElemContainerState(yyj3951)
				if r.TryDecodeAsNil() {
					yyv3951[yyj3951] = PersistentVolumeCondition{}
				} else {
					yyv3953 := &yyv3951[yyj3951]
					yyv3953.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3951 := 0
		for ; !r.CheckBreak(); yyj3951++ {

			if yyj3951 >= len(yyv3951) {
				yyv3951 = append(yyv3951, PersistentVolumeCondition{}) // var yyz3951 PersistentVolumeCondition
				yyc3951 = true
			}
			yyh3951.ElemContainerState(yyj3951)
			if yyj3951 < len(yyv3951) {
				if r.TryDecodeAsNil() {
					yyv3951[yyj3951] = PersistentVolumeCondition{}
				} else {
					yyv3954 := &yyv3951[yyj3951]
					yyv3954.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3951 < len(yyv3951) {
			yyv3951 = yyv3951[:yyj3951]
			yyc3951 = true
		} else if yyj3951 == 0 && yyv3951 == nil {
			yyv3951 = []PersistentVolumeCondition{}
			yyc3951 = true
		}
	}
	yyh3951.End()
	if yyc3951 {
		*v = yyv3951
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3955 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3956 := &yyv3955
		yy3956.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3957 := *v
	yyh3957, yyl3957 := z.DecSliceHelperStart()
	var yyc3957 bool
	if yyl3957 == 0 {
		if yyv3957 == nil {
			yyv3957 = []PersistentVolume{}
			yyc3957 = true
		} else if len(yyv3957) != 0 {
			yyv3957 = yyv3957[:0]
			yyc3957 = true
		}
	} else if yyl3957 > 0 {
		var yyrr3957, yyrl3957 int
		var yyrt3957 bool
		if yyl3957 > cap(yyv3957) {

			yyrg3957 := len(yyv3957) > 0
			yyv23957 := yyv3957
			yyrl3957, yyrt3957 = z.DecInferLen(yyl3957, z.DecBasicHandle().MaxInitLen, 424)
			if yyrt3957 {
				if yyrl3957 <= cap(yyv3957) {
					yyv3957 = yyv3957[:yyrl3957]
				} else {
					yyv3957 = make([]PersistentVolume, yyrl3957)
				}
			} else {
				yyv3957 = make([]PersistentVolume, yyrl3957)
			}
			yyc3957 = true
			yyrr3957 = len(yyv3957)
			if yyrg3957 {
				copy(yyv3957, yyv23957)
			}
		} else if yyl3957 != len(yyv3957) {
			yyv3957 = yyv3957[:yyl3957]
			yyc3957 = true
		}
		yyj3957 := 0
		for ; yyj3957 < yyrr3957; yyj3957++ {
			yyh3957.ElemContainerState(yyj3957)
			if r.TryDecodeAsNil() {
				yyv3957[yyj3957] = PersistentVolume{}
			} else {
				yyv3958 := &yyv3957[yyj3957]
				yyv3958.CodecDecodeSelf(d)
			}

		}
		if yyrt3957 {
			for ; yyj3957 < yyl3957; yyj3957++ {
				yyv3957 = append(yyv3957, PersistentVolume{})
				yyh3957.ElemContainerState(yyj3957)
				if r.TryDecodeAsNil() {
					yyv3957[yyj3957] = PersistentVolume{}
				} else {
					yyv3959 := &yyv3957[yyj3957]
					yyv3959.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3957 := 0
		for ; !r.CheckBreak(); yyj3957++ {

			if yyj3957 >= len(yyv3957) {
				yyv3957 = append(yyv3957, PersistentVolume{}) // var yyz3957 PersistentVolume
				yyc3957 = true
			}
			yyh3957.ElemContainerState(yyj3957)
			if yyj3957 < len(yyv3957) {
				if r.TryDecodeAsNil() {
					yyv3957[yyj3957] = PersistentVolume{}
				} else {
					yyv3960 := &yyv3957[yyj3957]
					yyv3960.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3957 < len(yyv3957) {
			yyv3957 = yyv3957[:yyj3957]
			yyc3957 = true
		} else if yyj3957 == 0 && yyv3957 == nil {
			yyv3957 = []PersistentVolume{}
			yyc3957 = true
		}
	}
	yyh3957.End()
	if yyc3957 {
		*v = yyv3957
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3961 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3962 := &yyv3961
		yy3962.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3963 := *v
	yyh3963, yyl3963 := z.DecSliceHelperStart()
	var yyc3963 bool
	if yyl3963 == 0 {
		if yyv3963 == nil {
			yyv3963 = []PersistentVolumeClaim{}
			yyc3963 = true
		} else if len(yyv3963) != 0 {
			yyv3963 = yyv3963[:0]
			yyc3963 = true
		}
	} else if yyl3963 > 0 {
		var yyrr3963, yyrl3963 int
		var yyrt3963 bool
		if yyl3963 > cap(yyv3963) {

			yyrg3963 := len(yyv3963) > 0
			yyv23963 := yyv3963
			yyrl3963, yyrt3963 = z.DecInferLen(yyl3963, z.DecBasicHandle().MaxInitLen, 320)
			if yyrt3963 {
				if yyrl3963 <= cap(yyv3963) {
					yyv3963 = yyv3963[:yyrl3963]
				} else {
					yyv3963 = make([]PersistentVolumeClaim, yyrl3963)
				}
			} else {
				yyv3963 = make([]PersistentVolumeClaim, yyrl3963)
			}
			yyc3963 = true
			yyrr3963 = len(yyv3963)
			if yyrg3963 {
				copy(yyv3963, yyv23963)
			}
		} else if yyl3963 != len(yyv3963) {
			yyv3963 = yyv3963[:yyl3963]
			yyc3963 = true
		}
		yyj3963 := 0
		for ; yyj3963 < yyrr3963; yyj3963++ {
			yyh3963.ElemContainerState(yyj3963)
			if r.TryDecodeAsNil() {
				yyv3963[yyj3963] = PersistentVolumeClaim{}
			} else {
				yyv3964 := &yyv3963[yyj3963]
				yyv3964.CodecDecodeSelf(d)
			}

		}
		if yyrt3963 {
			for ; yyj3963 < yyl3963; yyj3963++ {
				yyv3963 = append(yyv3963, PersistentVolumeClaim{})
				yyh3963.ElemContainerState(yyj3963)
				if r.TryDecodeAsNil() {
					yyv3963[yyj3963] = PersistentVolumeClaim{}
				} else {
					yyv3965 := &yyv3963[yyj3963]
					yyv3965.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3963 := 0
		for ; !r.CheckBreak(); yyj3963++ {

			if yyj3963 >= len(yyv3963) {
				yyv3963 = append(yyv3963, PersistentVolumeClaim{}) // var yyz3963 PersistentVolumeClaim
				yyc3963 = true
			}
			yyh3963.ElemContainerState(yyj3963)
			if yyj3963 < len(yyv3963) {
				if r.TryDecodeAsNil() {
					yyv3963[yyj3963] = PersistentVolumeClaim{}
				} else {
					yyv3966 := &yyv3963[yyj3963]
					yyv3966.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3963 < len(yyv3963) {
			yyv3963 = yyv3963[:yyj3963]
			yyc3963 = true
		} else if yyj3963 == 0 && yyv3963 == nil {
			yyv3963 = []PersistentVolumeClaim{}
			yyc3963 = true
		}
	}
	yyh3963.End()
	if yyc3963 {
		*v = yyv3963
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaimCondition(v []PersistentVolumeClaimCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3967 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3968 := &yyv3967
		yy3968.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaimCondition(v *[]PersistentVolumeClaimCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3969 := *v
	yyh3969, yyl3969 := z.DecSliceHelperStart()
	var yyc3969 bool
	if yyl3969 == 0 {
		if yyv3969 == nil {
			yyv3969 = []PersistentVolumeClaimCondition{}
			yyc3969 = true
		} else if len(yyv3969) != 0 {
			yyv3969 = yyv3969[:0]
			yyc3969 = true
		}
	} else if yyl3969 > 0 {
		var yyrr3969, yyrl3969 int
		var yyrt3969 bool
		if yyl3969 > cap(yyv3969) {

			yyrg3969 := len(yyv3969) > 0
			yyv23969 := yyv3969
			yyrl3969, yyrt3969 = z.DecInferLen(yyl3969, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3969 {
				if yyrl3969 <= cap(yyv3969) {
					yyv3969 = yyv3969[:yyrl3969]
				} else {
					yyv3969 = make([]PersistentVolumeClaimCondition, yyrl3969)
				}
			} else {
				yyv3969 = make([]PersistentVolumeClaimCondition, yyrl3969)
			}
			yyc3969 = true
			yyrr3969 = len(yyv3969)
			if yyrg3969 {
				copy(yyv3969, yyv23969)
			}
		} else if yyl3969 != len(yyv3969) {
			yyv3969 = yyv3969[:yyl3969]
			yyc3969 = true
		}
		yyj3969 := 0
		for ; yyj3969 < yyrr3969; yyj3969++ {
			yyh3969.ElemContainerState(yyj3969)
			if r.TryDecodeAsNil() {
				yyv3969[yyj3969] = PersistentVolumeClaimCondition{}
			} else {
				yyv3970 := &yyv3969[yyj3969]
				yyv3970.CodecDecodeSelf(d)
			}

		}
		if yyrt3969 {
			for ; yyj3969 < yyl3969; yyj3969++ {
				yyv3969 = append(yyv3969, PersistentVolumeClaimCondition{})
				yyh3969.ElemContainerState(yyj3969)
				if r.TryDecodeAsNil() {
					yyv3969[yyj3969] = PersistentVolumeClaimCondition{}
				} else {
					yyv3971 := &yyv3969[yyj3969]
					yyv3971.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3969 := 0
		for ; !r.CheckBreak(); yyj3969++ {

			if yyj3969 >= len(yyv3969) {
				yyv3969 = append(yyv3969, PersistentVolumeClaimCondition{}) // var yyz3969 PersistentVolumeClaimCondition
				yyc3969 = true
			}
			yyh3969.ElemContainerState(yyj3969)
			if yyj3969 < len(yyv3969) {
				if r.TryDecodeAsNil() {
					yyv3969[yyj3969] = PersistentVolumeClaimCondition{}
				} else {
					yyv3972 := &yyv3969[yyj3969]
					yyv3972.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3969 < len(yyv3969) {
			yyv3969 = yyv3969[:yyj3969]
			yyc3969 = true
		} else if yyj3969 == 0 && yyv3969 == nil {
			yyv3969 = []PersistentVolumeClaimCondition{}
			yyc3969 = true
		}
	}
	yyh3969.End()
	if yyc3969 {
		*v = yyv3969
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3973 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3974 := &yyv3973
		yy3974.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3975 := *v
	yyh3975, yyl3975 := z.DecSliceHelperStart()
	var yyc3975 bool
	if yyl3975 == 0 {
		if yyv3975 == nil {
			yyv3975 = []HTTPHeader{}
			yyc3975 = true
		} else if len(yyv3975) != 0 {
			yyv3975 = yyv3975[:0]
			yyc3975 = true
		}
	} else if yyl3975 > 0 {
		var yyrr3975, yyrl3975 int
		var yyrt3975 bool
		if yyl3975 > cap(yyv3975) {

			yyrg3975 := len(yyv3975) > 0
			yyv23975 := yyv3975
			yyrl3975, yyrt3975 = z.DecInferLen(yyl3975, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3975 {
				if yyrl3975 <= cap(yyv3975) {
					yyv3975 = yyv3975[:yyrl3975]
				} else {
					yyv3975 = make([]HTTPHeader, yyrl3975)
				}
			} else {
				yyv3975 = make([]HTTPHeader, yyrl3975)
			}
			yyc3975 = true
			yyrr3975 = len(yyv3975)
			if yyrg3975 {
				copy(yyv3975, yyv23975)
			}
		} else if yyl3975 != len(yyv3975) {
			yyv3975 = yyv3975[:yyl3975]
			yyc3975 = true
		}
		yyj3975 := 0
		for ; yyj3975 < yyrr3975; yyj3975++ {
			yyh3975.ElemContainerState(yyj3975)
			if r.TryDecodeAsNil() {
				yyv3975[yyj3975] = HTTPHeader{}
			} else {
				yyv3976 := &yyv3975[yyj3975]
				yyv3976.CodecDecodeSelf(d)
			}

		}
		if yyrt3975 {
			for ; yyj3975 < yyl3975; yyj3975++ {
				yyv3975 = append(yyv3975, HTTPHeader{})
				yyh3975.ElemContainerState(yyj3975)
				if r.TryDecodeAsNil() {
					yyv3975[yyj3975] = HTTPHeader{}
				} else {
					yyv3977 := &yyv3975[yyj3975]
					yyv3977.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3975 := 0
		for ; !r.CheckBreak(); yyj3975++ {

			if yyj3975 >= len(yyv3975) {
				yyv3975 = append(yyv3975, HTTPHeader{}) // var yyz3975 HTTPHeader
				yyc3975 = true
			}
			yyh3975.ElemContainerState(yyj3975)
			if yyj3975 < len(yyv3975) {
				if r.TryDecodeAsNil() {
					yyv3975[yyj3975] = HTTPHeader{}
				} else {
					yyv3978 := &yyv3975[yyj3975]
					yyv3978.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3975 < len(yyv3975) {
			yyv3975 = yyv3975[:yyj3975]
			yyc3975 = true
		} else if yyj3975 == 0 && yyv3975 == nil {
			yyv3975 = []HTTPHeader{}
			yyc3975 = true
		}
	}
	yyh3975.End()
	if yyc3975 {
		*v = yyv3975
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3979 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3979.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3980 := *v
	yyh3980, yyl3980 := z.DecSliceHelperStart()
	var yyc3980 bool
	if yyl3980 == 0 {
		if yyv3980 == nil {
			yyv3980 = []Capability{}
			yyc3980 = true
		} else if len(yyv3980) != 0 {
			yyv3980 = yyv3980[:0]
			yyc3980 = true
		}
	} else if yyl3980 > 0 {
		var yyrr3980, yyrl3980 int
		var yyrt3980 bool
		if yyl3980 > cap(yyv3980) {

			yyrl3980, yyrt3980 = z.DecInferLen(yyl3980, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3980 {
				if yyrl3980 <= cap(yyv3980) {
					yyv3980 = yyv3980[:yyrl3980]
				} else {
					yyv3980 = make([]Capability, yyrl3980)
				}
			} else {
				yyv3980 = make([]Capability, yyrl3980)
			}
			yyc3980 = true
			yyrr3980 = len(yyv3980)
		} else if yyl3980 != len(yyv3980) {
			yyv3980 = yyv3980[:yyl3980]
			yyc3980 = true
		}
		yyj3980 := 0
		for ; yyj3980 < yyrr3980; yyj3980++ {
			yyh3980.ElemContainerState(yyj3980)
			if r.TryDecodeAsNil() {
				yyv3980[yyj3980] = ""
			} else {
				yyv3980[yyj3980] = Capability(r.DecodeString())
			}

		}
		if yyrt3980 {
			for ; yyj3980 < yyl3980; yyj3980++ {
				yyv3980 = append(yyv3980, "")
				yyh3980.ElemContainerState(yyj3980)
				if r.TryDecodeAsNil() {
					yyv3980[yyj3980] = ""
				} else {
					yyv3980[yyj3980] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3980 := 0
		for ; !r.CheckBreak(); yyj3980++ {

			if yyj3980 >= len(yyv3980) {
				yyv3980 = append(yyv3980, "") // var yyz3980 Capability
				yyc3980 = true
			}
			yyh3980.ElemContainerState(yyj3980)
			if yyj3980 < len(yyv3980) {
				if r.TryDecodeAsNil() {
					yyv3980[yyj3980] = ""
				} else {
					yyv3980[yyj3980] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3980 < len(yyv3980) {
			yyv3980 = yyv3980[:yyj3980]
			yyc3980 = true
		} else if yyj3980 == 0 && yyv3980 == nil {
			yyv3980 = []Capability{}
			yyc3980 = true
		}
	}
	yyh3980.End()
	if yyc3980 {
		*v = yyv3980
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3984 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3985 := &yyv3984
		yy3985.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3986 := *v
	yyh3986, yyl3986 := z.DecSliceHelperStart()
	var yyc3986 bool
	if yyl3986 == 0 {
		if yyv3986 == nil {
			yyv3986 = []ContainerPort{}
			yyc3986 = true
		} else if len(yyv3986) != 0 {
			yyv3986 = yyv3986[:0]
			yyc3986 = true
		}
	} else if yyl3986 > 0 {
		var yyrr3986, yyrl3986 int
		var yyrt3986 bool
		if yyl3986 > cap(yyv3986) {

			yyrg3986 := len(yyv3986) > 0
			yyv23986 := yyv3986
			yyrl3986, yyrt3986 = z.DecInferLen(yyl3986, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3986 {
				if yyrl3986 <= cap(yyv3986) {
					yyv3986 = yyv3986[:yyrl3986]
				} else {
					yyv3986 = make([]ContainerPort, yyrl3986)
				}
			} else {
				yyv3986 = make([]ContainerPort, yyrl3986)
			}
			yyc3986 = true
			yyrr3986 = len(yyv3986)
			if yyrg3986 {
				copy(yyv3986, yyv23986)
			}
		} else if yyl3986 != len(yyv3986) {
			yyv3986 = yyv3986[:yyl3986]
			yyc3986 = true
		}
		yyj3986 := 0
		for ; yyj3986 < yyrr3986; yyj3986++ {
			yyh3986.ElemContainerState(yyj3986)
			if r.TryDecodeAsNil() {
				yyv3986[yyj3986] = ContainerPort{}
			} else {
				yyv3987 := &yyv3986[yyj3986]
				yyv3987.CodecDecodeSelf(d)
			}

		}
		if yyrt3986 {
			for ; yyj3986 < yyl3986; yyj3986++ {
				yyv3986 = append(yyv3986, ContainerPort{})
				yyh3986.ElemContainerState(yyj3986)
				if r.TryDecodeAsNil() {
					yyv3986[yyj3986] = ContainerPort{}
				} else {
					yyv3988 := &yyv3986[yyj3986]
					yyv3988.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3986 := 0
		for ; !r.CheckBreak(); yyj3986++ {

			if yyj3986 >= len(yyv3986) {
				yyv3986 = append(yyv3986, ContainerPort{}) // var yyz3986 ContainerPort
				yyc3986 = true
			}
			yyh3986.ElemContainerState(yyj3986)
			if yyj3986 < len(yyv3986) {
				if r.TryDecodeAsNil() {
					yyv3986[yyj3986] = ContainerPort{}
				} else {
					yyv3989 := &yyv3986[yyj3986]
					yyv3989.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3986 < len(yyv3986) {
			yyv3986 = yyv3986[:yyj3986]
			yyc3986 = true
		} else if yyj3986 == 0 && yyv3986 == nil {
			yyv3986 = []ContainerPort{}
			yyc3986 = true
		}
	}
	yyh3986.End()
	if yyc3986 {
		*v = yyv3986
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3990 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3991 := &yyv3990
		yy3991.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3992 := *v
	yyh3992, yyl3992 := z.DecSliceHelperStart()
	var yyc3992 bool
	if yyl3992 == 0 {
		if yyv3992 == nil {
			yyv3992 = []EnvVar{}
			yyc3992 = true
		} else if len(yyv3992) != 0 {
			yyv3992 = yyv3992[:0]
			yyc3992 = true
		}
	} else if yyl3992 > 0 {
		var yyrr3992, yyrl3992 int
		var yyrt3992 bool
		if yyl3992 > cap(yyv3992) {

			yyrg3992 := len(yyv3992) > 0
			yyv23992 := yyv3992
			yyrl3992, yyrt3992 = z.DecInferLen(yyl3992, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3992 {
				if yyrl3992 <= cap(yyv3992) {
					yyv3992 = yyv3992[:yyrl3992]
				} else {
					yyv3992 = make([]EnvVar, yyrl3992)
				}
			} else {
				yyv3992 = make([]EnvVar, yyrl3992)
			}
			yyc3992 = true
			yyrr3992 = len(yyv3992)
			if yyrg3992 {
				copy(yyv3992, yyv23992)
			}
		} else if yyl3992 != len(yyv3992) {
			yyv3992 = yyv3992[:yyl3992]
			yyc3992 = true
		}
		yyj3992 := 0
		for ; yyj3992 < yyrr3992; yyj3992++ {
			yyh3992.ElemContainerState(yyj3992)
			if r.TryDecodeAsNil() {
				yyv3992[yyj3992] = EnvVar{}
			} else {
				yyv3993 := &yyv3992[yyj3992]
				yyv3993.CodecDecodeSelf(d)
			}

		}
		if yyrt3992 {
			for ; yyj3992 < yyl3992; yyj3992++ {
				yyv3992 = append(yyv3992, EnvVar{})
				yyh3992.ElemContainerState(yyj3992)
				if r.TryDecodeAsNil() {
					yyv3992[yyj3992] = EnvVar{}
				} else {
					yyv3994 := &yyv3992[yyj3992]
					yyv3994.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3992 := 0
		for ; !r.CheckBreak(); yyj3992++ {

			if yyj3992 >= len(yyv3992) {
				yyv3992 = append(yyv3992, EnvVar{}) // var yyz3992 EnvVar
				yyc3992 = true
			}
			yyh3992.ElemContainerState(yyj3992)
			if yyj3992 < len(yyv3992) {
				if r.TryDecodeAsNil() {
					yyv3992[yyj3992] = EnvVar{}
				} else {
					yyv3995 := &yyv3992[yyj3992]
					yyv3995.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3992 < len(yyv3992) {
			yyv3992 = yyv3992[:yyj3992]
			yyc3992 = true
		} else if yyj3992 == 0 && yyv3992 == nil {
			yyv3992 = []EnvVar{}
			yyc3992 = true
		}
	}
	yyh3992.End()
	if yyc3992 {
		*v = yyv3992
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3996 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3997 := &yyv3996
		yy3997.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3998 := *v
	yyh3998, yyl3998 := z.DecSliceHelperStart()
	var yyc3998 bool
	if yyl3998 == 0 {
		if yyv3998 == nil {
			yyv3998 = []VolumeMount{}
			yyc3998 = true
		} else if len(yyv3998) != 0 {
			yyv3998 = yyv3998[:0]
			yyc3998 = true
		}
	} else if yyl3998 > 0 {
		var yyrr3998, yyrl3998 int
		var yyrt3998 bool
		if yyl3998 > cap(yyv3998) {

			yyrg3998 := len(yyv3998) > 0
			yyv23998 := yyv3998
			yyrl3998, yyrt3998 = z.DecInferLen(yyl3998, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3998 {
				if yyrl3998 <= cap(yyv3998) {
					yyv3998 = yyv3998[:yyrl3998]
				} else {
					yyv3998 = make([]VolumeMount, yyrl3998)
				}
			} else {
				yyv3998 = make([]VolumeMount, yyrl3998)
			}
			yyc3998 = true
			yyrr3998 = len(yyv3998)
			if yyrg3998 {
				copy(yyv3998, yyv23998)
			}
		} else if yyl3998 != len(yyv3998) {
			yyv3998 = yyv3998[:yyl3998]
			yyc3998 = true
		}
		yyj3998 := 0
		for ; yyj3998 < yyrr3998; yyj3998++ {
			yyh3998.ElemContainerState(yyj3998)
			if r.TryDecodeAsNil() {
				yyv3998[yyj3998] = VolumeMount{}
			} else {
				yyv3999 := &yyv3998[yyj3998]
				yyv3999.CodecDecodeSelf(d)
			}

		}
		if yyrt3998 {
			for ; yyj3998 < yyl3998; yyj3998++ {
				yyv3998 = append(yyv3998, VolumeMount{})
				yyh3998.ElemContainerState(yyj3998)
				if r.TryDecodeAsNil() {
					yyv3998[yyj3998] = VolumeMount{}
				} else {
					yyv4000 := &yyv3998[yyj3998]
					yyv4000.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3998 := 0
		for ; !r.CheckBreak(); yyj3998++ {

			if yyj3998 >= len(yyv3998) {
				yyv3998 = append(yyv3998, VolumeMount{}) // var yyz3998 VolumeMount
				yyc3998 = true
			}
			yyh3998.ElemContainerState(yyj3998)
			if yyj3998 < len(yyv3998) {
				if r.TryDecodeAsNil() {
					yyv3998[yyj3998] = VolumeMount{}
				} else {
					yyv4001 := &yyv3998[yyj3998]
					yyv4001.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3998 < len(yyv3998) {
			yyv3998 = yyv3998[:yyj3998]
			yyc3998 = true
		} else if yyj3998 == 0 && yyv3998 == nil {
			yyv3998 = []VolumeMount{}
			yyc3998 = true
		}
	}
	yyh3998.End()
	if yyc3998 {
		*v = yyv3998
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4002 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4003 := &yyv4002
		yy4003.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4004 := *v
	yyh4004, yyl4004 := z.DecSliceHelperStart()
	var yyc4004 bool
	if yyl4004 == 0 {
		if yyv4004 == nil {
			yyv4004 = []NodeSelectorTerm{}
			yyc4004 = true
		} else if len(yyv4004) != 0 {
			yyv4004 = yyv4004[:0]
			yyc4004 = true
		}
	} else if yyl4004 > 0 {
		var yyrr4004, yyrl4004 int
		var yyrt4004 bool
		if yyl4004 > cap(yyv4004) {

			yyrg4004 := len(yyv4004) > 0
			yyv24004 := yyv4004
			yyrl4004, yyrt4004 = z.DecInferLen(yyl4004, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4004 {
				if yyrl4004 <= cap(yyv4004) {
					yyv4004 = yyv4004[:yyrl4004]
				} else {
					yyv4004 = make([]NodeSelectorTerm, yyrl4004)
				}
			} else {
				yyv4004 = make([]NodeSelectorTerm, yyrl4004)
			}
			yyc4004 = true
			yyrr4004 = len(yyv4004)
			if yyrg4004 {
				copy(yyv4004, yyv24004)
			}
		} else if yyl4004 != len(yyv4004) {
			yyv4004 = yyv4004[:yyl4004]
			yyc4004 = true
		}
		yyj4004 := 0
		for ; yyj4004 < yyrr4004; yyj4004++ {
			yyh4004.ElemContainerState(yyj4004)
			if r.TryDecodeAsNil() {
				yyv4004[yyj4004] = NodeSelectorTerm{}
			} else {
				yyv4005 := &yyv4004[yyj4004]
				yyv4005.CodecDecodeSelf(d)
			}

		}
		if yyrt4004 {
			for ; yyj4004 < yyl4004; yyj4004++ {
				yyv4004 = append(yyv4004, NodeSelectorTerm{})
				yyh4004.ElemContainerState(yyj4004)
				if r.TryDecodeAsNil() {
					yyv4004[yyj4004] = NodeSelectorTerm{}
				} else {
					yyv4006 := &yyv4004[yyj4004]
					yyv4006.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4004 := 0
		for ; !r.CheckBreak(); yyj4004++ {

			if yyj4004 >= len(yyv4004) {
				yyv4004 = append(yyv4004, NodeSelectorTerm{}) // var yyz4004 NodeSelectorTerm
				yyc4004 = true
			}
			yyh4004.ElemContainerState(yyj4004)
			if yyj4004 < len(yyv4004) {
				if r.TryDecodeAsNil() {
					yyv4004[yyj4004] = NodeSelectorTerm{}
				} else {
					yyv4007 := &yyv4004[yyj4004]
					yyv4007.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4004 < len(yyv4004) {
			yyv4004 = yyv4004[:yyj4004]
			yyc4004 = true
		} else if yyj4004 == 0 && yyv4004 == nil {
			yyv4004 = []NodeSelectorTerm{}
			yyc4004 = true
		}
	}
	yyh4004.End()
	if yyc4004 {
		*v = yyv4004
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4008 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4009 := &yyv4008
		yy4009.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4010 := *v
	yyh4010, yyl4010 := z.DecSliceHelperStart()
	var yyc4010 bool
	if yyl4010 == 0 {
		if yyv4010 == nil {
			yyv4010 = []NodeSelectorRequirement{}
			yyc4010 = true
		} else if len(yyv4010) != 0 {
			yyv4010 = yyv4010[:0]
			yyc4010 = true
		}
	} else if yyl4010 > 0 {
		var yyrr4010, yyrl4010 int
		var yyrt4010 bool
		if yyl4010 > cap(yyv4010) {

			yyrg4010 := len(yyv4010) > 0
			yyv24010 := yyv4010
			yyrl4010, yyrt4010 = z.DecInferLen(yyl4010, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4010 {
				if yyrl4010 <= cap(yyv4010) {
					yyv4010 = yyv4010[:yyrl4010]
				} else {
					yyv4010 = make([]NodeSelectorRequirement, yyrl4010)
				}
			} else {
				yyv4010 = make([]NodeSelectorRequirement, yyrl4010)
			}
			yyc4010 = true
			yyrr4010 = len(yyv4010)
			if yyrg4010 {
				copy(yyv4010, yyv24010)
			}
		} else if yyl4010 != len(yyv4010) {
			yyv4010 = yyv4010[:yyl4010]
			yyc4010 = true
		}
		yyj4010 := 0
		for ; yyj4010 < yyrr4010; yyj4010++ {
			yyh4010.ElemContainerState(yyj4010)
			if r.TryDecodeAsNil() {
				yyv4010[yyj4010] = NodeSelectorRequirement{}
			} else {
				yyv4011 := &yyv4010[yyj4010]
				yyv4011.CodecDecodeSelf(d)
			}

		}
		if yyrt4010 {
			for ; yyj4010 < yyl4010; yyj4010++ {
				yyv4010 = append(yyv4010, NodeSelectorRequirement{})
				yyh4010.ElemContainerState(yyj4010)
				if r.TryDecodeAsNil() {
					yyv4010[yyj4010] = NodeSelectorRequirement{}
				} else {
					yyv4012 := &yyv4010[yyj4010]
					yyv4012.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4010 := 0
		for ; !r.CheckBreak(); yyj4010++ {

			if yyj4010 >= len(yyv4010) {
				yyv4010 = append(yyv4010, NodeSelectorRequirement{}) // var yyz4010 NodeSelectorRequirement
				yyc4010 = true
			}
			yyh4010.ElemContainerState(yyj4010)
			if yyj4010 < len(yyv4010) {
				if r.TryDecodeAsNil() {
					yyv4010[yyj4010] = NodeSelectorRequirement{}
				} else {
					yyv4013 := &yyv4010[yyj4010]
					yyv4013.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4010 < len(yyv4010) {
			yyv4010 = yyv4010[:yyj4010]
			yyc4010 = true
		} else if yyj4010 == 0 && yyv4010 == nil {
			yyv4010 = []NodeSelectorRequirement{}
			yyc4010 = true
		}
	}
	yyh4010.End()
	if yyc4010 {
		*v = yyv4010
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4014 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4015 := &yyv4014
		yy4015.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4016 := *v
	yyh4016, yyl4016 := z.DecSliceHelperStart()
	var yyc4016 bool
	if yyl4016 == 0 {
		if yyv4016 == nil {
			yyv4016 = []PreferredSchedulingTerm{}
			yyc4016 = true
		} else if len(yyv4016) != 0 {
			yyv4016 = yyv4016[:0]
			yyc4016 = true
		}
	} else if yyl4016 > 0 {
		var yyrr4016, yyrl4016 int
		var yyrt4016 bool
		if yyl4016 > cap(yyv4016) {

			yyrg4016 := len(yyv4016) > 0
			yyv24016 := yyv4016
			yyrl4016, yyrt4016 = z.DecInferLen(yyl4016, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4016 {
				if yyrl4016 <= cap(yyv4016) {
					yyv4016 = yyv4016[:yyrl4016]
				} else {
					yyv4016 = make([]PreferredSchedulingTerm, yyrl4016)
				}
			} else {
				yyv4016 = make([]PreferredSchedulingTerm, yyrl4016)
			}
			yyc4016 = true
			yyrr4016 = len(yyv4016)
			if yyrg4016 {
				copy(yyv4016, yyv24016)
			}
		} else if yyl4016 != len(yyv4016) {
			yyv4016 = yyv4016[:yyl4016]
			yyc4016 = true
		}
		yyj4016 := 0
		for ; yyj4016 < yyrr4016; yyj4016++ {
			yyh4016.ElemContainerState(yyj4016)
			if r.TryDecodeAsNil() {
				yyv4016[yyj4016] = PreferredSchedulingTerm{}
			} else {
				yyv4017 := &yyv4016[yyj4016]
				yyv4017.CodecDecodeSelf(d)
			}

		}
		if yyrt4016 {
			for ; yyj4016 < yyl4016; yyj4016++ {
				yyv4016 = append(yyv4016, PreferredSchedulingTerm{})
				yyh4016.ElemContainerState(yyj4016)
				if r.TryDecodeAsNil() {
					yyv4016[yyj4016] = PreferredSchedulingTerm{}
				} else {
					yyv4018 := &yyv4016[yyj4016]
					yyv4018.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4016 := 0
		for ; !r.CheckBreak(); yyj4016++ {

			if yyj4016 >= len(yyv4016) {
				yyv4016 = append(yyv4016, PreferredSchedulingTerm{}) // var yyz4016 PreferredSchedulingTerm
				yyc4016 = true
			}
			yyh4016.ElemContainerState(yyj4016)
			if yyj4016 < len(yyv4016) {
				if r.TryDecodeAsNil() {
					yyv4016[yyj4016] = PreferredSchedulingTerm{}
				} else {
					yyv4019 := &yyv4016[yyj4016]
					yyv4019.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4016 < len(yyv4016) {
			yyv4016 = yyv4016[:yyj4016]
			yyc4016 = true
		} else if yyj4016 == 0 && yyv4016 == nil {
			yyv4016 = []PreferredSchedulingTerm{}
			yyc4016 = true
		}
	}
	yyh4016.End()
	if yyc4016 {
		*v = yyv4016
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4020 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4021 := &yyv4020
		yy4021.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4022 := *v
	yyh4022, yyl4022 := z.DecSliceHelperStart()
	var yyc4022 bool
	if yyl4022 == 0 {
		if yyv4022 == nil {
			yyv4022 = []Volume{}
			yyc4022 = true
		} else if len(yyv4022) != 0 {
			yyv4022 = yyv4022[:0]
			yyc4022 = true
		}
	} else if yyl4022 > 0 {
		var yyrr4022, yyrl4022 int
		var yyrt4022 bool
		if yyl4022 > cap(yyv4022) {

			yyrg4022 := len(yyv4022) > 0
			yyv24022 := yyv4022
			yyrl4022, yyrt4022 = z.DecInferLen(yyl4022, z.DecBasicHandle().MaxInitLen, 160)
			if yyrt4022 {
				if yyrl4022 <= cap(yyv4022) {
					yyv4022 = yyv4022[:yyrl4022]
				} else {
					yyv4022 = make([]Volume, yyrl4022)
				}
			} else {
				yyv4022 = make([]Volume, yyrl4022)
			}
			yyc4022 = true
			yyrr4022 = len(yyv4022)
			if yyrg4022 {
				copy(yyv4022, yyv24022)
			}
		} else if yyl4022 != len(yyv4022) {
			yyv4022 = yyv4022[:yyl4022]
			yyc4022 = true
		}
		yyj4022 := 0
		for ; yyj4022 < yyrr4022; yyj4022++ {
			yyh4022.ElemContainerState(yyj4022)
			if r.TryDecodeAsNil() {
				yyv4022[yyj4022] = Volume{}
			} else {
				yyv4023 := &yyv4022[yyj4022]
				yyv4023.CodecDecodeSelf(d)
			}

		}
		if yyrt4022 {
			for ; yyj4022 < yyl4022; yyj4022++ {
				yyv4022 = append(yyv4022, Volume{})
				yyh4022.ElemContainerState(yyj4022)
				if r.TryDecodeAsNil() {
					yyv4022[yyj4022] = Volume{}
				} else {
					yyv4024 := &yyv4022[yyj4022]
					yyv4024.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4022 := 0
		for ; !r.CheckBreak(); yyj4022++ {

			if yyj4022 >= len(yyv4022) {
				yyv4022 = append(yyv4022, Volume{}) // var yyz4022 Volume
				yyc4022 = true
			}
			yyh4022.ElemContainerState(yyj4022)
			if yyj4022 < len(yyv4022) {
				if r.TryDecodeAsNil() {
					yyv4022[yyj4022] = Volume{}
				} else {
					yyv4025 := &yyv4022[yyj4022]
					yyv4025.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4022 < len(yyv4022) {
			yyv4022 = yyv4022[:yyj4022]
			yyc4022 = true
		} else if yyj4022 == 0 && yyv4022 == nil {
			yyv4022 = []Volume{}
			yyc4022 = true
		}
	}
	yyh4022.End()
	if yyc4022 {
		*v = yyv4022
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4026 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4027 := &yyv4026
		yy4027.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4028 := *v
	yyh4028, yyl4028 := z.DecSliceHelperStart()
	var yyc4028 bool
	if yyl4028 == 0 {
		if yyv4028 == nil {
			yyv4028 = []Container{}
			yyc4028 = true
		} else if len(yyv4028) != 0 {
			yyv4028 = yyv4028[:0]
			yyc4028 = true
		}
	} else if yyl4028 > 0 {
		var yyrr4028, yyrl4028 int
		var yyrt4028 bool
		if yyl4028 > cap(yyv4028) {

			yyrg4028 := len(yyv4028) > 0
			yyv24028 := yyv4028
			yyrl4028, yyrt4028 = z.DecInferLen(yyl4028, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4028 {
				if yyrl4028 <= cap(yyv4028) {
					yyv4028 = yyv4028[:yyrl4028]
				} else {
					yyv4028 = make([]Container, yyrl4028)
				}
			} else {
				yyv4028 = make([]Container, yyrl4028)
			}
			yyc4028 = true
			yyrr4028 = len(yyv4028)
			if yyrg4028 {
				copy(yyv4028, yyv24028)
			}
		} else if yyl4028 != len(yyv4028) {
			yyv4028 = yyv4028[:yyl4028]
			yyc4028 = true
		}
		yyj4028 := 0
		for ; yyj4028 < yyrr4028; yyj4028++ {
			yyh4028.ElemContainerState(yyj4028)
			if r.TryDecodeAsNil() {
				yyv4028[yyj4028] = Container{}
			} else {
				yyv4029 := &yyv4028[yyj4028]
				yyv4029.CodecDecodeSelf(d)
			}

		}
		if yyrt4028 {
			for ; yyj4028 < yyl4028; yyj4028++ {
				yyv4028 = append(yyv4028, Container{})
				yyh4028.ElemContainerState(yyj4028)
				if r.TryDecodeAsNil() {
					yyv4028[yyj4028] = Container{}
				} else {
					yyv4030 := &yyv4028[yyj4028]
					yyv4030.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4028 := 0
		for ; !r.CheckBreak(); yyj4028++ {

			if yyj4028 >= len(yyv4028) {
				yyv4028 = append(yyv4028, Container{}) // var yyz4028 Container
				yyc4028 = true
			}
			yyh4028.ElemContainerState(yyj4028)
			if yyj4028 < len(yyv4028) {
				if r.TryDecodeAsNil() {
					yyv4028[yyj4028] = Container{}
				} else {
					yyv4031 := &yyv4028[yyj4028]
					yyv4031.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4028 < len(yyv4028) {
			yyv4028 = yyv4028[:yyj4028]
			yyc4028 = true
		} else if yyj4028 == 0 && yyv4028 == nil {
			yyv4028 = []Container{}
			yyc4028 = true
		}
	}
	yyh4028.End()
	if yyc4028 {
		*v = yyv4028
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4032 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4033 := &yyv4032
		yy4033.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4034 := *v
	yyh4034, yyl4034 := z.DecSliceHelperStart()
	var yyc4034 bool
	if yyl4034 == 0 {
		if yyv4034 == nil {
			yyv4034 = []LocalObjectReference{}
			yyc4034 = true
		} else if len(yyv4034) != 0 {
			yyv4034 = yyv4034[:0]
			yyc4034 = true
		}
	} else if yyl4034 > 0 {
		var yyrr4034, yyrl4034 int
		var yyrt4034 bool
		if yyl4034 > cap(yyv4034) {

			yyrg4034 := len(yyv4034) > 0
			yyv24034 := yyv4034
			yyrl4034, yyrt4034 = z.DecInferLen(yyl4034, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4034 {
				if yyrl4034 <= cap(yyv4034) {
					yyv4034 = yyv4034[:yyrl4034]
				} else {
					yyv4034 = make([]LocalObjectReference, yyrl4034)
				}
			} else {
				yyv4034 = make([]LocalObjectReference, yyrl4034)
			}
			yyc4034 = true
			yyrr4034 = len(yyv4034)
			if yyrg4034 {
				copy(yyv4034, yyv24034)
			}
		} else if yyl4034 != len(yyv4034) {
			yyv4034 = yyv4034[:yyl4034]
			yyc4034 = true
		}
		yyj4034 := 0
		for ; yyj4034 < yyrr4034; yyj4034++ {
			yyh4034.ElemContainerState(yyj4034)
			if r.TryDecodeAsNil() {
				yyv4034[yyj4034] = LocalObjectReference{}
			} else {
				yyv4035 := &yyv4034[yyj4034]
				yyv4035.CodecDecodeSelf(d)
			}

		}
		if yyrt4034 {
			for ; yyj4034 < yyl4034; yyj4034++ {
				yyv4034 = append(yyv4034, LocalObjectReference{})
				yyh4034.ElemContainerState(yyj4034)
				if r.TryDecodeAsNil() {
					yyv4034[yyj4034] = LocalObjectReference{}
				} else {
					yyv4036 := &yyv4034[yyj4034]
					yyv4036.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4034 := 0
		for ; !r.CheckBreak(); yyj4034++ {

			if yyj4034 >= len(yyv4034) {
				yyv4034 = append(yyv4034, LocalObjectReference{}) // var yyz4034 LocalObjectReference
				yyc4034 = true
			}
			yyh4034.ElemContainerState(yyj4034)
			if yyj4034 < len(yyv4034) {
				if r.TryDecodeAsNil() {
					yyv4034[yyj4034] = LocalObjectReference{}
				} else {
					yyv4037 := &yyv4034[yyj4034]
					yyv4037.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4034 < len(yyv4034) {
			yyv4034 = yyv4034[:yyj4034]
			yyc4034 = true
		} else if yyj4034 == 0 && yyv4034 == nil {
			yyv4034 = []LocalObjectReference{}
			yyc4034 = true
		}
	}
	yyh4034.End()
	if yyc4034 {
		*v = yyv4034
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4038 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4039 := &yyv4038
		yy4039.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4040 := *v
	yyh4040, yyl4040 := z.DecSliceHelperStart()
	var yyc4040 bool
	if yyl4040 == 0 {
		if yyv4040 == nil {
			yyv4040 = []PodCondition{}
			yyc4040 = true
		} else if len(yyv4040) != 0 {
			yyv4040 = yyv4040[:0]
			yyc4040 = true
		}
	} else if yyl4040 > 0 {
		var yyrr4040, yyrl4040 int
		var yyrt4040 bool
		if yyl4040 > cap(yyv4040) {

			yyrg4040 := len(yyv4040) > 0
			yyv24040 := yyv4040
			yyrl4040, yyrt4040 = z.DecInferLen(yyl4040, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4040 {
				if yyrl4040 <= cap(yyv4040) {
					yyv4040 = yyv4040[:yyrl4040]
				} else {
					yyv4040 = make([]PodCondition, yyrl4040)
				}
			} else {
				yyv4040 = make([]PodCondition, yyrl4040)
			}
			yyc4040 = true
			yyrr4040 = len(yyv4040)
			if yyrg4040 {
				copy(yyv4040, yyv24040)
			}
		} else if yyl4040 != len(yyv4040) {
			yyv4040 = yyv4040[:yyl4040]
			yyc4040 = true
		}
		yyj4040 := 0
		for ; yyj4040 < yyrr4040; yyj4040++ {
			yyh4040.ElemContainerState(yyj4040)
			if r.TryDecodeAsNil() {
				yyv4040[yyj4040] = PodCondition{}
			} else {
				yyv4041 := &yyv4040[yyj4040]
				yyv4041.CodecDecodeSelf(d)
			}

		}
		if yyrt4040 {
			for ; yyj4040 < yyl4040; yyj4040++ {
				yyv4040 = append(yyv4040, PodCondition{})
				yyh4040.ElemContainerState(yyj4040)
				if r.TryDecodeAsNil() {
					yyv4040[yyj4040] = PodCondition{}
				} else {
					yyv4042 := &yyv4040[yyj4040]
					yyv4042.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4040 := 0
		for ; !r.CheckBreak(); yyj4040++ {

			if yyj4040 >= len(yyv4040) {
				yyv4040 = append(yyv4040, PodCondition{}) // var yyz4040 PodCondition
				yyc4040 = true
			}
			yyh4040.ElemContainerState(yyj4040)
			if yyj4040 < len(yyv4040) {
				if r.TryDecodeAsNil() {
					yyv4040[yyj4040] = PodCondition{}
				} else {
					yyv4043 := &yyv4040[yyj4040]
					yyv4043.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4040 < len(yyv4040) {
			yyv4040 = yyv4040[:yyj4040]
			yyc4040 = true
		} else if yyj4040 == 0 && yyv4040 == nil {
			yyv4040 = []PodCondition{}
			yyc4040 = true
		}
	}
	yyh4040.End()
	if yyc4040 {
		*v = yyv4040
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4044 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4045 := &yyv4044
		yy4045.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4046 := *v
	yyh4046, yyl4046 := z.DecSliceHelperStart()
	var yyc4046 bool
	if yyl4046 == 0 {
		if yyv4046 == nil {
			yyv4046 = []ContainerStatus{}
			yyc4046 = true
		} else if len(yyv4046) != 0 {
			yyv4046 = yyv4046[:0]
			yyc4046 = true
		}
	} else if yyl4046 > 0 {
		var yyrr4046, yyrl4046 int
		var yyrt4046 bool
		if yyl4046 > cap(yyv4046) {

			yyrg4046 := len(yyv4046) > 0
			yyv24046 := yyv4046
			yyrl4046, yyrt4046 = z.DecInferLen(yyl4046, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4046 {
				if yyrl4046 <= cap(yyv4046) {
					yyv4046 = yyv4046[:yyrl4046]
				} else {
					yyv4046 = make([]ContainerStatus, yyrl4046)
				}
			} else {
				yyv4046 = make([]ContainerStatus, yyrl4046)
			}
			yyc4046 = true
			yyrr4046 = len(yyv4046)
			if yyrg4046 {
				copy(yyv4046, yyv24046)
			}
		} else if yyl4046 != len(yyv4046) {
			yyv4046 = yyv4046[:yyl4046]
			yyc4046 = true
		}
		yyj4046 := 0
		for ; yyj4046 < yyrr4046; yyj4046++ {
			yyh4046.ElemContainerState(yyj4046)
			if r.TryDecodeAsNil() {
				yyv4046[yyj4046] = ContainerStatus{}
			} else {
				yyv4047 := &yyv4046[yyj4046]
				yyv4047.CodecDecodeSelf(d)
			}

		}
		if yyrt4046 {
			for ; yyj4046 < yyl4046; yyj4046++ {
				yyv4046 = append(yyv4046, ContainerStatus{})
				yyh4046.ElemContainerState(yyj4046)
				if r.TryDecodeAsNil() {
					yyv4046[yyj4046] = ContainerStatus{}
				} else {
					yyv4048 := &yyv4046[yyj4046]
					yyv4048.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4046 := 0
		for ; !r.CheckBreak(); yyj4046++ {

			if yyj4046 >= len(yyv4046) {
				yyv4046 = append(yyv4046, ContainerStatus{}) // var yyz4046 ContainerStatus
				yyc4046 = true
			}
			yyh4046.ElemContainerState(yyj4046)
			if yyj4046 < len(yyv4046) {
				if r.TryDecodeAsNil() {
					yyv4046[yyj4046] = ContainerStatus{}
				} else {
					yyv4049 := &yyv4046[yyj4046]
					yyv4049.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4046 < len(yyv4046) {
			yyv4046 = yyv4046[:yyj4046]
			yyc4046 = true
		} else if yyj4046 == 0 && yyv4046 == nil {
			yyv4046 = []ContainerStatus{}
			yyc4046 = true
		}
	}
	yyh4046.End()
	if yyc4046 {
		*v = yyv4046
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4050 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4051 := &yyv4050
		yy4051.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4052 := *v
	yyh4052, yyl4052 := z.DecSliceHelperStart()
	var yyc4052 bool
	if yyl4052 == 0 {
		if yyv4052 == nil {
			yyv4052 = []Pod{}
			yyc4052 = true
		} else if len(yyv4052) != 0 {
			yyv4052 = yyv4052[:0]
			yyc4052 = true
		}
	} else if yyl4052 > 0 {
		var yyrr4052, yyrl4052 int
		var yyrt4052 bool
		if yyl4052 > cap(yyv4052) {

			yyrg4052 := len(yyv4052) > 0
			yyv24052 := yyv4052
			yyrl4052, yyrt4052 = z.DecInferLen(yyl4052, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt4052 {
				if yyrl4052 <= cap(yyv4052) {
					yyv4052 = yyv4052[:yyrl4052]
				} else {
					yyv4052 = make([]Pod, yyrl4052)
				}
			} else {
				yyv4052 = make([]Pod, yyrl4052)
			}
			yyc4052 = true
			yyrr4052 = len(yyv4052)
			if yyrg4052 {
				copy(yyv4052, yyv24052)
			}
		} else if yyl4052 != len(yyv4052) {
			yyv4052 = yyv4052[:yyl4052]
			yyc4052 = true
		}
		yyj4052 := 0
		for ; yyj4052 < yyrr4052; yyj4052++ {
			yyh4052.ElemContainerState(yyj4052)
			if r.TryDecodeAsNil() {
				yyv4052[yyj4052] = Pod{}
			} else {
				yyv4053 := &yyv4052[yyj4052]
				yyv4053.CodecDecodeSelf(d)
			}

		}
		if yyrt4052 {
			for ; yyj4052 < yyl4052; yyj4052++ {
				yyv4052 = append(yyv4052, Pod{})
				yyh4052.ElemContainerState(yyj4052)
				if r.TryDecodeAsNil() {
					yyv4052[yyj4052] = Pod{}
				} else {
					yyv4054 := &yyv4052[yyj4052]
					yyv4054.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4052 := 0
		for ; !r.CheckBreak(); yyj4052++ {

			if yyj4052 >= len(yyv4052) {
				yyv4052 = append(yyv4052, Pod{}) // var yyz4052 Pod
				yyc4052 = true
			}
			yyh4052.ElemContainerState(yyj4052)
			if yyj4052 < len(yyv4052) {
				if r.TryDecodeAsNil() {
					yyv4052[yyj4052] = Pod{}
				} else {
					yyv4055 := &yyv4052[yyj4052]
					yyv4055.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4052 < len(yyv4052) {
			yyv4052 = yyv4052[:yyj4052]
			yyc4052 = true
		} else if yyj4052 == 0 && yyv4052 == nil {
			yyv4052 = []Pod{}
			yyc4052 = true
		}
	}
	yyh4052.End()
	if yyc4052 {
		*v = yyv4052
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4056 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4057 := &yyv4056
		yy4057.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4058 := *v
	yyh4058, yyl4058 := z.DecSliceHelperStart()
	var yyc4058 bool
	if yyl4058 == 0 {
		if yyv4058 == nil {
			yyv4058 = []PodTemplate{}
			yyc4058 = true
		} else if len(yyv4058) != 0 {
			yyv4058 = yyv4058[:0]
			yyc4058 = true
		}
	} else if yyl4058 > 0 {
		var yyrr4058, yyrl4058 int
		var yyrt4058 bool
		if yyl4058 > cap(yyv4058) {

			yyrg4058 := len(yyv4058) > 0
			yyv24058 := yyv4058
			yyrl4058, yyrt4058 = z.DecInferLen(yyl4058, z.DecBasicHandle().MaxInitLen, 544)
			if yyrt4058 {
				if yyrl4058 <= cap(yyv4058) {
					yyv4058 = yyv4058[:yyrl4058]
				} else {
					yyv4058 = make([]PodTemplate, yyrl4058)
				}
			} else {
				yyv4058 = make([]PodTemplate, yyrl4058)
			}
			yyc4058 = true
			yyrr4058 = len(yyv4058)
			if yyrg4058 {
				copy(yyv4058, yyv24058)
			}
		} else if yyl4058 != len(yyv4058) {
			yyv4058 = yyv4058[:yyl4058]
			yyc4058 = true
		}
		yyj4058 := 0
		for ; yyj4058 < yyrr4058; yyj4058++ {
			yyh4058.ElemContainerState(yyj4058)
			if r.TryDecodeAsNil() {
				yyv4058[yyj4058] = PodTemplate{}
			} else {
				yyv4059 := &yyv4058[yyj4058]
				yyv4059.CodecDecodeSelf(d)
			}

		}
		if yyrt4058 {
			for ; yyj4058 < yyl4058; yyj4058++ {
				yyv4058 = append(yyv4058, PodTemplate{})
				yyh4058.ElemContainerState(yyj4058)
				if r.TryDecodeAsNil() {
					yyv4058[yyj4058] = PodTemplate{}
				} else {
					yyv4060 := &yyv4058[yyj4058]
					yyv4060.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4058 := 0
		for ; !r.CheckBreak(); yyj4058++ {

			if yyj4058 >= len(yyv4058) {
				yyv4058 = append(yyv4058, PodTemplate{}) // var yyz4058 PodTemplate
				yyc4058 = true
			}
			yyh4058.ElemContainerState(yyj4058)
			if yyj4058 < len(yyv4058) {
				if r.TryDecodeAsNil() {
					yyv4058[yyj4058] = PodTemplate{}
				} else {
					yyv4061 := &yyv4058[yyj4058]
					yyv4061.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4058 < len(yyv4058) {
			yyv4058 = yyv4058[:yyj4058]
			yyc4058 = true
		} else if yyj4058 == 0 && yyv4058 == nil {
			yyv4058 = []PodTemplate{}
			yyc4058 = true
		}
	}
	yyh4058.End()
	if yyc4058 {
		*v = yyv4058
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4062 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4063 := &yyv4062
		yy4063.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4064 := *v
	yyh4064, yyl4064 := z.DecSliceHelperStart()
	var yyc4064 bool
	if yyl4064 == 0 {
		if yyv4064 == nil {
			yyv4064 = []ReplicationController{}
			yyc4064 = true
		} else if len(yyv4064) != 0 {
			yyv4064 = yyv4064[:0]
			yyc4064 = true
		}
	} else if yyl4064 > 0 {
		var yyrr4064, yyrl4064 int
		var yyrt4064 bool
		if yyl4064 > cap(yyv4064) {

			yyrg4064 := len(yyv4064) > 0
			yyv24064 := yyv4064
			yyrl4064, yyrt4064 = z.DecInferLen(yyl4064, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4064 {
				if yyrl4064 <= cap(yyv4064) {
					yyv4064 = yyv4064[:yyrl4064]
				} else {
					yyv4064 = make([]ReplicationController, yyrl4064)
				}
			} else {
				yyv4064 = make([]ReplicationController, yyrl4064)
			}
			yyc4064 = true
			yyrr4064 = len(yyv4064)
			if yyrg4064 {
				copy(yyv4064, yyv24064)
			}
		} else if yyl4064 != len(yyv4064) {
			yyv4064 = yyv4064[:yyl4064]
			yyc4064 = true
		}
		yyj4064 := 0
		for ; yyj4064 < yyrr4064; yyj4064++ {
			yyh4064.ElemContainerState(yyj4064)
			if r.TryDecodeAsNil() {
				yyv4064[yyj4064] = ReplicationController{}
			} else {
				yyv4065 := &yyv4064[yyj4064]
				yyv4065.CodecDecodeSelf(d)
			}

		}
		if yyrt4064 {
			for ; yyj4064 < yyl4064; yyj4064++ {
				yyv4064 = append(yyv4064, ReplicationController{})
				yyh4064.ElemContainerState(yyj4064)
				if r.TryDecodeAsNil() {
					yyv4064[yyj4064] = ReplicationController{}
				} else {
					yyv4066 := &yyv4064[yyj4064]
					yyv4066.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4064 := 0
		for ; !r.CheckBreak(); yyj4064++ {

			if yyj4064 >= len(yyv4064) {
				yyv4064 = append(yyv4064, ReplicationController{}) // var yyz4064 ReplicationController
				yyc4064 = true
			}
			yyh4064.ElemContainerState(yyj4064)
			if yyj4064 < len(yyv4064) {
				if r.TryDecodeAsNil() {
					yyv4064[yyj4064] = ReplicationController{}
				} else {
					yyv4067 := &yyv4064[yyj4064]
					yyv4067.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4064 < len(yyv4064) {
			yyv4064 = yyv4064[:yyj4064]
			yyc4064 = true
		} else if yyj4064 == 0 && yyv4064 == nil {
			yyv4064 = []ReplicationController{}
			yyc4064 = true
		}
	}
	yyh4064.End()
	if yyc4064 {
		*v = yyv4064
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4068 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4069 := &yyv4068
		yy4069.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4070 := *v
	yyh4070, yyl4070 := z.DecSliceHelperStart()
	var yyc4070 bool
	if yyl4070 == 0 {
		if yyv4070 == nil {
			yyv4070 = []LoadBalancerIngress{}
			yyc4070 = true
		} else if len(yyv4070) != 0 {
			yyv4070 = yyv4070[:0]
			yyc4070 = true
		}
	} else if yyl4070 > 0 {
		var yyrr4070, yyrl4070 int
		var yyrt4070 bool
		if yyl4070 > cap(yyv4070) {

			yyrg4070 := len(yyv4070) > 0
			yyv24070 := yyv4070
			yyrl4070, yyrt4070 = z.DecInferLen(yyl4070, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4070 {
				if yyrl4070 <= cap(yyv4070) {
					yyv4070 = yyv4070[:yyrl4070]
				} else {
					yyv4070 = make([]LoadBalancerIngress, yyrl4070)
				}
			} else {
				yyv4070 = make([]LoadBalancerIngress, yyrl4070)
			}
			yyc4070 = true
			yyrr4070 = len(yyv4070)
			if yyrg4070 {
				copy(yyv4070, yyv24070)
			}
		} else if yyl4070 != len(yyv4070) {
			yyv4070 = yyv4070[:yyl4070]
			yyc4070 = true
		}
		yyj4070 := 0
		for ; yyj4070 < yyrr4070; yyj4070++ {
			yyh4070.ElemContainerState(yyj4070)
			if r.TryDecodeAsNil() {
				yyv4070[yyj4070] = LoadBalancerIngress{}
			} else {
				yyv4071 := &yyv4070[yyj4070]
				yyv4071.CodecDecodeSelf(d)
			}

		}
		if yyrt4070 {
			for ; yyj4070 < yyl4070; yyj4070++ {
				yyv4070 = append(yyv4070, LoadBalancerIngress{})
				yyh4070.ElemContainerState(yyj4070)
				if r.TryDecodeAsNil() {
					yyv4070[yyj4070] = LoadBalancerIngress{}
				} else {
					yyv4072 := &yyv4070[yyj4070]
					yyv4072.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4070 := 0
		for ; !r.CheckBreak(); yyj4070++ {

			if yyj4070 >= len(yyv4070) {
				yyv4070 = append(yyv4070, LoadBalancerIngress{}) // var yyz4070 LoadBalancerIngress
				yyc4070 = true
			}
			yyh4070.ElemContainerState(yyj4070)
			if yyj4070 < len(yyv4070) {
				if r.TryDecodeAsNil() {
					yyv4070[yyj4070] = LoadBalancerIngress{}
				} else {
					yyv4073 := &yyv4070[yyj4070]
					yyv4073.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4070 < len(yyv4070) {
			yyv4070 = yyv4070[:yyj4070]
			yyc4070 = true
		} else if yyj4070 == 0 && yyv4070 == nil {
			yyv4070 = []LoadBalancerIngress{}
			yyc4070 = true
		}
	}
	yyh4070.End()
	if yyc4070 {
		*v = yyv4070
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4074 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4075 := &yyv4074
		yy4075.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4076 := *v
	yyh4076, yyl4076 := z.DecSliceHelperStart()
	var yyc4076 bool
	if yyl4076 == 0 {
		if yyv4076 == nil {
			yyv4076 = []ServicePort{}
			yyc4076 = true
		} else if len(yyv4076) != 0 {
			yyv4076 = yyv4076[:0]
			yyc4076 = true
		}
	} else if yyl4076 > 0 {
		var yyrr4076, yyrl4076 int
		var yyrt4076 bool
		if yyl4076 > cap(yyv4076) {

			yyrg4076 := len(yyv4076) > 0
			yyv24076 := yyv4076
			yyrl4076, yyrt4076 = z.DecInferLen(yyl4076, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4076 {
				if yyrl4076 <= cap(yyv4076) {
					yyv4076 = yyv4076[:yyrl4076]
				} else {
					yyv4076 = make([]ServicePort, yyrl4076)
				}
			} else {
				yyv4076 = make([]ServicePort, yyrl4076)
			}
			yyc4076 = true
			yyrr4076 = len(yyv4076)
			if yyrg4076 {
				copy(yyv4076, yyv24076)
			}
		} else if yyl4076 != len(yyv4076) {
			yyv4076 = yyv4076[:yyl4076]
			yyc4076 = true
		}
		yyj4076 := 0
		for ; yyj4076 < yyrr4076; yyj4076++ {
			yyh4076.ElemContainerState(yyj4076)
			if r.TryDecodeAsNil() {
				yyv4076[yyj4076] = ServicePort{}
			} else {
				yyv4077 := &yyv4076[yyj4076]
				yyv4077.CodecDecodeSelf(d)
			}

		}
		if yyrt4076 {
			for ; yyj4076 < yyl4076; yyj4076++ {
				yyv4076 = append(yyv4076, ServicePort{})
				yyh4076.ElemContainerState(yyj4076)
				if r.TryDecodeAsNil() {
					yyv4076[yyj4076] = ServicePort{}
				} else {
					yyv4078 := &yyv4076[yyj4076]
					yyv4078.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4076 := 0
		for ; !r.CheckBreak(); yyj4076++ {

			if yyj4076 >= len(yyv4076) {
				yyv4076 = append(yyv4076, ServicePort{}) // var yyz4076 ServicePort
				yyc4076 = true
			}
			yyh4076.ElemContainerState(yyj4076)
			if yyj4076 < len(yyv4076) {
				if r.TryDecodeAsNil() {
					yyv4076[yyj4076] = ServicePort{}
				} else {
					yyv4079 := &yyv4076[yyj4076]
					yyv4079.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4076 < len(yyv4076) {
			yyv4076 = yyv4076[:yyj4076]
			yyc4076 = true
		} else if yyj4076 == 0 && yyv4076 == nil {
			yyv4076 = []ServicePort{}
			yyc4076 = true
		}
	}
	yyh4076.End()
	if yyc4076 {
		*v = yyv4076
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4080 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4081 := &yyv4080
		yy4081.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4082 := *v
	yyh4082, yyl4082 := z.DecSliceHelperStart()
	var yyc4082 bool
	if yyl4082 == 0 {
		if yyv4082 == nil {
			yyv4082 = []Service{}
			yyc4082 = true
		} else if len(yyv4082) != 0 {
			yyv4082 = yyv4082[:0]
			yyc4082 = true
		}
	} else if yyl4082 > 0 {
		var yyrr4082, yyrl4082 int
		var yyrt4082 bool
		if yyl4082 > cap(yyv4082) {

			yyrg4082 := len(yyv4082) > 0
			yyv24082 := yyv4082
			yyrl4082, yyrt4082 = z.DecInferLen(yyl4082, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt4082 {
				if yyrl4082 <= cap(yyv4082) {
					yyv4082 = yyv4082[:yyrl4082]
				} else {
					yyv4082 = make([]Service, yyrl4082)
				}
			} else {
				yyv4082 = make([]Service, yyrl4082)
			}
			yyc4082 = true
			yyrr4082 = len(yyv4082)
			if yyrg4082 {
				copy(yyv4082, yyv24082)
			}
		} else if yyl4082 != len(yyv4082) {
			yyv4082 = yyv4082[:yyl4082]
			yyc4082 = true
		}
		yyj4082 := 0
		for ; yyj4082 < yyrr4082; yyj4082++ {
			yyh4082.ElemContainerState(yyj4082)
			if r.TryDecodeAsNil() {
				yyv4082[yyj4082] = Service{}
			} else {
				yyv4083 := &yyv4082[yyj4082]
				yyv4083.CodecDecodeSelf(d)
			}

		}
		if yyrt4082 {
			for ; yyj4082 < yyl4082; yyj4082++ {
				yyv4082 = append(yyv4082, Service{})
				yyh4082.ElemContainerState(yyj4082)
				if r.TryDecodeAsNil() {
					yyv4082[yyj4082] = Service{}
				} else {
					yyv4084 := &yyv4082[yyj4082]
					yyv4084.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4082 := 0
		for ; !r.CheckBreak(); yyj4082++ {

			if yyj4082 >= len(yyv4082) {
				yyv4082 = append(yyv4082, Service{}) // var yyz4082 Service
				yyc4082 = true
			}
			yyh4082.ElemContainerState(yyj4082)
			if yyj4082 < len(yyv4082) {
				if r.TryDecodeAsNil() {
					yyv4082[yyj4082] = Service{}
				} else {
					yyv4085 := &yyv4082[yyj4082]
					yyv4085.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4082 < len(yyv4082) {
			yyv4082 = yyv4082[:yyj4082]
			yyc4082 = true
		} else if yyj4082 == 0 && yyv4082 == nil {
			yyv4082 = []Service{}
			yyc4082 = true
		}
	}
	yyh4082.End()
	if yyc4082 {
		*v = yyv4082
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4086 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4087 := &yyv4086
		yy4087.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4088 := *v
	yyh4088, yyl4088 := z.DecSliceHelperStart()
	var yyc4088 bool
	if yyl4088 == 0 {
		if yyv4088 == nil {
			yyv4088 = []ObjectReference{}
			yyc4088 = true
		} else if len(yyv4088) != 0 {
			yyv4088 = yyv4088[:0]
			yyc4088 = true
		}
	} else if yyl4088 > 0 {
		var yyrr4088, yyrl4088 int
		var yyrt4088 bool
		if yyl4088 > cap(yyv4088) {

			yyrg4088 := len(yyv4088) > 0
			yyv24088 := yyv4088
			yyrl4088, yyrt4088 = z.DecInferLen(yyl4088, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4088 {
				if yyrl4088 <= cap(yyv4088) {
					yyv4088 = yyv4088[:yyrl4088]
				} else {
					yyv4088 = make([]ObjectReference, yyrl4088)
				}
			} else {
				yyv4088 = make([]ObjectReference, yyrl4088)
			}
			yyc4088 = true
			yyrr4088 = len(yyv4088)
			if yyrg4088 {
				copy(yyv4088, yyv24088)
			}
		} else if yyl4088 != len(yyv4088) {
			yyv4088 = yyv4088[:yyl4088]
			yyc4088 = true
		}
		yyj4088 := 0
		for ; yyj4088 < yyrr4088; yyj4088++ {
			yyh4088.ElemContainerState(yyj4088)
			if r.TryDecodeAsNil() {
				yyv4088[yyj4088] = ObjectReference{}
			} else {
				yyv4089 := &yyv4088[yyj4088]
				yyv4089.CodecDecodeSelf(d)
			}

		}
		if yyrt4088 {
			for ; yyj4088 < yyl4088; yyj4088++ {
				yyv4088 = append(yyv4088, ObjectReference{})
				yyh4088.ElemContainerState(yyj4088)
				if r.TryDecodeAsNil() {
					yyv4088[yyj4088] = ObjectReference{}
				} else {
					yyv4090 := &yyv4088[yyj4088]
					yyv4090.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4088 := 0
		for ; !r.CheckBreak(); yyj4088++ {

			if yyj4088 >= len(yyv4088) {
				yyv4088 = append(yyv4088, ObjectReference{}) // var yyz4088 ObjectReference
				yyc4088 = true
			}
			yyh4088.ElemContainerState(yyj4088)
			if yyj4088 < len(yyv4088) {
				if r.TryDecodeAsNil() {
					yyv4088[yyj4088] = ObjectReference{}
				} else {
					yyv4091 := &yyv4088[yyj4088]
					yyv4091.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4088 < len(yyv4088) {
			yyv4088 = yyv4088[:yyj4088]
			yyc4088 = true
		} else if yyj4088 == 0 && yyv4088 == nil {
			yyv4088 = []ObjectReference{}
			yyc4088 = true
		}
	}
	yyh4088.End()
	if yyc4088 {
		*v = yyv4088
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4092 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4093 := &yyv4092
		yy4093.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4094 := *v
	yyh4094, yyl4094 := z.DecSliceHelperStart()
	var yyc4094 bool
	if yyl4094 == 0 {
		if yyv4094 == nil {
			yyv4094 = []ServiceAccount{}
			yyc4094 = true
		} else if len(yyv4094) != 0 {
			yyv4094 = yyv4094[:0]
			yyc4094 = true
		}
	} else if yyl4094 > 0 {
		var yyrr4094, yyrl4094 int
		var yyrt4094 bool
		if yyl4094 > cap(yyv4094) {

			yyrg4094 := len(yyv4094) > 0
			yyv24094 := yyv4094
			yyrl4094, yyrt4094 = z.DecInferLen(yyl4094, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt4094 {
				if yyrl4094 <= cap(yyv4094) {
					yyv4094 = yyv4094[:yyrl4094]
				} else {
					yyv4094 = make([]ServiceAccount, yyrl4094)
				}
			} else {
				yyv4094 = make([]ServiceAccount, yyrl4094)
			}
			yyc4094 = true
			yyrr4094 = len(yyv4094)
			if yyrg4094 {
				copy(yyv4094, yyv24094)
			}
		} else if yyl4094 != len(yyv4094) {
			yyv4094 = yyv4094[:yyl4094]
			yyc4094 = true
		}
		yyj4094 := 0
		for ; yyj4094 < yyrr4094; yyj4094++ {
			yyh4094.ElemContainerState(yyj4094)
			if r.TryDecodeAsNil() {
				yyv4094[yyj4094] = ServiceAccount{}
			} else {
				yyv4095 := &yyv4094[yyj4094]
				yyv4095.CodecDecodeSelf(d)
			}

		}
		if yyrt4094 {
			for ; yyj4094 < yyl4094; yyj4094++ {
				yyv4094 = append(yyv4094, ServiceAccount{})
				yyh4094.ElemContainerState(yyj4094)
				if r.TryDecodeAsNil() {
					yyv4094[yyj4094] = ServiceAccount{}
				} else {
					yyv4096 := &yyv4094[yyj4094]
					yyv4096.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4094 := 0
		for ; !r.CheckBreak(); yyj4094++ {

			if yyj4094 >= len(yyv4094) {
				yyv4094 = append(yyv4094, ServiceAccount{}) // var yyz4094 ServiceAccount
				yyc4094 = true
			}
			yyh4094.ElemContainerState(yyj4094)
			if yyj4094 < len(yyv4094) {
				if r.TryDecodeAsNil() {
					yyv4094[yyj4094] = ServiceAccount{}
				} else {
					yyv4097 := &yyv4094[yyj4094]
					yyv4097.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4094 < len(yyv4094) {
			yyv4094 = yyv4094[:yyj4094]
			yyc4094 = true
		} else if yyj4094 == 0 && yyv4094 == nil {
			yyv4094 = []ServiceAccount{}
			yyc4094 = true
		}
	}
	yyh4094.End()
	if yyc4094 {
		*v = yyv4094
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4098 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4099 := &yyv4098
		yy4099.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4100 := *v
	yyh4100, yyl4100 := z.DecSliceHelperStart()
	var yyc4100 bool
	if yyl4100 == 0 {
		if yyv4100 == nil {
			yyv4100 = []EndpointSubset{}
			yyc4100 = true
		} else if len(yyv4100) != 0 {
			yyv4100 = yyv4100[:0]
			yyc4100 = true
		}
	} else if yyl4100 > 0 {
		var yyrr4100, yyrl4100 int
		var yyrt4100 bool
		if yyl4100 > cap(yyv4100) {

			yyrg4100 := len(yyv4100) > 0
			yyv24100 := yyv4100
			yyrl4100, yyrt4100 = z.DecInferLen(yyl4100, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4100 {
				if yyrl4100 <= cap(yyv4100) {
					yyv4100 = yyv4100[:yyrl4100]
				} else {
					yyv4100 = make([]EndpointSubset, yyrl4100)
				}
			} else {
				yyv4100 = make([]EndpointSubset, yyrl4100)
			}
			yyc4100 = true
			yyrr4100 = len(yyv4100)
			if yyrg4100 {
				copy(yyv4100, yyv24100)
			}
		} else if yyl4100 != len(yyv4100) {
			yyv4100 = yyv4100[:yyl4100]
			yyc4100 = true
		}
		yyj4100 := 0
		for ; yyj4100 < yyrr4100; yyj4100++ {
			yyh4100.ElemContainerState(yyj4100)
			if r.TryDecodeAsNil() {
				yyv4100[yyj4100] = EndpointSubset{}
			} else {
				yyv4101 := &yyv4100[yyj4100]
				yyv4101.CodecDecodeSelf(d)
			}

		}
		if yyrt4100 {
			for ; yyj4100 < yyl4100; yyj4100++ {
				yyv4100 = append(yyv4100, EndpointSubset{})
				yyh4100.ElemContainerState(yyj4100)
				if r.TryDecodeAsNil() {
					yyv4100[yyj4100] = EndpointSubset{}
				} else {
					yyv4102 := &yyv4100[yyj4100]
					yyv4102.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4100 := 0
		for ; !r.CheckBreak(); yyj4100++ {

			if yyj4100 >= len(yyv4100) {
				yyv4100 = append(yyv4100, EndpointSubset{}) // var yyz4100 EndpointSubset
				yyc4100 = true
			}
			yyh4100.ElemContainerState(yyj4100)
			if yyj4100 < len(yyv4100) {
				if r.TryDecodeAsNil() {
					yyv4100[yyj4100] = EndpointSubset{}
				} else {
					yyv4103 := &yyv4100[yyj4100]
					yyv4103.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4100 < len(yyv4100) {
			yyv4100 = yyv4100[:yyj4100]
			yyc4100 = true
		} else if yyj4100 == 0 && yyv4100 == nil {
			yyv4100 = []EndpointSubset{}
			yyc4100 = true
		}
	}
	yyh4100.End()
	if yyc4100 {
		*v = yyv4100
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4104 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4105 := &yyv4104
		yy4105.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4106 := *v
	yyh4106, yyl4106 := z.DecSliceHelperStart()
	var yyc4106 bool
	if yyl4106 == 0 {
		if yyv4106 == nil {
			yyv4106 = []EndpointAddress{}
			yyc4106 = true
		} else if len(yyv4106) != 0 {
			yyv4106 = yyv4106[:0]
			yyc4106 = true
		}
	} else if yyl4106 > 0 {
		var yyrr4106, yyrl4106 int
		var yyrt4106 bool
		if yyl4106 > cap(yyv4106) {

			yyrg4106 := len(yyv4106) > 0
			yyv24106 := yyv4106
			yyrl4106, yyrt4106 = z.DecInferLen(yyl4106, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4106 {
				if yyrl4106 <= cap(yyv4106) {
					yyv4106 = yyv4106[:yyrl4106]
				} else {
					yyv4106 = make([]EndpointAddress, yyrl4106)
				}
			} else {
				yyv4106 = make([]EndpointAddress, yyrl4106)
			}
			yyc4106 = true
			yyrr4106 = len(yyv4106)
			if yyrg4106 {
				copy(yyv4106, yyv24106)
			}
		} else if yyl4106 != len(yyv4106) {
			yyv4106 = yyv4106[:yyl4106]
			yyc4106 = true
		}
		yyj4106 := 0
		for ; yyj4106 < yyrr4106; yyj4106++ {
			yyh4106.ElemContainerState(yyj4106)
			if r.TryDecodeAsNil() {
				yyv4106[yyj4106] = EndpointAddress{}
			} else {
				yyv4107 := &yyv4106[yyj4106]
				yyv4107.CodecDecodeSelf(d)
			}

		}
		if yyrt4106 {
			for ; yyj4106 < yyl4106; yyj4106++ {
				yyv4106 = append(yyv4106, EndpointAddress{})
				yyh4106.ElemContainerState(yyj4106)
				if r.TryDecodeAsNil() {
					yyv4106[yyj4106] = EndpointAddress{}
				} else {
					yyv4108 := &yyv4106[yyj4106]
					yyv4108.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4106 := 0
		for ; !r.CheckBreak(); yyj4106++ {

			if yyj4106 >= len(yyv4106) {
				yyv4106 = append(yyv4106, EndpointAddress{}) // var yyz4106 EndpointAddress
				yyc4106 = true
			}
			yyh4106.ElemContainerState(yyj4106)
			if yyj4106 < len(yyv4106) {
				if r.TryDecodeAsNil() {
					yyv4106[yyj4106] = EndpointAddress{}
				} else {
					yyv4109 := &yyv4106[yyj4106]
					yyv4109.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4106 < len(yyv4106) {
			yyv4106 = yyv4106[:yyj4106]
			yyc4106 = true
		} else if yyj4106 == 0 && yyv4106 == nil {
			yyv4106 = []EndpointAddress{}
			yyc4106 = true
		}
	}
	yyh4106.End()
	if yyc4106 {
		*v = yyv4106
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4110 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4111 := &yyv4110
		yy4111.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4112 := *v
	yyh4112, yyl4112 := z.DecSliceHelperStart()
	var yyc4112 bool
	if yyl4112 == 0 {
		if yyv4112 == nil {
			yyv4112 = []EndpointPort{}
			yyc4112 = true
		} else if len(yyv4112) != 0 {
			yyv4112 = yyv4112[:0]
			yyc4112 = true
		}
	} else if yyl4112 > 0 {
		var yyrr4112, yyrl4112 int
		var yyrt4112 bool
		if yyl4112 > cap(yyv4112) {

			yyrg4112 := len(yyv4112) > 0
			yyv24112 := yyv4112
			yyrl4112, yyrt4112 = z.DecInferLen(yyl4112, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4112 {
				if yyrl4112 <= cap(yyv4112) {
					yyv4112 = yyv4112[:yyrl4112]
				} else {
					yyv4112 = make([]EndpointPort, yyrl4112)
				}
			} else {
				yyv4112 = make([]EndpointPort, yyrl4112)
			}
			yyc4112 = true
			yyrr4112 = len(yyv4112)
			if yyrg4112 {
				copy(yyv4112, yyv24112)
			}
		} else if yyl4112 != len(yyv4112) {
			yyv4112 = yyv4112[:yyl4112]
			yyc4112 = true
		}
		yyj4112 := 0
		for ; yyj4112 < yyrr4112; yyj4112++ {
			yyh4112.ElemContainerState(yyj4112)
			if r.TryDecodeAsNil() {
				yyv4112[yyj4112] = EndpointPort{}
			} else {
				yyv4113 := &yyv4112[yyj4112]
				yyv4113.CodecDecodeSelf(d)
			}

		}
		if yyrt4112 {
			for ; yyj4112 < yyl4112; yyj4112++ {
				yyv4112 = append(yyv4112, EndpointPort{})
				yyh4112.ElemContainerState(yyj4112)
				if r.TryDecodeAsNil() {
					yyv4112[yyj4112] = EndpointPort{}
				} else {
					yyv4114 := &yyv4112[yyj4112]
					yyv4114.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4112 := 0
		for ; !r.CheckBreak(); yyj4112++ {

			if yyj4112 >= len(yyv4112) {
				yyv4112 = append(yyv4112, EndpointPort{}) // var yyz4112 EndpointPort
				yyc4112 = true
			}
			yyh4112.ElemContainerState(yyj4112)
			if yyj4112 < len(yyv4112) {
				if r.TryDecodeAsNil() {
					yyv4112[yyj4112] = EndpointPort{}
				} else {
					yyv4115 := &yyv4112[yyj4112]
					yyv4115.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4112 < len(yyv4112) {
			yyv4112 = yyv4112[:yyj4112]
			yyc4112 = true
		} else if yyj4112 == 0 && yyv4112 == nil {
			yyv4112 = []EndpointPort{}
			yyc4112 = true
		}
	}
	yyh4112.End()
	if yyc4112 {
		*v = yyv4112
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4116 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4117 := &yyv4116
		yy4117.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4118 := *v
	yyh4118, yyl4118 := z.DecSliceHelperStart()
	var yyc4118 bool
	if yyl4118 == 0 {
		if yyv4118 == nil {
			yyv4118 = []Endpoints{}
			yyc4118 = true
		} else if len(yyv4118) != 0 {
			yyv4118 = yyv4118[:0]
			yyc4118 = true
		}
	} else if yyl4118 > 0 {
		var yyrr4118, yyrl4118 int
		var yyrt4118 bool
		if yyl4118 > cap(yyv4118) {

			yyrg4118 := len(yyv4118) > 0
			yyv24118 := yyv4118
			yyrl4118, yyrt4118 = z.DecInferLen(yyl4118, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4118 {
				if yyrl4118 <= cap(yyv4118) {
					yyv4118 = yyv4118[:yyrl4118]
				} else {
					yyv4118 = make([]Endpoints, yyrl4118)
				}
			} else {
				yyv4118 = make([]Endpoints, yyrl4118)
			}
			yyc4118 = true
			yyrr4118 = len(yyv4118)
			if yyrg4118 {
				copy(yyv4118, yyv24118)
			}
		} else if yyl4118 != len(yyv4118) {
			yyv4118 = yyv4118[:yyl4118]
			yyc4118 = true
		}
		yyj4118 := 0
		for ; yyj4118 < yyrr4118; yyj4118++ {
			yyh4118.ElemContainerState(yyj4118)
			if r.TryDecodeAsNil() {
				yyv4118[yyj4118] = Endpoints{}
			} else {
				yyv4119 := &yyv4118[yyj4118]
				yyv4119.CodecDecodeSelf(d)
			}

		}
		if yyrt4118 {
			for ; yyj4118 < yyl4118; yyj4118++ {
				yyv4118 = append(yyv4118, Endpoints{})
				yyh4118.ElemContainerState(yyj4118)
				if r.TryDecodeAsNil() {
					yyv4118[yyj4118] = Endpoints{}
				} else {
					yyv4120 := &yyv4118[yyj4118]
					yyv4120.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4118 := 0
		for ; !r.CheckBreak(); yyj4118++ {

			if yyj4118 >= len(yyv4118) {
				yyv4118 = append(yyv4118, Endpoints{}) // var yyz4118 Endpoints
				yyc4118 = true
			}
			yyh4118.ElemContainerState(yyj4118)
			if yyj4118 < len(yyv4118) {
				if r.TryDecodeAsNil() {
					yyv4118[yyj4118] = Endpoints{}
				} else {
					yyv4121 := &yyv4118[yyj4118]
					yyv4121.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4118 < len(yyv4118) {
			yyv4118 = yyv4118[:yyj4118]
			yyc4118 = true
		} else if yyj4118 == 0 && yyv4118 == nil {
			yyv4118 = []Endpoints{}
			yyc4118 = true
		}
	}
	yyh4118.End()
	if yyc4118 {
		*v = yyv4118
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4122 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4123 := &yyv4122
		yy4123.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4124 := *v
	yyh4124, yyl4124 := z.DecSliceHelperStart()
	var yyc4124 bool
	if yyl4124 == 0 {
		if yyv4124 == nil {
			yyv4124 = []NodeCondition{}
			yyc4124 = true
		} else if len(yyv4124) != 0 {
			yyv4124 = yyv4124[:0]
			yyc4124 = true
		}
	} else if yyl4124 > 0 {
		var yyrr4124, yyrl4124 int
		var yyrt4124 bool
		if yyl4124 > cap(yyv4124) {

			yyrg4124 := len(yyv4124) > 0
			yyv24124 := yyv4124
			yyrl4124, yyrt4124 = z.DecInferLen(yyl4124, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4124 {
				if yyrl4124 <= cap(yyv4124) {
					yyv4124 = yyv4124[:yyrl4124]
				} else {
					yyv4124 = make([]NodeCondition, yyrl4124)
				}
			} else {
				yyv4124 = make([]NodeCondition, yyrl4124)
			}
			yyc4124 = true
			yyrr4124 = len(yyv4124)
			if yyrg4124 {
				copy(yyv4124, yyv24124)
			}
		} else if yyl4124 != len(yyv4124) {
			yyv4124 = yyv4124[:yyl4124]
			yyc4124 = true
		}
		yyj4124 := 0
		for ; yyj4124 < yyrr4124; yyj4124++ {
			yyh4124.ElemContainerState(yyj4124)
			if r.TryDecodeAsNil() {
				yyv4124[yyj4124] = NodeCondition{}
			} else {
				yyv4125 := &yyv4124[yyj4124]
				yyv4125.CodecDecodeSelf(d)
			}

		}
		if yyrt4124 {
			for ; yyj4124 < yyl4124; yyj4124++ {
				yyv4124 = append(yyv4124, NodeCondition{})
				yyh4124.ElemContainerState(yyj4124)
				if r.TryDecodeAsNil() {
					yyv4124[yyj4124] = NodeCondition{}
				} else {
					yyv4126 := &yyv4124[yyj4124]
					yyv4126.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4124 := 0
		for ; !r.CheckBreak(); yyj4124++ {

			if yyj4124 >= len(yyv4124) {
				yyv4124 = append(yyv4124, NodeCondition{}) // var yyz4124 NodeCondition
				yyc4124 = true
			}
			yyh4124.ElemContainerState(yyj4124)
			if yyj4124 < len(yyv4124) {
				if r.TryDecodeAsNil() {
					yyv4124[yyj4124] = NodeCondition{}
				} else {
					yyv4127 := &yyv4124[yyj4124]
					yyv4127.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4124 < len(yyv4124) {
			yyv4124 = yyv4124[:yyj4124]
			yyc4124 = true
		} else if yyj4124 == 0 && yyv4124 == nil {
			yyv4124 = []NodeCondition{}
			yyc4124 = true
		}
	}
	yyh4124.End()
	if yyc4124 {
		*v = yyv4124
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4128 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4129 := &yyv4128
		yy4129.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4130 := *v
	yyh4130, yyl4130 := z.DecSliceHelperStart()
	var yyc4130 bool
	if yyl4130 == 0 {
		if yyv4130 == nil {
			yyv4130 = []NodeAddress{}
			yyc4130 = true
		} else if len(yyv4130) != 0 {
			yyv4130 = yyv4130[:0]
			yyc4130 = true
		}
	} else if yyl4130 > 0 {
		var yyrr4130, yyrl4130 int
		var yyrt4130 bool
		if yyl4130 > cap(yyv4130) {

			yyrg4130 := len(yyv4130) > 0
			yyv24130 := yyv4130
			yyrl4130, yyrt4130 = z.DecInferLen(yyl4130, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4130 {
				if yyrl4130 <= cap(yyv4130) {
					yyv4130 = yyv4130[:yyrl4130]
				} else {
					yyv4130 = make([]NodeAddress, yyrl4130)
				}
			} else {
				yyv4130 = make([]NodeAddress, yyrl4130)
			}
			yyc4130 = true
			yyrr4130 = len(yyv4130)
			if yyrg4130 {
				copy(yyv4130, yyv24130)
			}
		} else if yyl4130 != len(yyv4130) {
			yyv4130 = yyv4130[:yyl4130]
			yyc4130 = true
		}
		yyj4130 := 0
		for ; yyj4130 < yyrr4130; yyj4130++ {
			yyh4130.ElemContainerState(yyj4130)
			if r.TryDecodeAsNil() {
				yyv4130[yyj4130] = NodeAddress{}
			} else {
				yyv4131 := &yyv4130[yyj4130]
				yyv4131.CodecDecodeSelf(d)
			}

		}
		if yyrt4130 {
			for ; yyj4130 < yyl4130; yyj4130++ {
				yyv4130 = append(yyv4130, NodeAddress{})
				yyh4130.ElemContainerState(yyj4130)
				if r.TryDecodeAsNil() {
					yyv4130[yyj4130] = NodeAddress{}
				} else {
					yyv4132 := &yyv4130[yyj4130]
					yyv4132.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4130 := 0
		for ; !r.CheckBreak(); yyj4130++ {

			if yyj4130 >= len(yyv4130) {
				yyv4130 = append(yyv4130, NodeAddress{}) // var yyz4130 NodeAddress
				yyc4130 = true
			}
			yyh4130.ElemContainerState(yyj4130)
			if yyj4130 < len(yyv4130) {
				if r.TryDecodeAsNil() {
					yyv4130[yyj4130] = NodeAddress{}
				} else {
					yyv4133 := &yyv4130[yyj4130]
					yyv4133.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4130 < len(yyv4130) {
			yyv4130 = yyv4130[:yyj4130]
			yyc4130 = true
		} else if yyj4130 == 0 && yyv4130 == nil {
			yyv4130 = []NodeAddress{}
			yyc4130 = true
		}
	}
	yyh4130.End()
	if yyc4130 {
		*v = yyv4130
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4134 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4135 := &yyv4134
		yy4135.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4136 := *v
	yyh4136, yyl4136 := z.DecSliceHelperStart()
	var yyc4136 bool
	if yyl4136 == 0 {
		if yyv4136 == nil {
			yyv4136 = []ContainerImage{}
			yyc4136 = true
		} else if len(yyv4136) != 0 {
			yyv4136 = yyv4136[:0]
			yyc4136 = true
		}
	} else if yyl4136 > 0 {
		var yyrr4136, yyrl4136 int
		var yyrt4136 bool
		if yyl4136 > cap(yyv4136) {

			yyrg4136 := len(yyv4136) > 0
			yyv24136 := yyv4136
			yyrl4136, yyrt4136 = z.DecInferLen(yyl4136, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4136 {
				if yyrl4136 <= cap(yyv4136) {
					yyv4136 = yyv4136[:yyrl4136]
				} else {
					yyv4136 = make([]ContainerImage, yyrl4136)
				}
			} else {
				yyv4136 = make([]ContainerImage, yyrl4136)
			}
			yyc4136 = true
			yyrr4136 = len(yyv4136)
			if yyrg4136 {
				copy(yyv4136, yyv24136)
			}
		} else if yyl4136 != len(yyv4136) {
			yyv4136 = yyv4136[:yyl4136]
			yyc4136 = true
		}
		yyj4136 := 0
		for ; yyj4136 < yyrr4136; yyj4136++ {
			yyh4136.ElemContainerState(yyj4136)
			if r.TryDecodeAsNil() {
				yyv4136[yyj4136] = ContainerImage{}
			} else {
				yyv4137 := &yyv4136[yyj4136]
				yyv4137.CodecDecodeSelf(d)
			}

		}
		if yyrt4136 {
			for ; yyj4136 < yyl4136; yyj4136++ {
				yyv4136 = append(yyv4136, ContainerImage{})
				yyh4136.ElemContainerState(yyj4136)
				if r.TryDecodeAsNil() {
					yyv4136[yyj4136] = ContainerImage{}
				} else {
					yyv4138 := &yyv4136[yyj4136]
					yyv4138.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4136 := 0
		for ; !r.CheckBreak(); yyj4136++ {

			if yyj4136 >= len(yyv4136) {
				yyv4136 = append(yyv4136, ContainerImage{}) // var yyz4136 ContainerImage
				yyc4136 = true
			}
			yyh4136.ElemContainerState(yyj4136)
			if yyj4136 < len(yyv4136) {
				if r.TryDecodeAsNil() {
					yyv4136[yyj4136] = ContainerImage{}
				} else {
					yyv4139 := &yyv4136[yyj4136]
					yyv4139.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4136 < len(yyv4136) {
			yyv4136 = yyv4136[:yyj4136]
			yyc4136 = true
		} else if yyj4136 == 0 && yyv4136 == nil {
			yyv4136 = []ContainerImage{}
			yyc4136 = true
		}
	}
	yyh4136.End()
	if yyc4136 {
		*v = yyv4136
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4140, yyv4140 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4140.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4141 := &yyv4140
		yym4142 := z.EncBinary()
		_ = yym4142
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4141) {
		} else if !yym4142 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4141)
		} else {
			z.EncFallback(yy4141)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4143 := *v
	yyl4143 := r.ReadMapStart()
	yybh4143 := z.DecBasicHandle()
	if yyv4143 == nil {
		yyrl4143, _ := z.DecInferLen(yyl4143, yybh4143.MaxInitLen, 40)
		yyv4143 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4143)
		*v = yyv4143
	}
	var yymk4143 ResourceName
	var yymv4143 pkg3_resource.Quantity
	var yymg4143 bool
	if yybh4143.MapValueReset {
		yymg4143 = true
	}
	if yyl4143 > 0 {
		for yyj4143 := 0; yyj4143 < yyl4143; yyj4143++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4143 = ""
			} else {
				yymk4143 = ResourceName(r.DecodeString())
			}

			if yymg4143 {
				yymv4143 = yyv4143[yymk4143]
			} else {
				yymv4143 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4143 = pkg3_resource.Quantity{}
			} else {
				yyv4145 := &yymv4143
				yym4146 := z.DecBinary()
				_ = yym4146
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4145) {
				} else if !yym4146 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4145)
				} else {
					z.DecFallback(yyv4145, false)
				}
			}

			if yyv4143 != nil {
				yyv4143[yymk4143] = yymv4143
			}
		}
	} else if yyl4143 < 0 {
		for yyj4143 := 0; !r.CheckBreak(); yyj4143++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4143 = ""
			} else {
				yymk4143 = ResourceName(r.DecodeString())
			}

			if yymg4143 {
				yymv4143 = yyv4143[yymk4143]
			} else {
				yymv4143 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4143 = pkg3_resource.Quantity{}
			} else {
				yyv4148 := &yymv4143
				yym4149 := z.DecBinary()
				_ = yym4149
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4148) {
				} else if !yym4149 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4148)
				} else {
					z.DecFallback(yyv4148, false)
				}
			}

			if yyv4143 != nil {
				yyv4143[yymk4143] = yymv4143
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4150 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4151 := &yyv4150
		yy4151.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4152 := *v
	yyh4152, yyl4152 := z.DecSliceHelperStart()
	var yyc4152 bool
	if yyl4152 == 0 {
		if yyv4152 == nil {
			yyv4152 = []Node{}
			yyc4152 = true
		} else if len(yyv4152) != 0 {
			yyv4152 = yyv4152[:0]
			yyc4152 = true
		}
	} else if yyl4152 > 0 {
		var yyrr4152, yyrl4152 int
		var yyrt4152 bool
		if yyl4152 > cap(yyv4152) {

			yyrg4152 := len(yyv4152) > 0
			yyv24152 := yyv4152
			yyrl4152, yyrt4152 = z.DecInferLen(yyl4152, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4152 {
				if yyrl4152 <= cap(yyv4152) {
					yyv4152 = yyv4152[:yyrl4152]
				} else {
					yyv4152 = make([]Node, yyrl4152)
				}
			} else {
				yyv4152 = make([]Node, yyrl4152)
			}
			yyc4152 = true
			yyrr4152 = len(yyv4152)
			if yyrg4152 {
				copy(yyv4152, yyv24152)
			}
		} else if yyl4152 != len(yyv4152) {
			yyv4152 = yyv4152[:yyl4152]
			yyc4152 = true
		}
		yyj4152 := 0
		for ; yyj4152 < yyrr4152; yyj4152++ {
			yyh4152.ElemContainerState(yyj4152)
			if r.TryDecodeAsNil() {
				yyv4152[yyj4152] = Node{}
			} else {
				yyv4153 := &yyv4152[yyj4152]
				yyv4153.CodecDecodeSelf(d)
			}

		}
		if yyrt4152 {
			for ; yyj4152 < yyl4152; yyj4152++ {
				yyv4152 = append(yyv4152, Node{})
				yyh4152.ElemContainerState(yyj4152)
				if r.TryDecodeAsNil() {
					yyv4152[yyj4152] = Node{}
				} else {
					yyv4154 := &yyv4152[yyj4152]
					yyv4154.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4152 := 0
		for ; !r.CheckBreak(); yyj4152++ {

			if yyj4152 >= len(yyv4152) {
				yyv4152 = append(yyv4152, Node{}) // var yyz4152 Node
				yyc4152 = true
			}
			yyh4152.ElemContainerState(yyj4152)
			if yyj4152 < len(yyv4152) {
				if r.TryDecodeAsNil() {
					yyv4152[yyj4152] = Node{}
				} else {
					yyv4155 := &yyv4152[yyj4152]
					yyv4155.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4152 < len(yyv4152) {
			yyv4152 = yyv4152[:yyj4152]
			yyc4152 = true
		} else if yyj4152 == 0 && yyv4152 == nil {
			yyv4152 = []Node{}
			yyc4152 = true
		}
	}
	yyh4152.End()
	if yyc4152 {
		*v = yyv4152
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4156 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4156.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4157 := *v
	yyh4157, yyl4157 := z.DecSliceHelperStart()
	var yyc4157 bool
	if yyl4157 == 0 {
		if yyv4157 == nil {
			yyv4157 = []FinalizerName{}
			yyc4157 = true
		} else if len(yyv4157) != 0 {
			yyv4157 = yyv4157[:0]
			yyc4157 = true
		}
	} else if yyl4157 > 0 {
		var yyrr4157, yyrl4157 int
		var yyrt4157 bool
		if yyl4157 > cap(yyv4157) {

			yyrl4157, yyrt4157 = z.DecInferLen(yyl4157, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4157 {
				if yyrl4157 <= cap(yyv4157) {
					yyv4157 = yyv4157[:yyrl4157]
				} else {
					yyv4157 = make([]FinalizerName, yyrl4157)
				}
			} else {
				yyv4157 = make([]FinalizerName, yyrl4157)
			}
			yyc4157 = true
			yyrr4157 = len(yyv4157)
		} else if yyl4157 != len(yyv4157) {
			yyv4157 = yyv4157[:yyl4157]
			yyc4157 = true
		}
		yyj4157 := 0
		for ; yyj4157 < yyrr4157; yyj4157++ {
			yyh4157.ElemContainerState(yyj4157)
			if r.TryDecodeAsNil() {
				yyv4157[yyj4157] = ""
			} else {
				yyv4157[yyj4157] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4157 {
			for ; yyj4157 < yyl4157; yyj4157++ {
				yyv4157 = append(yyv4157, "")
				yyh4157.ElemContainerState(yyj4157)
				if r.TryDecodeAsNil() {
					yyv4157[yyj4157] = ""
				} else {
					yyv4157[yyj4157] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4157 := 0
		for ; !r.CheckBreak(); yyj4157++ {

			if yyj4157 >= len(yyv4157) {
				yyv4157 = append(yyv4157, "") // var yyz4157 FinalizerName
				yyc4157 = true
			}
			yyh4157.ElemContainerState(yyj4157)
			if yyj4157 < len(yyv4157) {
				if r.TryDecodeAsNil() {
					yyv4157[yyj4157] = ""
				} else {
					yyv4157[yyj4157] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4157 < len(yyv4157) {
			yyv4157 = yyv4157[:yyj4157]
			yyc4157 = true
		} else if yyj4157 == 0 && yyv4157 == nil {
			yyv4157 = []FinalizerName{}
			yyc4157 = true
		}
	}
	yyh4157.End()
	if yyc4157 {
		*v = yyv4157
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4161 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4162 := &yyv4161
		yy4162.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4163 := *v
	yyh4163, yyl4163 := z.DecSliceHelperStart()
	var yyc4163 bool
	if yyl4163 == 0 {
		if yyv4163 == nil {
			yyv4163 = []Namespace{}
			yyc4163 = true
		} else if len(yyv4163) != 0 {
			yyv4163 = yyv4163[:0]
			yyc4163 = true
		}
	} else if yyl4163 > 0 {
		var yyrr4163, yyrl4163 int
		var yyrt4163 bool
		if yyl4163 > cap(yyv4163) {

			yyrg4163 := len(yyv4163) > 0
			yyv24163 := yyv4163
			yyrl4163, yyrt4163 = z.DecInferLen(yyl4163, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt4163 {
				if yyrl4163 <= cap(yyv4163) {
					yyv4163 = yyv4163[:yyrl4163]
				} else {
					yyv4163 = make([]Namespace, yyrl4163)
				}
			} else {
				yyv4163 = make([]Namespace, yyrl4163)
			}
			yyc4163 = true
			yyrr4163 = len(yyv4163)
			if yyrg4163 {
				copy(yyv4163, yyv24163)
			}
		} else if yyl4163 != len(yyv4163) {
			yyv4163 = yyv4163[:yyl4163]
			yyc4163 = true
		}
		yyj4163 := 0
		for ; yyj4163 < yyrr4163; yyj4163++ {
			yyh4163.ElemContainerState(yyj4163)
			if r.TryDecodeAsNil() {
				yyv4163[yyj4163] = Namespace{}
			} else {
				yyv4164 := &yyv4163[yyj4163]
				yyv4164.CodecDecodeSelf(d)
			}

		}
		if yyrt4163 {
			for ; yyj4163 < yyl4163; yyj4163++ {
				yyv4163 = append(yyv4163, Namespace{})
				yyh4163.ElemContainerState(yyj4163)
				if r.TryDecodeAsNil() {
					yyv4163[yyj4163] = Namespace{}
				} else {
					yyv4165 := &yyv4163[yyj4163]
					yyv4165.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4163 := 0
		for ; !r.CheckBreak(); yyj4163++ {

			if yyj4163 >= len(yyv4163) {
				yyv4163 = append(yyv4163, Namespace{}) // var yyz4163 Namespace
				yyc4163 = true
			}
			yyh4163.ElemContainerState(yyj4163)
			if yyj4163 < len(yyv4163) {
				if r.TryDecodeAsNil() {
					yyv4163[yyj4163] = Namespace{}
				} else {
					yyv4166 := &yyv4163[yyj4163]
					yyv4166.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4163 < len(yyv4163) {
			yyv4163 = yyv4163[:yyj4163]
			yyc4163 = true
		} else if yyj4163 == 0 && yyv4163 == nil {
			yyv4163 = []Namespace{}
			yyc4163 = true
		}
	}
	yyh4163.End()
	if yyc4163 {
		*v = yyv4163
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4167 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4168 := &yyv4167
		yy4168.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4169 := *v
	yyh4169, yyl4169 := z.DecSliceHelperStart()
	var yyc4169 bool
	if yyl4169 == 0 {
		if yyv4169 == nil {
			yyv4169 = []Event{}
			yyc4169 = true
		} else if len(yyv4169) != 0 {
			yyv4169 = yyv4169[:0]
			yyc4169 = true
		}
	} else if yyl4169 > 0 {
		var yyrr4169, yyrl4169 int
		var yyrt4169 bool
		if yyl4169 > cap(yyv4169) {

			yyrg4169 := len(yyv4169) > 0
			yyv24169 := yyv4169
			yyrl4169, yyrt4169 = z.DecInferLen(yyl4169, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt4169 {
				if yyrl4169 <= cap(yyv4169) {
					yyv4169 = yyv4169[:yyrl4169]
				} else {
					yyv4169 = make([]Event, yyrl4169)
				}
			} else {
				yyv4169 = make([]Event, yyrl4169)
			}
			yyc4169 = true
			yyrr4169 = len(yyv4169)
			if yyrg4169 {
				copy(yyv4169, yyv24169)
			}
		} else if yyl4169 != len(yyv4169) {
			yyv4169 = yyv4169[:yyl4169]
			yyc4169 = true
		}
		yyj4169 := 0
		for ; yyj4169 < yyrr4169; yyj4169++ {
			yyh4169.ElemContainerState(yyj4169)
			if r.TryDecodeAsNil() {
				yyv4169[yyj4169] = Event{}
			} else {
				yyv4170 := &yyv4169[yyj4169]
				yyv4170.CodecDecodeSelf(d)
			}

		}
		if yyrt4169 {
			for ; yyj4169 < yyl4169; yyj4169++ {
				yyv4169 = append(yyv4169, Event{})
				yyh4169.ElemContainerState(yyj4169)
				if r.TryDecodeAsNil() {
					yyv4169[yyj4169] = Event{}
				} else {
					yyv4171 := &yyv4169[yyj4169]
					yyv4171.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4169 := 0
		for ; !r.CheckBreak(); yyj4169++ {

			if yyj4169 >= len(yyv4169) {
				yyv4169 = append(yyv4169, Event{}) // var yyz4169 Event
				yyc4169 = true
			}
			yyh4169.ElemContainerState(yyj4169)
			if yyj4169 < len(yyv4169) {
				if r.TryDecodeAsNil() {
					yyv4169[yyj4169] = Event{}
				} else {
					yyv4172 := &yyv4169[yyj4169]
					yyv4172.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4169 < len(yyv4169) {
			yyv4169 = yyv4169[:yyj4169]
			yyc4169 = true
		} else if yyj4169 == 0 && yyv4169 == nil {
			yyv4169 = []Event{}
			yyc4169 = true
		}
	}
	yyh4169.End()
	if yyc4169 {
		*v = yyv4169
	}
}

func (x codecSelfer1234) encSliceruntime_RawExtension(v []pkg6_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4173 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4174 := &yyv4173
		yym4175 := z.EncBinary()
		_ = yym4175
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4174) {
		} else if !yym4175 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4174)
		} else {
			z.EncFallback(yy4174)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_RawExtension(v *[]pkg6_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4176 := *v
	yyh4176, yyl4176 := z.DecSliceHelperStart()
	var yyc4176 bool
	if yyl4176 == 0 {
		if yyv4176 == nil {
			yyv4176 = []pkg6_runtime.RawExtension{}
			yyc4176 = true
		} else if len(yyv4176) != 0 {
			yyv4176 = yyv4176[:0]
			yyc4176 = true
		}
	} else if yyl4176 > 0 {
		var yyrr4176, yyrl4176 int
		var yyrt4176 bool
		if yyl4176 > cap(yyv4176) {

			yyrg4176 := len(yyv4176) > 0
			yyv24176 := yyv4176
			yyrl4176, yyrt4176 = z.DecInferLen(yyl4176, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4176 {
				if yyrl4176 <= cap(yyv4176) {
					yyv4176 = yyv4176[:yyrl4176]
				} else {
					yyv4176 = make([]pkg6_runtime.RawExtension, yyrl4176)
				}
			} else {
				yyv4176 = make([]pkg6_runtime.RawExtension, yyrl4176)
			}
			yyc4176 = true
			yyrr4176 = len(yyv4176)
			if yyrg4176 {
				copy(yyv4176, yyv24176)
			}
		} else if yyl4176 != len(yyv4176) {
			yyv4176 = yyv4176[:yyl4176]
			yyc4176 = true
		}
		yyj4176 := 0
		for ; yyj4176 < yyrr4176; yyj4176++ {
			yyh4176.ElemContainerState(yyj4176)
			if r.TryDecodeAsNil() {
				yyv4176[yyj4176] = pkg6_runtime.RawExtension{}
			} else {
				yyv4177 := &yyv4176[yyj4176]
				yym4178 := z.DecBinary()
				_ = yym4178
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4177) {
				} else if !yym4178 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4177)
				} else {
					z.DecFallback(yyv4177, false)
				}
			}

		}
		if yyrt4176 {
			for ; yyj4176 < yyl4176; yyj4176++ {
				yyv4176 = append(yyv4176, pkg6_runtime.RawExtension{})
				yyh4176.ElemContainerState(yyj4176)
				if r.TryDecodeAsNil() {
					yyv4176[yyj4176] = pkg6_runtime.RawExtension{}
				} else {
					yyv4179 := &yyv4176[yyj4176]
					yym4180 := z.DecBinary()
					_ = yym4180
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4179) {
					} else if !yym4180 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4179)
					} else {
						z.DecFallback(yyv4179, false)
					}
				}

			}
		}

	} else {
		yyj4176 := 0
		for ; !r.CheckBreak(); yyj4176++ {

			if yyj4176 >= len(yyv4176) {
				yyv4176 = append(yyv4176, pkg6_runtime.RawExtension{}) // var yyz4176 pkg6_runtime.RawExtension
				yyc4176 = true
			}
			yyh4176.ElemContainerState(yyj4176)
			if yyj4176 < len(yyv4176) {
				if r.TryDecodeAsNil() {
					yyv4176[yyj4176] = pkg6_runtime.RawExtension{}
				} else {
					yyv4181 := &yyv4176[yyj4176]
					yym4182 := z.DecBinary()
					_ = yym4182
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4181) {
					} else if !yym4182 && z.IsJSONHandle() {
						z.DecJSONUnmarshal(yyv4181)
					} else {
						z.DecFallback(yyv4181, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4176 < len(yyv4176) {
			yyv4176 = yyv4176[:yyj4176]
			yyc4176 = true
		} else if yyj4176 == 0 && yyv4176 == nil {
			yyv4176 = []pkg6_runtime.RawExtension{}
			yyc4176 = true
		}
	}
	yyh4176.End()
	if yyc4176 {
		*v = yyv4176
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4183 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4184 := &yyv4183
		yy4184.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4185 := *v
	yyh4185, yyl4185 := z.DecSliceHelperStart()
	var yyc4185 bool
	if yyl4185 == 0 {
		if yyv4185 == nil {
			yyv4185 = []LimitRangeItem{}
			yyc4185 = true
		} else if len(yyv4185) != 0 {
			yyv4185 = yyv4185[:0]
			yyc4185 = true
		}
	} else if yyl4185 > 0 {
		var yyrr4185, yyrl4185 int
		var yyrt4185 bool
		if yyl4185 > cap(yyv4185) {

			yyrg4185 := len(yyv4185) > 0
			yyv24185 := yyv4185
			yyrl4185, yyrt4185 = z.DecInferLen(yyl4185, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4185 {
				if yyrl4185 <= cap(yyv4185) {
					yyv4185 = yyv4185[:yyrl4185]
				} else {
					yyv4185 = make([]LimitRangeItem, yyrl4185)
				}
			} else {
				yyv4185 = make([]LimitRangeItem, yyrl4185)
			}
			yyc4185 = true
			yyrr4185 = len(yyv4185)
			if yyrg4185 {
				copy(yyv4185, yyv24185)
			}
		} else if yyl4185 != len(yyv4185) {
			yyv4185 = yyv4185[:yyl4185]
			yyc4185 = true
		}
		yyj4185 := 0
		for ; yyj4185 < yyrr4185; yyj4185++ {
			yyh4185.ElemContainerState(yyj4185)
			if r.TryDecodeAsNil() {
				yyv4185[yyj4185] = LimitRangeItem{}
			} else {
				yyv4186 := &yyv4185[yyj4185]
				yyv4186.CodecDecodeSelf(d)
			}

		}
		if yyrt4185 {
			for ; yyj4185 < yyl4185; yyj4185++ {
				yyv4185 = append(yyv4185, LimitRangeItem{})
				yyh4185.ElemContainerState(yyj4185)
				if r.TryDecodeAsNil() {
					yyv4185[yyj4185] = LimitRangeItem{}
				} else {
					yyv4187 := &yyv4185[yyj4185]
					yyv4187.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4185 := 0
		for ; !r.CheckBreak(); yyj4185++ {

			if yyj4185 >= len(yyv4185) {
				yyv4185 = append(yyv4185, LimitRangeItem{}) // var yyz4185 LimitRangeItem
				yyc4185 = true
			}
			yyh4185.ElemContainerState(yyj4185)
			if yyj4185 < len(yyv4185) {
				if r.TryDecodeAsNil() {
					yyv4185[yyj4185] = LimitRangeItem{}
				} else {
					yyv4188 := &yyv4185[yyj4185]
					yyv4188.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4185 < len(yyv4185) {
			yyv4185 = yyv4185[:yyj4185]
			yyc4185 = true
		} else if yyj4185 == 0 && yyv4185 == nil {
			yyv4185 = []LimitRangeItem{}
			yyc4185 = true
		}
	}
	yyh4185.End()
	if yyc4185 {
		*v = yyv4185
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4189 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4190 := &yyv4189
		yy4190.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4191 := *v
	yyh4191, yyl4191 := z.DecSliceHelperStart()
	var yyc4191 bool
	if yyl4191 == 0 {
		if yyv4191 == nil {
			yyv4191 = []LimitRange{}
			yyc4191 = true
		} else if len(yyv4191) != 0 {
			yyv4191 = yyv4191[:0]
			yyc4191 = true
		}
	} else if yyl4191 > 0 {
		var yyrr4191, yyrl4191 int
		var yyrt4191 bool
		if yyl4191 > cap(yyv4191) {

			yyrg4191 := len(yyv4191) > 0
			yyv24191 := yyv4191
			yyrl4191, yyrt4191 = z.DecInferLen(yyl4191, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4191 {
				if yyrl4191 <= cap(yyv4191) {
					yyv4191 = yyv4191[:yyrl4191]
				} else {
					yyv4191 = make([]LimitRange, yyrl4191)
				}
			} else {
				yyv4191 = make([]LimitRange, yyrl4191)
			}
			yyc4191 = true
			yyrr4191 = len(yyv4191)
			if yyrg4191 {
				copy(yyv4191, yyv24191)
			}
		} else if yyl4191 != len(yyv4191) {
			yyv4191 = yyv4191[:yyl4191]
			yyc4191 = true
		}
		yyj4191 := 0
		for ; yyj4191 < yyrr4191; yyj4191++ {
			yyh4191.ElemContainerState(yyj4191)
			if r.TryDecodeAsNil() {
				yyv4191[yyj4191] = LimitRange{}
			} else {
				yyv4192 := &yyv4191[yyj4191]
				yyv4192.CodecDecodeSelf(d)
			}

		}
		if yyrt4191 {
			for ; yyj4191 < yyl4191; yyj4191++ {
				yyv4191 = append(yyv4191, LimitRange{})
				yyh4191.ElemContainerState(yyj4191)
				if r.TryDecodeAsNil() {
					yyv4191[yyj4191] = LimitRange{}
				} else {
					yyv4193 := &yyv4191[yyj4191]
					yyv4193.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4191 := 0
		for ; !r.CheckBreak(); yyj4191++ {

			if yyj4191 >= len(yyv4191) {
				yyv4191 = append(yyv4191, LimitRange{}) // var yyz4191 LimitRange
				yyc4191 = true
			}
			yyh4191.ElemContainerState(yyj4191)
			if yyj4191 < len(yyv4191) {
				if r.TryDecodeAsNil() {
					yyv4191[yyj4191] = LimitRange{}
				} else {
					yyv4194 := &yyv4191[yyj4191]
					yyv4194.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4191 < len(yyv4191) {
			yyv4191 = yyv4191[:yyj4191]
			yyc4191 = true
		} else if yyj4191 == 0 && yyv4191 == nil {
			yyv4191 = []LimitRange{}
			yyc4191 = true
		}
	}
	yyh4191.End()
	if yyc4191 {
		*v = yyv4191
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4195 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4196 := &yyv4195
		yy4196.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4197 := *v
	yyh4197, yyl4197 := z.DecSliceHelperStart()
	var yyc4197 bool
	if yyl4197 == 0 {
		if yyv4197 == nil {
			yyv4197 = []ResourceQuota{}
			yyc4197 = true
		} else if len(yyv4197) != 0 {
			yyv4197 = yyv4197[:0]
			yyc4197 = true
		}
	} else if yyl4197 > 0 {
		var yyrr4197, yyrl4197 int
		var yyrt4197 bool
		if yyl4197 > cap(yyv4197) {

			yyrg4197 := len(yyv4197) > 0
			yyv24197 := yyv4197
			yyrl4197, yyrt4197 = z.DecInferLen(yyl4197, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4197 {
				if yyrl4197 <= cap(yyv4197) {
					yyv4197 = yyv4197[:yyrl4197]
				} else {
					yyv4197 = make([]ResourceQuota, yyrl4197)
				}
			} else {
				yyv4197 = make([]ResourceQuota, yyrl4197)
			}
			yyc4197 = true
			yyrr4197 = len(yyv4197)
			if yyrg4197 {
				copy(yyv4197, yyv24197)
			}
		} else if yyl4197 != len(yyv4197) {
			yyv4197 = yyv4197[:yyl4197]
			yyc4197 = true
		}
		yyj4197 := 0
		for ; yyj4197 < yyrr4197; yyj4197++ {
			yyh4197.ElemContainerState(yyj4197)
			if r.TryDecodeAsNil() {
				yyv4197[yyj4197] = ResourceQuota{}
			} else {
				yyv4198 := &yyv4197[yyj4197]
				yyv4198.CodecDecodeSelf(d)
			}

		}
		if yyrt4197 {
			for ; yyj4197 < yyl4197; yyj4197++ {
				yyv4197 = append(yyv4197, ResourceQuota{})
				yyh4197.ElemContainerState(yyj4197)
				if r.TryDecodeAsNil() {
					yyv4197[yyj4197] = ResourceQuota{}
				} else {
					yyv4199 := &yyv4197[yyj4197]
					yyv4199.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4197 := 0
		for ; !r.CheckBreak(); yyj4197++ {

			if yyj4197 >= len(yyv4197) {
				yyv4197 = append(yyv4197, ResourceQuota{}) // var yyz4197 ResourceQuota
				yyc4197 = true
			}
			yyh4197.ElemContainerState(yyj4197)
			if yyj4197 < len(yyv4197) {
				if r.TryDecodeAsNil() {
					yyv4197[yyj4197] = ResourceQuota{}
				} else {
					yyv4200 := &yyv4197[yyj4197]
					yyv4200.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4197 < len(yyv4197) {
			yyv4197 = yyv4197[:yyj4197]
			yyc4197 = true
		} else if yyj4197 == 0 && yyv4197 == nil {
			yyv4197 = []ResourceQuota{}
			yyc4197 = true
		}
	}
	yyh4197.End()
	if yyc4197 {
		*v = yyv4197
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4201, yyv4201 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4202 := z.EncBinary()
		_ = yym4202
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4201))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4201 == nil {
			r.EncodeNil()
		} else {
			yym4203 := z.EncBinary()
			_ = yym4203
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4201))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4204 := *v
	yyl4204 := r.ReadMapStart()
	yybh4204 := z.DecBasicHandle()
	if yyv4204 == nil {
		yyrl4204, _ := z.DecInferLen(yyl4204, yybh4204.MaxInitLen, 40)
		yyv4204 = make(map[string][]uint8, yyrl4204)
		*v = yyv4204
	}
	var yymk4204 string
	var yymv4204 []uint8
	var yymg4204 bool
	if yybh4204.MapValueReset {
		yymg4204 = true
	}
	if yyl4204 > 0 {
		for yyj4204 := 0; yyj4204 < yyl4204; yyj4204++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4204 = ""
			} else {
				yymk4204 = string(r.DecodeString())
			}

			if yymg4204 {
				yymv4204 = yyv4204[yymk4204]
			} else {
				yymv4204 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4204 = nil
			} else {
				yyv4206 := &yymv4204
				yym4207 := z.DecBinary()
				_ = yym4207
				if false {
				} else {
					*yyv4206 = r.DecodeBytes(*(*[]byte)(yyv4206), false, false)
				}
			}

			if yyv4204 != nil {
				yyv4204[yymk4204] = yymv4204
			}
		}
	} else if yyl4204 < 0 {
		for yyj4204 := 0; !r.CheckBreak(); yyj4204++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4204 = ""
			} else {
				yymk4204 = string(r.DecodeString())
			}

			if yymg4204 {
				yymv4204 = yyv4204[yymk4204]
			} else {
				yymv4204 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4204 = nil
			} else {
				yyv4209 := &yymv4204
				yym4210 := z.DecBinary()
				_ = yym4210
				if false {
				} else {
					*yyv4209 = r.DecodeBytes(*(*[]byte)(yyv4209), false, false)
				}
			}

			if yyv4204 != nil {
				yyv4204[yymk4204] = yymv4204
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4211 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4212 := &yyv4211
		yy4212.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4213 := *v
	yyh4213, yyl4213 := z.DecSliceHelperStart()
	var yyc4213 bool
	if yyl4213 == 0 {
		if yyv4213 == nil {
			yyv4213 = []Secret{}
			yyc4213 = true
		} else if len(yyv4213) != 0 {
			yyv4213 = yyv4213[:0]
			yyc4213 = true
		}
	} else if yyl4213 > 0 {
		var yyrr4213, yyrl4213 int
		var yyrt4213 bool
		if yyl4213 > cap(yyv4213) {

			yyrg4213 := len(yyv4213) > 0
			yyv24213 := yyv4213
			yyrl4213, yyrt4213 = z.DecInferLen(yyl4213, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4213 {
				if yyrl4213 <= cap(yyv4213) {
					yyv4213 = yyv4213[:yyrl4213]
				} else {
					yyv4213 = make([]Secret, yyrl4213)
				}
			} else {
				yyv4213 = make([]Secret, yyrl4213)
			}
			yyc4213 = true
			yyrr4213 = len(yyv4213)
			if yyrg4213 {
				copy(yyv4213, yyv24213)
			}
		} else if yyl4213 != len(yyv4213) {
			yyv4213 = yyv4213[:yyl4213]
			yyc4213 = true
		}
		yyj4213 := 0
		for ; yyj4213 < yyrr4213; yyj4213++ {
			yyh4213.ElemContainerState(yyj4213)
			if r.TryDecodeAsNil() {
				yyv4213[yyj4213] = Secret{}
			} else {
				yyv4214 := &yyv4213[yyj4213]
				yyv4214.CodecDecodeSelf(d)
			}

		}
		if yyrt4213 {
			for ; yyj4213 < yyl4213; yyj4213++ {
				yyv4213 = append(yyv4213, Secret{})
				yyh4213.ElemContainerState(yyj4213)
				if r.TryDecodeAsNil() {
					yyv4213[yyj4213] = Secret{}
				} else {
					yyv4215 := &yyv4213[yyj4213]
					yyv4215.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4213 := 0
		for ; !r.CheckBreak(); yyj4213++ {

			if yyj4213 >= len(yyv4213) {
				yyv4213 = append(yyv4213, Secret{}) // var yyz4213 Secret
				yyc4213 = true
			}
			yyh4213.ElemContainerState(yyj4213)
			if yyj4213 < len(yyv4213) {
				if r.TryDecodeAsNil() {
					yyv4213[yyj4213] = Secret{}
				} else {
					yyv4216 := &yyv4213[yyj4213]
					yyv4216.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4213 < len(yyv4213) {
			yyv4213 = yyv4213[:yyj4213]
			yyc4213 = true
		} else if yyj4213 == 0 && yyv4213 == nil {
			yyv4213 = []Secret{}
			yyc4213 = true
		}
	}
	yyh4213.End()
	if yyc4213 {
		*v = yyv4213
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4217 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4218 := &yyv4217
		yy4218.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4219 := *v
	yyh4219, yyl4219 := z.DecSliceHelperStart()
	var yyc4219 bool
	if yyl4219 == 0 {
		if yyv4219 == nil {
			yyv4219 = []ConfigMap{}
			yyc4219 = true
		} else if len(yyv4219) != 0 {
			yyv4219 = yyv4219[:0]
			yyc4219 = true
		}
	} else if yyl4219 > 0 {
		var yyrr4219, yyrl4219 int
		var yyrt4219 bool
		if yyl4219 > cap(yyv4219) {

			yyrg4219 := len(yyv4219) > 0
			yyv24219 := yyv4219
			yyrl4219, yyrt4219 = z.DecInferLen(yyl4219, z.DecBasicHandle().MaxInitLen, 200)
			if yyrt4219 {
				if yyrl4219 <= cap(yyv4219) {
					yyv4219 = yyv4219[:yyrl4219]
				} else {
					yyv4219 = make([]ConfigMap, yyrl4219)
				}
			} else {
				yyv4219 = make([]ConfigMap, yyrl4219)
			}
			yyc4219 = true
			yyrr4219 = len(yyv4219)
			if yyrg4219 {
				copy(yyv4219, yyv24219)
			}
		} else if yyl4219 != len(yyv4219) {
			yyv4219 = yyv4219[:yyl4219]
			yyc4219 = true
		}
		yyj4219 := 0
		for ; yyj4219 < yyrr4219; yyj4219++ {
			yyh4219.ElemContainerState(yyj4219)
			if r.TryDecodeAsNil() {
				yyv4219[yyj4219] = ConfigMap{}
			} else {
				yyv4220 := &yyv4219[yyj4219]
				yyv4220.CodecDecodeSelf(d)
			}

		}
		if yyrt4219 {
			for ; yyj4219 < yyl4219; yyj4219++ {
				yyv4219 = append(yyv4219, ConfigMap{})
				yyh4219.ElemContainerState(yyj4219)
				if r.TryDecodeAsNil() {
					yyv4219[yyj4219] = ConfigMap{}
				} else {
					yyv4221 := &yyv4219[yyj4219]
					yyv4221.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4219 := 0
		for ; !r.CheckBreak(); yyj4219++ {

			if yyj4219 >= len(yyv4219) {
				yyv4219 = append(yyv4219, ConfigMap{}) // var yyz4219 ConfigMap
				yyc4219 = true
			}
			yyh4219.ElemContainerState(yyj4219)
			if yyj4219 < len(yyv4219) {
				if r.TryDecodeAsNil() {
					yyv4219[yyj4219] = ConfigMap{}
				} else {
					yyv4222 := &yyv4219[yyj4219]
					yyv4222.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4219 < len(yyv4219) {
			yyv4219 = yyv4219[:yyj4219]
			yyc4219 = true
		} else if yyj4219 == 0 && yyv4219 == nil {
			yyv4219 = []ConfigMap{}
			yyc4219 = true
		}
	}
	yyh4219.End()
	if yyc4219 {
		*v = yyv4219
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4223 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4224 := &yyv4223
		yy4224.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4225 := *v
	yyh4225, yyl4225 := z.DecSliceHelperStart()
	var yyc4225 bool
	if yyl4225 == 0 {
		if yyv4225 == nil {
			yyv4225 = []ComponentCondition{}
			yyc4225 = true
		} else if len(yyv4225) != 0 {
			yyv4225 = yyv4225[:0]
			yyc4225 = true
		}
	} else if yyl4225 > 0 {
		var yyrr4225, yyrl4225 int
		var yyrt4225 bool
		if yyl4225 > cap(yyv4225) {

			yyrg4225 := len(yyv4225) > 0
			yyv24225 := yyv4225
			yyrl4225, yyrt4225 = z.DecInferLen(yyl4225, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4225 {
				if yyrl4225 <= cap(yyv4225) {
					yyv4225 = yyv4225[:yyrl4225]
				} else {
					yyv4225 = make([]ComponentCondition, yyrl4225)
				}
			} else {
				yyv4225 = make([]ComponentCondition, yyrl4225)
			}
			yyc4225 = true
			yyrr4225 = len(yyv4225)
			if yyrg4225 {
				copy(yyv4225, yyv24225)
			}
		} else if yyl4225 != len(yyv4225) {
			yyv4225 = yyv4225[:yyl4225]
			yyc4225 = true
		}
		yyj4225 := 0
		for ; yyj4225 < yyrr4225; yyj4225++ {
			yyh4225.ElemContainerState(yyj4225)
			if r.TryDecodeAsNil() {
				yyv4225[yyj4225] = ComponentCondition{}
			} else {
				yyv4226 := &yyv4225[yyj4225]
				yyv4226.CodecDecodeSelf(d)
			}

		}
		if yyrt4225 {
			for ; yyj4225 < yyl4225; yyj4225++ {
				yyv4225 = append(yyv4225, ComponentCondition{})
				yyh4225.ElemContainerState(yyj4225)
				if r.TryDecodeAsNil() {
					yyv4225[yyj4225] = ComponentCondition{}
				} else {
					yyv4227 := &yyv4225[yyj4225]
					yyv4227.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4225 := 0
		for ; !r.CheckBreak(); yyj4225++ {

			if yyj4225 >= len(yyv4225) {
				yyv4225 = append(yyv4225, ComponentCondition{}) // var yyz4225 ComponentCondition
				yyc4225 = true
			}
			yyh4225.ElemContainerState(yyj4225)
			if yyj4225 < len(yyv4225) {
				if r.TryDecodeAsNil() {
					yyv4225[yyj4225] = ComponentCondition{}
				} else {
					yyv4228 := &yyv4225[yyj4225]
					yyv4228.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4225 < len(yyv4225) {
			yyv4225 = yyv4225[:yyj4225]
			yyc4225 = true
		} else if yyj4225 == 0 && yyv4225 == nil {
			yyv4225 = []ComponentCondition{}
			yyc4225 = true
		}
	}
	yyh4225.End()
	if yyc4225 {
		*v = yyv4225
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4229 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4230 := &yyv4229
		yy4230.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4231 := *v
	yyh4231, yyl4231 := z.DecSliceHelperStart()
	var yyc4231 bool
	if yyl4231 == 0 {
		if yyv4231 == nil {
			yyv4231 = []ComponentStatus{}
			yyc4231 = true
		} else if len(yyv4231) != 0 {
			yyv4231 = yyv4231[:0]
			yyc4231 = true
		}
	} else if yyl4231 > 0 {
		var yyrr4231, yyrl4231 int
		var yyrt4231 bool
		if yyl4231 > cap(yyv4231) {

			yyrg4231 := len(yyv4231) > 0
			yyv24231 := yyv4231
			yyrl4231, yyrt4231 = z.DecInferLen(yyl4231, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt4231 {
				if yyrl4231 <= cap(yyv4231) {
					yyv4231 = yyv4231[:yyrl4231]
				} else {
					yyv4231 = make([]ComponentStatus, yyrl4231)
				}
			} else {
				yyv4231 = make([]ComponentStatus, yyrl4231)
			}
			yyc4231 = true
			yyrr4231 = len(yyv4231)
			if yyrg4231 {
				copy(yyv4231, yyv24231)
			}
		} else if yyl4231 != len(yyv4231) {
			yyv4231 = yyv4231[:yyl4231]
			yyc4231 = true
		}
		yyj4231 := 0
		for ; yyj4231 < yyrr4231; yyj4231++ {
			yyh4231.ElemContainerState(yyj4231)
			if r.TryDecodeAsNil() {
				yyv4231[yyj4231] = ComponentStatus{}
			} else {
				yyv4232 := &yyv4231[yyj4231]
				yyv4232.CodecDecodeSelf(d)
			}

		}
		if yyrt4231 {
			for ; yyj4231 < yyl4231; yyj4231++ {
				yyv4231 = append(yyv4231, ComponentStatus{})
				yyh4231.ElemContainerState(yyj4231)
				if r.TryDecodeAsNil() {
					yyv4231[yyj4231] = ComponentStatus{}
				} else {
					yyv4233 := &yyv4231[yyj4231]
					yyv4233.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4231 := 0
		for ; !r.CheckBreak(); yyj4231++ {

			if yyj4231 >= len(yyv4231) {
				yyv4231 = append(yyv4231, ComponentStatus{}) // var yyz4231 ComponentStatus
				yyc4231 = true
			}
			yyh4231.ElemContainerState(yyj4231)
			if yyj4231 < len(yyv4231) {
				if r.TryDecodeAsNil() {
					yyv4231[yyj4231] = ComponentStatus{}
				} else {
					yyv4234 := &yyv4231[yyj4231]
					yyv4234.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4231 < len(yyv4231) {
			yyv4231 = yyv4231[:yyj4231]
			yyc4231 = true
		} else if yyj4231 == 0 && yyv4231 == nil {
			yyv4231 = []ComponentStatus{}
			yyc4231 = true
		}
	}
	yyh4231.End()
	if yyc4231 {
		*v = yyv4231
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4235 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4236 := &yyv4235
		yy4236.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4237 := *v
	yyh4237, yyl4237 := z.DecSliceHelperStart()
	var yyc4237 bool
	if yyl4237 == 0 {
		if yyv4237 == nil {
			yyv4237 = []DownwardAPIVolumeFile{}
			yyc4237 = true
		} else if len(yyv4237) != 0 {
			yyv4237 = yyv4237[:0]
			yyc4237 = true
		}
	} else if yyl4237 > 0 {
		var yyrr4237, yyrl4237 int
		var yyrt4237 bool
		if yyl4237 > cap(yyv4237) {

			yyrg4237 := len(yyv4237) > 0
			yyv24237 := yyv4237
			yyrl4237, yyrt4237 = z.DecInferLen(yyl4237, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4237 {
				if yyrl4237 <= cap(yyv4237) {
					yyv4237 = yyv4237[:yyrl4237]
				} else {
					yyv4237 = make([]DownwardAPIVolumeFile, yyrl4237)
				}
			} else {
				yyv4237 = make([]DownwardAPIVolumeFile, yyrl4237)
			}
			yyc4237 = true
			yyrr4237 = len(yyv4237)
			if yyrg4237 {
				copy(yyv4237, yyv24237)
			}
		} else if yyl4237 != len(yyv4237) {
			yyv4237 = yyv4237[:yyl4237]
			yyc4237 = true
		}
		yyj4237 := 0
		for ; yyj4237 < yyrr4237; yyj4237++ {
			yyh4237.ElemContainerState(yyj4237)
			if r.TryDecodeAsNil() {
				yyv4237[yyj4237] = DownwardAPIVolumeFile{}
			} else {
				yyv4238 := &yyv4237[yyj4237]
				yyv4238.CodecDecodeSelf(d)
			}

		}
		if yyrt4237 {
			for ; yyj4237 < yyl4237; yyj4237++ {
				yyv4237 = append(yyv4237, DownwardAPIVolumeFile{})
				yyh4237.ElemContainerState(yyj4237)
				if r.TryDecodeAsNil() {
					yyv4237[yyj4237] = DownwardAPIVolumeFile{}
				} else {
					yyv4239 := &yyv4237[yyj4237]
					yyv4239.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4237 := 0
		for ; !r.CheckBreak(); yyj4237++ {

			if yyj4237 >= len(yyv4237) {
				yyv4237 = append(yyv4237, DownwardAPIVolumeFile{}) // var yyz4237 DownwardAPIVolumeFile
				yyc4237 = true
			}
			yyh4237.ElemContainerState(yyj4237)
			if yyj4237 < len(yyv4237) {
				if r.TryDecodeAsNil() {
					yyv4237[yyj4237] = DownwardAPIVolumeFile{}
				} else {
					yyv4240 := &yyv4237[yyj4237]
					yyv4240.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4237 < len(yyv4237) {
			yyv4237 = yyv4237[:yyj4237]
			yyc4237 = true
		} else if yyj4237 == 0 && yyv4237 == nil {
			yyv4237 = []DownwardAPIVolumeFile{}
			yyc4237 = true
		}
	}
	yyh4237.End()
	if yyc4237 {
		*v = yyv4237
	}
}
